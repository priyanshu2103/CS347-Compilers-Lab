Terminals unused in grammar

   LE
   GE
   NEQ
   GT
   EXCL
   IF
   ELSE


Grammar

    0 $accept: stmts $end

    1 stmts: stmt
    2      | stmt stmts

    3 stmt: stmt_wo_func
    4     | stmt_with_func

    5 stmt_wo_func: arith
    6             | func_call SEMI
    7             | switch_case
    8             | for_loop
    9             | while_loop
   10             | non_decl_assgn

   11 stmt_with_func: func_decl
   12               | func_def
   13               | var_or_func

   14 var_or_func: type id_list
   15            | type ID LP def_arg_temp RP SEMI
   16            | type ID LP def_arg_temp RP func_def_aux

   17 type: INT_DECL
   18     | FLOAT_DECL

   19 $@1: %empty

   20 var_decl: INT_DECL $@1 id_list

   21 $@2: %empty

   22 var_decl: FLOAT_DECL $@2 id_list

   23 id_list: assign SEMI
   24        | assign COMMA id_list

   25 assign: ID
   26       | id_assign_list

   27 id_assign_list: ID EQ ID
   28               | ID EQ INT
   29               | ID EQ FLOAT
   30               | ID EQ arith_expr
   31               | ID EQ func_call
   32               | ID EQ id_assign_list

   33 non_decl_assgn: id_assign_list SEMI

   34 arith: arith_expr SEMI

   35 arith_expr: arith_arg PLUS arith_arg
   36           | arith_arg MINUS arith_arg
   37           | arith_arg MULT arith_arg
   38           | arith_arg DIV arith_arg
   39           | arith_arg MOD arith_arg
   40           | arith_arg PLUS arith_expr
   41           | arith_arg MINUS arith_expr
   42           | arith_arg MULT arith_expr
   43           | arith_arg DIV arith_expr
   44           | arith_arg MOD arith_expr

   45 arith_arg: ID
   46          | INT
   47          | FLOAT
   48          | func_call
   49          | LP arith_expr RP

   50 @3: %empty

   51 func_call: ID LP @3 call_arg_list RP

   52 call_arg_list: %empty
   53              | call_arg
   54              | call_arg COMMA call_arg_list

   55 call_arg: ID
   56         | INT
   57         | FLOAT

   58 func_decl: VOID ID LP def_arg_temp RP SEMI

   59 func_def: VOID ID LP def_arg_temp RP func_def_aux

   60 def_arg_temp: %empty

   61 $@4: %empty

   62 def_arg_temp: $@4 def_arg_list

   63 def_arg_list: def_arg
   64             | def_arg COMMA def_arg_list

   65 def_arg: INT_DECL ID
   66        | FLOAT_DECL ID

   67 func_def_aux: stmt_wo_func
   68             | LC body RC

   69 body: stmt_wo_func
   70     | stmt_wo_func body

   71 cond: and_expr
   72     | and_expr OR cond

   73 and_expr: expr
   74         | expr AND and_expr

   75 expr: ID LT ID

   76 switch_case: SWITCH ID COL LC cases RC
   77            | SWITCH LP ID RP LC cases RC

   78 cases: case default
   79      | case cases

   80 case: CASE INT COL body break
   81     | CASE INT COL LC body RC break
   82     | CASE LP INT RP COL body break
   83     | CASE LP INT RP COL LC body RC break
   84     | CASE FLOAT COL body break
   85     | CASE FLOAT COL LC body RC break
   86     | CASE LP FLOAT RP COL body break
   87     | CASE LP FLOAT RP COL LC body RC break

   88 default: %empty
   89        | DEFAULT COL body break
   90        | DEFAULT COL LC body RC break

   91 break: %empty
   92      | BREAK SEMI

   93 for_loop: FOR LP for_expr RP func_def_aux

   94 for_expr: for_first for_second for_third

   95 for_first: SEMI
   96          | var_decl
   97          | id_assign_list

   98 for_second: SEMI
   99           | cond SEMI

  100 for_third: %empty
  101          | id_assign_list

  102 while_loop: WHILE LP cond RP func_def_aux


Terminals, with rules where they appear

$end (0) 0
error (256)
PLUS (258) 35 40
MINUS (259) 36 41
MULT (260) 37 42
DIV (261) 38 43
MOD (262) 39 44
LE (263)
GE (264)
EQ (265) 27 28 29 30 31 32
NEQ (266)
LT (267) 75
GT (268)
AND (269) 74
OR (270) 72
EXCL (271)
COMMA (272) 24 54 64
COL (273) 76 80 81 82 83 84 85 86 87 89 90
SEMI (274) 6 15 23 33 34 58 92 95 98 99
LC (275) 68 76 77 81 83 85 87 90
RC (276) 68 76 77 81 83 85 87 90
LP (277) 15 16 49 51 58 59 77 82 83 86 87 93 102
RP (278) 15 16 49 51 58 59 77 82 83 86 87 93 102
VOID (279) 58 59
INT_DECL (280) 17 20 65
FLOAT_DECL (281) 18 22 66
ID (282) 15 16 25 27 28 29 30 31 32 45 51 55 58 59 65 66 75 76 77
INT (283) 28 46 56 80 81 82 83
FLOAT (284) 29 47 57 84 85 86 87
IF (285)
ELSE (286)
SWITCH (287) 76 77
CASE (288) 80 81 82 83 84 85 86 87
FOR (289) 93
WHILE (290) 102
BREAK (291) 92
DEFAULT (292) 89 90


Nonterminals, with rules where they appear

$accept (38)
    on left: 0
stmts (39)
    on left: 1 2, on right: 0 2
stmt (40)
    on left: 3 4, on right: 1 2
stmt_wo_func (41)
    on left: 5 6 7 8 9 10, on right: 3 67 69 70
stmt_with_func (42)
    on left: 11 12 13, on right: 4
var_or_func (43)
    on left: 14 15 16, on right: 13
type (44)
    on left: 17 18, on right: 14 15 16
var_decl (45)
    on left: 20 22, on right: 96
$@1 (46)
    on left: 19, on right: 20
$@2 (47)
    on left: 21, on right: 22
id_list (48)
    on left: 23 24, on right: 14 20 22 24
assign (49)
    on left: 25 26, on right: 23 24
id_assign_list (50)
    on left: 27 28 29 30 31 32, on right: 26 32 33 97 101
non_decl_assgn (51)
    on left: 33, on right: 10
arith (52)
    on left: 34, on right: 5
arith_expr (53)
    on left: 35 36 37 38 39 40 41 42 43 44, on right: 30 34 40 41 42
    43 44 49
arith_arg (54)
    on left: 45 46 47 48 49, on right: 35 36 37 38 39 40 41 42 43 44
func_call (55)
    on left: 51, on right: 6 31 48
@3 (56)
    on left: 50, on right: 51
call_arg_list (57)
    on left: 52 53 54, on right: 51 54
call_arg (58)
    on left: 55 56 57, on right: 53 54
func_decl (59)
    on left: 58, on right: 11
func_def (60)
    on left: 59, on right: 12
def_arg_temp (61)
    on left: 60 62, on right: 15 16 58 59
$@4 (62)
    on left: 61, on right: 62
def_arg_list (63)
    on left: 63 64, on right: 62 64
def_arg (64)
    on left: 65 66, on right: 63 64
func_def_aux (65)
    on left: 67 68, on right: 16 59 93 102
body (66)
    on left: 69 70, on right: 68 70 80 81 82 83 84 85 86 87 89 90
cond (67)
    on left: 71 72, on right: 72 99 102
and_expr (68)
    on left: 73 74, on right: 71 72 74
expr (69)
    on left: 75, on right: 73 74
switch_case (70)
    on left: 76 77, on right: 7
cases (71)
    on left: 78 79, on right: 76 77 79
case (72)
    on left: 80 81 82 83 84 85 86 87, on right: 78 79
default (73)
    on left: 88 89 90, on right: 78
break (74)
    on left: 91 92, on right: 80 81 82 83 84 85 86 87 89 90
for_loop (75)
    on left: 93, on right: 8
for_expr (76)
    on left: 94, on right: 93
for_first (77)
    on left: 95 96 97, on right: 94
for_second (78)
    on left: 98 99, on right: 94
for_third (79)
    on left: 100 101, on right: 94
while_loop (80)
    on left: 102, on right: 9


State 0

    0 $accept: . stmts $end

    LP          shift, and go to state 1
    VOID        shift, and go to state 2
    INT_DECL    shift, and go to state 3
    FLOAT_DECL  shift, and go to state 4
    ID          shift, and go to state 5
    INT         shift, and go to state 6
    FLOAT       shift, and go to state 7
    SWITCH      shift, and go to state 8
    FOR         shift, and go to state 9
    WHILE       shift, and go to state 10

    stmts           go to state 11
    stmt            go to state 12
    stmt_wo_func    go to state 13
    stmt_with_func  go to state 14
    var_or_func     go to state 15
    type            go to state 16
    id_assign_list  go to state 17
    non_decl_assgn  go to state 18
    arith           go to state 19
    arith_expr      go to state 20
    arith_arg       go to state 21
    func_call       go to state 22
    func_decl       go to state 23
    func_def        go to state 24
    switch_case     go to state 25
    for_loop        go to state 26
    while_loop      go to state 27


State 1

   49 arith_arg: LP . arith_expr RP

    LP     shift, and go to state 1
    ID     shift, and go to state 28
    INT    shift, and go to state 6
    FLOAT  shift, and go to state 7

    arith_expr  go to state 29
    arith_arg   go to state 21
    func_call   go to state 30


State 2

   58 func_decl: VOID . ID LP def_arg_temp RP SEMI
   59 func_def: VOID . ID LP def_arg_temp RP func_def_aux

    ID  shift, and go to state 31


State 3

   17 type: INT_DECL .

    $default  reduce using rule 17 (type)


State 4

   18 type: FLOAT_DECL .

    $default  reduce using rule 18 (type)


State 5

   27 id_assign_list: ID . EQ ID
   28               | ID . EQ INT
   29               | ID . EQ FLOAT
   30               | ID . EQ arith_expr
   31               | ID . EQ func_call
   32               | ID . EQ id_assign_list
   45 arith_arg: ID .
   51 func_call: ID . LP @3 call_arg_list RP

    EQ  shift, and go to state 32
    LP  shift, and go to state 33

    $default  reduce using rule 45 (arith_arg)


State 6

   46 arith_arg: INT .

    $default  reduce using rule 46 (arith_arg)


State 7

   47 arith_arg: FLOAT .

    $default  reduce using rule 47 (arith_arg)


State 8

   76 switch_case: SWITCH . ID COL LC cases RC
   77            | SWITCH . LP ID RP LC cases RC

    LP  shift, and go to state 34
    ID  shift, and go to state 35


State 9

   93 for_loop: FOR . LP for_expr RP func_def_aux

    LP  shift, and go to state 36


State 10

  102 while_loop: WHILE . LP cond RP func_def_aux

    LP  shift, and go to state 37


State 11

    0 $accept: stmts . $end

    $end  shift, and go to state 38


State 12

    1 stmts: stmt .
    2      | stmt . stmts

    LP          shift, and go to state 1
    VOID        shift, and go to state 2
    INT_DECL    shift, and go to state 3
    FLOAT_DECL  shift, and go to state 4
    ID          shift, and go to state 5
    INT         shift, and go to state 6
    FLOAT       shift, and go to state 7
    SWITCH      shift, and go to state 8
    FOR         shift, and go to state 9
    WHILE       shift, and go to state 10

    $default  reduce using rule 1 (stmts)

    stmts           go to state 39
    stmt            go to state 12
    stmt_wo_func    go to state 13
    stmt_with_func  go to state 14
    var_or_func     go to state 15
    type            go to state 16
    id_assign_list  go to state 17
    non_decl_assgn  go to state 18
    arith           go to state 19
    arith_expr      go to state 20
    arith_arg       go to state 21
    func_call       go to state 22
    func_decl       go to state 23
    func_def        go to state 24
    switch_case     go to state 25
    for_loop        go to state 26
    while_loop      go to state 27


State 13

    3 stmt: stmt_wo_func .

    $default  reduce using rule 3 (stmt)


State 14

    4 stmt: stmt_with_func .

    $default  reduce using rule 4 (stmt)


State 15

   13 stmt_with_func: var_or_func .

    $default  reduce using rule 13 (stmt_with_func)


State 16

   14 var_or_func: type . id_list
   15            | type . ID LP def_arg_temp RP SEMI
   16            | type . ID LP def_arg_temp RP func_def_aux

    ID  shift, and go to state 40

    id_list         go to state 41
    assign          go to state 42
    id_assign_list  go to state 43


State 17

   33 non_decl_assgn: id_assign_list . SEMI

    SEMI  shift, and go to state 44


State 18

   10 stmt_wo_func: non_decl_assgn .

    $default  reduce using rule 10 (stmt_wo_func)


State 19

    5 stmt_wo_func: arith .

    $default  reduce using rule 5 (stmt_wo_func)


State 20

   34 arith: arith_expr . SEMI

    SEMI  shift, and go to state 45


State 21

   35 arith_expr: arith_arg . PLUS arith_arg
   36           | arith_arg . MINUS arith_arg
   37           | arith_arg . MULT arith_arg
   38           | arith_arg . DIV arith_arg
   39           | arith_arg . MOD arith_arg
   40           | arith_arg . PLUS arith_expr
   41           | arith_arg . MINUS arith_expr
   42           | arith_arg . MULT arith_expr
   43           | arith_arg . DIV arith_expr
   44           | arith_arg . MOD arith_expr

    PLUS   shift, and go to state 46
    MINUS  shift, and go to state 47
    MULT   shift, and go to state 48
    DIV    shift, and go to state 49
    MOD    shift, and go to state 50


State 22

    6 stmt_wo_func: func_call . SEMI
   48 arith_arg: func_call .

    SEMI  shift, and go to state 51

    $default  reduce using rule 48 (arith_arg)


State 23

   11 stmt_with_func: func_decl .

    $default  reduce using rule 11 (stmt_with_func)


State 24

   12 stmt_with_func: func_def .

    $default  reduce using rule 12 (stmt_with_func)


State 25

    7 stmt_wo_func: switch_case .

    $default  reduce using rule 7 (stmt_wo_func)


State 26

    8 stmt_wo_func: for_loop .

    $default  reduce using rule 8 (stmt_wo_func)


State 27

    9 stmt_wo_func: while_loop .

    $default  reduce using rule 9 (stmt_wo_func)


State 28

   45 arith_arg: ID .
   51 func_call: ID . LP @3 call_arg_list RP

    LP  shift, and go to state 33

    $default  reduce using rule 45 (arith_arg)


State 29

   49 arith_arg: LP arith_expr . RP

    RP  shift, and go to state 52


State 30

   48 arith_arg: func_call .

    $default  reduce using rule 48 (arith_arg)


State 31

   58 func_decl: VOID ID . LP def_arg_temp RP SEMI
   59 func_def: VOID ID . LP def_arg_temp RP func_def_aux

    LP  shift, and go to state 53


State 32

   27 id_assign_list: ID EQ . ID
   28               | ID EQ . INT
   29               | ID EQ . FLOAT
   30               | ID EQ . arith_expr
   31               | ID EQ . func_call
   32               | ID EQ . id_assign_list

    LP     shift, and go to state 1
    ID     shift, and go to state 54
    INT    shift, and go to state 55
    FLOAT  shift, and go to state 56

    id_assign_list  go to state 57
    arith_expr      go to state 58
    arith_arg       go to state 21
    func_call       go to state 59


State 33

   51 func_call: ID LP . @3 call_arg_list RP

    $default  reduce using rule 50 (@3)

    @3  go to state 60


State 34

   77 switch_case: SWITCH LP . ID RP LC cases RC

    ID  shift, and go to state 61


State 35

   76 switch_case: SWITCH ID . COL LC cases RC

    COL  shift, and go to state 62


State 36

   93 for_loop: FOR LP . for_expr RP func_def_aux

    SEMI        shift, and go to state 63
    INT_DECL    shift, and go to state 64
    FLOAT_DECL  shift, and go to state 65
    ID          shift, and go to state 66

    var_decl        go to state 67
    id_assign_list  go to state 68
    for_expr        go to state 69
    for_first       go to state 70


State 37

  102 while_loop: WHILE LP . cond RP func_def_aux

    ID  shift, and go to state 71

    cond      go to state 72
    and_expr  go to state 73
    expr      go to state 74


State 38

    0 $accept: stmts $end .

    $default  accept


State 39

    2 stmts: stmt stmts .

    $default  reduce using rule 2 (stmts)


State 40

   15 var_or_func: type ID . LP def_arg_temp RP SEMI
   16            | type ID . LP def_arg_temp RP func_def_aux
   25 assign: ID .
   27 id_assign_list: ID . EQ ID
   28               | ID . EQ INT
   29               | ID . EQ FLOAT
   30               | ID . EQ arith_expr
   31               | ID . EQ func_call
   32               | ID . EQ id_assign_list

    EQ  shift, and go to state 32
    LP  shift, and go to state 75

    $default  reduce using rule 25 (assign)


State 41

   14 var_or_func: type id_list .

    $default  reduce using rule 14 (var_or_func)


State 42

   23 id_list: assign . SEMI
   24        | assign . COMMA id_list

    COMMA  shift, and go to state 76
    SEMI   shift, and go to state 77


State 43

   26 assign: id_assign_list .

    $default  reduce using rule 26 (assign)


State 44

   33 non_decl_assgn: id_assign_list SEMI .

    $default  reduce using rule 33 (non_decl_assgn)


State 45

   34 arith: arith_expr SEMI .

    $default  reduce using rule 34 (arith)


State 46

   35 arith_expr: arith_arg PLUS . arith_arg
   40           | arith_arg PLUS . arith_expr

    LP     shift, and go to state 1
    ID     shift, and go to state 28
    INT    shift, and go to state 6
    FLOAT  shift, and go to state 7

    arith_expr  go to state 78
    arith_arg   go to state 79
    func_call   go to state 30


State 47

   36 arith_expr: arith_arg MINUS . arith_arg
   41           | arith_arg MINUS . arith_expr

    LP     shift, and go to state 1
    ID     shift, and go to state 28
    INT    shift, and go to state 6
    FLOAT  shift, and go to state 7

    arith_expr  go to state 80
    arith_arg   go to state 81
    func_call   go to state 30


State 48

   37 arith_expr: arith_arg MULT . arith_arg
   42           | arith_arg MULT . arith_expr

    LP     shift, and go to state 1
    ID     shift, and go to state 28
    INT    shift, and go to state 6
    FLOAT  shift, and go to state 7

    arith_expr  go to state 82
    arith_arg   go to state 83
    func_call   go to state 30


State 49

   38 arith_expr: arith_arg DIV . arith_arg
   43           | arith_arg DIV . arith_expr

    LP     shift, and go to state 1
    ID     shift, and go to state 28
    INT    shift, and go to state 6
    FLOAT  shift, and go to state 7

    arith_expr  go to state 84
    arith_arg   go to state 85
    func_call   go to state 30


State 50

   39 arith_expr: arith_arg MOD . arith_arg
   44           | arith_arg MOD . arith_expr

    LP     shift, and go to state 1
    ID     shift, and go to state 28
    INT    shift, and go to state 6
    FLOAT  shift, and go to state 7

    arith_expr  go to state 86
    arith_arg   go to state 87
    func_call   go to state 30


State 51

    6 stmt_wo_func: func_call SEMI .

    $default  reduce using rule 6 (stmt_wo_func)


State 52

   49 arith_arg: LP arith_expr RP .

    $default  reduce using rule 49 (arith_arg)


State 53

   58 func_decl: VOID ID LP . def_arg_temp RP SEMI
   59 func_def: VOID ID LP . def_arg_temp RP func_def_aux

    RP        reduce using rule 60 (def_arg_temp)
    $default  reduce using rule 61 ($@4)

    def_arg_temp  go to state 88
    $@4           go to state 89


State 54

   27 id_assign_list: ID . EQ ID
   27               | ID EQ ID .
   28               | ID . EQ INT
   29               | ID . EQ FLOAT
   30               | ID . EQ arith_expr
   31               | ID . EQ func_call
   32               | ID . EQ id_assign_list
   45 arith_arg: ID .
   51 func_call: ID . LP @3 call_arg_list RP

    EQ  shift, and go to state 32
    LP  shift, and go to state 33

    COMMA     reduce using rule 27 (id_assign_list)
    SEMI      reduce using rule 27 (id_assign_list)
    RP        reduce using rule 27 (id_assign_list)
    ID        reduce using rule 27 (id_assign_list)
    $default  reduce using rule 45 (arith_arg)


State 55

   28 id_assign_list: ID EQ INT .
   46 arith_arg: INT .

    COMMA     reduce using rule 28 (id_assign_list)
    SEMI      reduce using rule 28 (id_assign_list)
    RP        reduce using rule 28 (id_assign_list)
    ID        reduce using rule 28 (id_assign_list)
    $default  reduce using rule 46 (arith_arg)


State 56

   29 id_assign_list: ID EQ FLOAT .
   47 arith_arg: FLOAT .

    COMMA     reduce using rule 29 (id_assign_list)
    SEMI      reduce using rule 29 (id_assign_list)
    RP        reduce using rule 29 (id_assign_list)
    ID        reduce using rule 29 (id_assign_list)
    $default  reduce using rule 47 (arith_arg)


State 57

   32 id_assign_list: ID EQ id_assign_list .

    $default  reduce using rule 32 (id_assign_list)


State 58

   30 id_assign_list: ID EQ arith_expr .

    $default  reduce using rule 30 (id_assign_list)


State 59

   31 id_assign_list: ID EQ func_call .
   48 arith_arg: func_call .

    COMMA     reduce using rule 31 (id_assign_list)
    SEMI      reduce using rule 31 (id_assign_list)
    RP        reduce using rule 31 (id_assign_list)
    ID        reduce using rule 31 (id_assign_list)
    $default  reduce using rule 48 (arith_arg)


State 60

   51 func_call: ID LP @3 . call_arg_list RP

    ID     shift, and go to state 90
    INT    shift, and go to state 91
    FLOAT  shift, and go to state 92

    $default  reduce using rule 52 (call_arg_list)

    call_arg_list  go to state 93
    call_arg       go to state 94


State 61

   77 switch_case: SWITCH LP ID . RP LC cases RC

    RP  shift, and go to state 95


State 62

   76 switch_case: SWITCH ID COL . LC cases RC

    LC  shift, and go to state 96


State 63

   95 for_first: SEMI .

    $default  reduce using rule 95 (for_first)


State 64

   20 var_decl: INT_DECL . $@1 id_list

    $default  reduce using rule 19 ($@1)

    $@1  go to state 97


State 65

   22 var_decl: FLOAT_DECL . $@2 id_list

    $default  reduce using rule 21 ($@2)

    $@2  go to state 98


State 66

   27 id_assign_list: ID . EQ ID
   28               | ID . EQ INT
   29               | ID . EQ FLOAT
   30               | ID . EQ arith_expr
   31               | ID . EQ func_call
   32               | ID . EQ id_assign_list

    EQ  shift, and go to state 32


State 67

   96 for_first: var_decl .

    $default  reduce using rule 96 (for_first)


State 68

   97 for_first: id_assign_list .

    $default  reduce using rule 97 (for_first)


State 69

   93 for_loop: FOR LP for_expr . RP func_def_aux

    RP  shift, and go to state 99


State 70

   94 for_expr: for_first . for_second for_third

    SEMI  shift, and go to state 100
    ID    shift, and go to state 71

    cond        go to state 101
    and_expr    go to state 73
    expr        go to state 74
    for_second  go to state 102


State 71

   75 expr: ID . LT ID

    LT  shift, and go to state 103


State 72

  102 while_loop: WHILE LP cond . RP func_def_aux

    RP  shift, and go to state 104


State 73

   71 cond: and_expr .
   72     | and_expr . OR cond

    OR  shift, and go to state 105

    $default  reduce using rule 71 (cond)


State 74

   73 and_expr: expr .
   74         | expr . AND and_expr

    AND  shift, and go to state 106

    $default  reduce using rule 73 (and_expr)


State 75

   15 var_or_func: type ID LP . def_arg_temp RP SEMI
   16            | type ID LP . def_arg_temp RP func_def_aux

    RP        reduce using rule 60 (def_arg_temp)
    $default  reduce using rule 61 ($@4)

    def_arg_temp  go to state 107
    $@4           go to state 89


State 76

   24 id_list: assign COMMA . id_list

    ID  shift, and go to state 108

    id_list         go to state 109
    assign          go to state 42
    id_assign_list  go to state 43


State 77

   23 id_list: assign SEMI .

    $default  reduce using rule 23 (id_list)


State 78

   40 arith_expr: arith_arg PLUS arith_expr .

    $default  reduce using rule 40 (arith_expr)


State 79

   35 arith_expr: arith_arg . PLUS arith_arg
   35           | arith_arg PLUS arith_arg .
   36           | arith_arg . MINUS arith_arg
   37           | arith_arg . MULT arith_arg
   38           | arith_arg . DIV arith_arg
   39           | arith_arg . MOD arith_arg
   40           | arith_arg . PLUS arith_expr
   41           | arith_arg . MINUS arith_expr
   42           | arith_arg . MULT arith_expr
   43           | arith_arg . DIV arith_expr
   44           | arith_arg . MOD arith_expr

    PLUS   shift, and go to state 46
    MINUS  shift, and go to state 47
    MULT   shift, and go to state 48
    DIV    shift, and go to state 49
    MOD    shift, and go to state 50

    $default  reduce using rule 35 (arith_expr)


State 80

   41 arith_expr: arith_arg MINUS arith_expr .

    $default  reduce using rule 41 (arith_expr)


State 81

   35 arith_expr: arith_arg . PLUS arith_arg
   36           | arith_arg . MINUS arith_arg
   36           | arith_arg MINUS arith_arg .
   37           | arith_arg . MULT arith_arg
   38           | arith_arg . DIV arith_arg
   39           | arith_arg . MOD arith_arg
   40           | arith_arg . PLUS arith_expr
   41           | arith_arg . MINUS arith_expr
   42           | arith_arg . MULT arith_expr
   43           | arith_arg . DIV arith_expr
   44           | arith_arg . MOD arith_expr

    PLUS   shift, and go to state 46
    MINUS  shift, and go to state 47
    MULT   shift, and go to state 48
    DIV    shift, and go to state 49
    MOD    shift, and go to state 50

    $default  reduce using rule 36 (arith_expr)


State 82

   42 arith_expr: arith_arg MULT arith_expr .

    $default  reduce using rule 42 (arith_expr)


State 83

   35 arith_expr: arith_arg . PLUS arith_arg
   36           | arith_arg . MINUS arith_arg
   37           | arith_arg . MULT arith_arg
   37           | arith_arg MULT arith_arg .
   38           | arith_arg . DIV arith_arg
   39           | arith_arg . MOD arith_arg
   40           | arith_arg . PLUS arith_expr
   41           | arith_arg . MINUS arith_expr
   42           | arith_arg . MULT arith_expr
   43           | arith_arg . DIV arith_expr
   44           | arith_arg . MOD arith_expr

    PLUS   shift, and go to state 46
    MINUS  shift, and go to state 47
    MULT   shift, and go to state 48
    DIV    shift, and go to state 49
    MOD    shift, and go to state 50

    $default  reduce using rule 37 (arith_expr)


State 84

   43 arith_expr: arith_arg DIV arith_expr .

    $default  reduce using rule 43 (arith_expr)


State 85

   35 arith_expr: arith_arg . PLUS arith_arg
   36           | arith_arg . MINUS arith_arg
   37           | arith_arg . MULT arith_arg
   38           | arith_arg . DIV arith_arg
   38           | arith_arg DIV arith_arg .
   39           | arith_arg . MOD arith_arg
   40           | arith_arg . PLUS arith_expr
   41           | arith_arg . MINUS arith_expr
   42           | arith_arg . MULT arith_expr
   43           | arith_arg . DIV arith_expr
   44           | arith_arg . MOD arith_expr

    PLUS   shift, and go to state 46
    MINUS  shift, and go to state 47
    MULT   shift, and go to state 48
    DIV    shift, and go to state 49
    MOD    shift, and go to state 50

    $default  reduce using rule 38 (arith_expr)


State 86

   44 arith_expr: arith_arg MOD arith_expr .

    $default  reduce using rule 44 (arith_expr)


State 87

   35 arith_expr: arith_arg . PLUS arith_arg
   36           | arith_arg . MINUS arith_arg
   37           | arith_arg . MULT arith_arg
   38           | arith_arg . DIV arith_arg
   39           | arith_arg . MOD arith_arg
   39           | arith_arg MOD arith_arg .
   40           | arith_arg . PLUS arith_expr
   41           | arith_arg . MINUS arith_expr
   42           | arith_arg . MULT arith_expr
   43           | arith_arg . DIV arith_expr
   44           | arith_arg . MOD arith_expr

    PLUS   shift, and go to state 46
    MINUS  shift, and go to state 47
    MULT   shift, and go to state 48
    DIV    shift, and go to state 49
    MOD    shift, and go to state 50

    $default  reduce using rule 39 (arith_expr)


State 88

   58 func_decl: VOID ID LP def_arg_temp . RP SEMI
   59 func_def: VOID ID LP def_arg_temp . RP func_def_aux

    RP  shift, and go to state 110


State 89

   62 def_arg_temp: $@4 . def_arg_list

    INT_DECL    shift, and go to state 111
    FLOAT_DECL  shift, and go to state 112

    def_arg_list  go to state 113
    def_arg       go to state 114


State 90

   55 call_arg: ID .

    $default  reduce using rule 55 (call_arg)


State 91

   56 call_arg: INT .

    $default  reduce using rule 56 (call_arg)


State 92

   57 call_arg: FLOAT .

    $default  reduce using rule 57 (call_arg)


State 93

   51 func_call: ID LP @3 call_arg_list . RP

    RP  shift, and go to state 115


State 94

   53 call_arg_list: call_arg .
   54              | call_arg . COMMA call_arg_list

    COMMA  shift, and go to state 116

    $default  reduce using rule 53 (call_arg_list)


State 95

   77 switch_case: SWITCH LP ID RP . LC cases RC

    LC  shift, and go to state 117


State 96

   76 switch_case: SWITCH ID COL LC . cases RC

    CASE  shift, and go to state 118

    cases  go to state 119
    case   go to state 120


State 97

   20 var_decl: INT_DECL $@1 . id_list

    ID  shift, and go to state 108

    id_list         go to state 121
    assign          go to state 42
    id_assign_list  go to state 43


State 98

   22 var_decl: FLOAT_DECL $@2 . id_list

    ID  shift, and go to state 108

    id_list         go to state 122
    assign          go to state 42
    id_assign_list  go to state 43


State 99

   93 for_loop: FOR LP for_expr RP . func_def_aux

    LC      shift, and go to state 123
    LP      shift, and go to state 1
    ID      shift, and go to state 5
    INT     shift, and go to state 6
    FLOAT   shift, and go to state 7
    SWITCH  shift, and go to state 8
    FOR     shift, and go to state 9
    WHILE   shift, and go to state 10

    stmt_wo_func    go to state 124
    id_assign_list  go to state 17
    non_decl_assgn  go to state 18
    arith           go to state 19
    arith_expr      go to state 20
    arith_arg       go to state 21
    func_call       go to state 22
    func_def_aux    go to state 125
    switch_case     go to state 25
    for_loop        go to state 26
    while_loop      go to state 27


State 100

   98 for_second: SEMI .

    $default  reduce using rule 98 (for_second)


State 101

   99 for_second: cond . SEMI

    SEMI  shift, and go to state 126


State 102

   94 for_expr: for_first for_second . for_third

    ID  shift, and go to state 66

    $default  reduce using rule 100 (for_third)

    id_assign_list  go to state 127
    for_third       go to state 128


State 103

   75 expr: ID LT . ID

    ID  shift, and go to state 129


State 104

  102 while_loop: WHILE LP cond RP . func_def_aux

    LC      shift, and go to state 123
    LP      shift, and go to state 1
    ID      shift, and go to state 5
    INT     shift, and go to state 6
    FLOAT   shift, and go to state 7
    SWITCH  shift, and go to state 8
    FOR     shift, and go to state 9
    WHILE   shift, and go to state 10

    stmt_wo_func    go to state 124
    id_assign_list  go to state 17
    non_decl_assgn  go to state 18
    arith           go to state 19
    arith_expr      go to state 20
    arith_arg       go to state 21
    func_call       go to state 22
    func_def_aux    go to state 130
    switch_case     go to state 25
    for_loop        go to state 26
    while_loop      go to state 27


State 105

   72 cond: and_expr OR . cond

    ID  shift, and go to state 71

    cond      go to state 131
    and_expr  go to state 73
    expr      go to state 74


State 106

   74 and_expr: expr AND . and_expr

    ID  shift, and go to state 71

    and_expr  go to state 132
    expr      go to state 74


State 107

   15 var_or_func: type ID LP def_arg_temp . RP SEMI
   16            | type ID LP def_arg_temp . RP func_def_aux

    RP  shift, and go to state 133


State 108

   25 assign: ID .
   27 id_assign_list: ID . EQ ID
   28               | ID . EQ INT
   29               | ID . EQ FLOAT
   30               | ID . EQ arith_expr
   31               | ID . EQ func_call
   32               | ID . EQ id_assign_list

    EQ  shift, and go to state 32

    $default  reduce using rule 25 (assign)


State 109

   24 id_list: assign COMMA id_list .

    $default  reduce using rule 24 (id_list)


State 110

   58 func_decl: VOID ID LP def_arg_temp RP . SEMI
   59 func_def: VOID ID LP def_arg_temp RP . func_def_aux

    SEMI    shift, and go to state 134
    LC      shift, and go to state 123
    LP      shift, and go to state 1
    ID      shift, and go to state 5
    INT     shift, and go to state 6
    FLOAT   shift, and go to state 7
    SWITCH  shift, and go to state 8
    FOR     shift, and go to state 9
    WHILE   shift, and go to state 10

    stmt_wo_func    go to state 124
    id_assign_list  go to state 17
    non_decl_assgn  go to state 18
    arith           go to state 19
    arith_expr      go to state 20
    arith_arg       go to state 21
    func_call       go to state 22
    func_def_aux    go to state 135
    switch_case     go to state 25
    for_loop        go to state 26
    while_loop      go to state 27


State 111

   65 def_arg: INT_DECL . ID

    ID  shift, and go to state 136


State 112

   66 def_arg: FLOAT_DECL . ID

    ID  shift, and go to state 137


State 113

   62 def_arg_temp: $@4 def_arg_list .

    $default  reduce using rule 62 (def_arg_temp)


State 114

   63 def_arg_list: def_arg .
   64             | def_arg . COMMA def_arg_list

    COMMA  shift, and go to state 138

    $default  reduce using rule 63 (def_arg_list)


State 115

   51 func_call: ID LP @3 call_arg_list RP .

    $default  reduce using rule 51 (func_call)


State 116

   54 call_arg_list: call_arg COMMA . call_arg_list

    ID     shift, and go to state 90
    INT    shift, and go to state 91
    FLOAT  shift, and go to state 92

    $default  reduce using rule 52 (call_arg_list)

    call_arg_list  go to state 139
    call_arg       go to state 94


State 117

   77 switch_case: SWITCH LP ID RP LC . cases RC

    CASE  shift, and go to state 118

    cases  go to state 140
    case   go to state 120


State 118

   80 case: CASE . INT COL body break
   81     | CASE . INT COL LC body RC break
   82     | CASE . LP INT RP COL body break
   83     | CASE . LP INT RP COL LC body RC break
   84     | CASE . FLOAT COL body break
   85     | CASE . FLOAT COL LC body RC break
   86     | CASE . LP FLOAT RP COL body break
   87     | CASE . LP FLOAT RP COL LC body RC break

    LP     shift, and go to state 141
    INT    shift, and go to state 142
    FLOAT  shift, and go to state 143


State 119

   76 switch_case: SWITCH ID COL LC cases . RC

    RC  shift, and go to state 144


State 120

   78 cases: case . default
   79      | case . cases

    CASE     shift, and go to state 118
    DEFAULT  shift, and go to state 145

    $default  reduce using rule 88 (default)

    cases    go to state 146
    case     go to state 120
    default  go to state 147


State 121

   20 var_decl: INT_DECL $@1 id_list .

    $default  reduce using rule 20 (var_decl)


State 122

   22 var_decl: FLOAT_DECL $@2 id_list .

    $default  reduce using rule 22 (var_decl)


State 123

   68 func_def_aux: LC . body RC

    LP      shift, and go to state 1
    ID      shift, and go to state 5
    INT     shift, and go to state 6
    FLOAT   shift, and go to state 7
    SWITCH  shift, and go to state 8
    FOR     shift, and go to state 9
    WHILE   shift, and go to state 10

    stmt_wo_func    go to state 148
    id_assign_list  go to state 17
    non_decl_assgn  go to state 18
    arith           go to state 19
    arith_expr      go to state 20
    arith_arg       go to state 21
    func_call       go to state 22
    body            go to state 149
    switch_case     go to state 25
    for_loop        go to state 26
    while_loop      go to state 27


State 124

   67 func_def_aux: stmt_wo_func .

    $default  reduce using rule 67 (func_def_aux)


State 125

   93 for_loop: FOR LP for_expr RP func_def_aux .

    $default  reduce using rule 93 (for_loop)


State 126

   99 for_second: cond SEMI .

    $default  reduce using rule 99 (for_second)


State 127

  101 for_third: id_assign_list .

    $default  reduce using rule 101 (for_third)


State 128

   94 for_expr: for_first for_second for_third .

    $default  reduce using rule 94 (for_expr)


State 129

   75 expr: ID LT ID .

    $default  reduce using rule 75 (expr)


State 130

  102 while_loop: WHILE LP cond RP func_def_aux .

    $default  reduce using rule 102 (while_loop)


State 131

   72 cond: and_expr OR cond .

    $default  reduce using rule 72 (cond)


State 132

   74 and_expr: expr AND and_expr .

    $default  reduce using rule 74 (and_expr)


State 133

   15 var_or_func: type ID LP def_arg_temp RP . SEMI
   16            | type ID LP def_arg_temp RP . func_def_aux

    SEMI    shift, and go to state 150
    LC      shift, and go to state 123
    LP      shift, and go to state 1
    ID      shift, and go to state 5
    INT     shift, and go to state 6
    FLOAT   shift, and go to state 7
    SWITCH  shift, and go to state 8
    FOR     shift, and go to state 9
    WHILE   shift, and go to state 10

    stmt_wo_func    go to state 124
    id_assign_list  go to state 17
    non_decl_assgn  go to state 18
    arith           go to state 19
    arith_expr      go to state 20
    arith_arg       go to state 21
    func_call       go to state 22
    func_def_aux    go to state 151
    switch_case     go to state 25
    for_loop        go to state 26
    while_loop      go to state 27


State 134

   58 func_decl: VOID ID LP def_arg_temp RP SEMI .

    $default  reduce using rule 58 (func_decl)


State 135

   59 func_def: VOID ID LP def_arg_temp RP func_def_aux .

    $default  reduce using rule 59 (func_def)


State 136

   65 def_arg: INT_DECL ID .

    $default  reduce using rule 65 (def_arg)


State 137

   66 def_arg: FLOAT_DECL ID .

    $default  reduce using rule 66 (def_arg)


State 138

   64 def_arg_list: def_arg COMMA . def_arg_list

    INT_DECL    shift, and go to state 111
    FLOAT_DECL  shift, and go to state 112

    def_arg_list  go to state 152
    def_arg       go to state 114


State 139

   54 call_arg_list: call_arg COMMA call_arg_list .

    $default  reduce using rule 54 (call_arg_list)


State 140

   77 switch_case: SWITCH LP ID RP LC cases . RC

    RC  shift, and go to state 153


State 141

   82 case: CASE LP . INT RP COL body break
   83     | CASE LP . INT RP COL LC body RC break
   86     | CASE LP . FLOAT RP COL body break
   87     | CASE LP . FLOAT RP COL LC body RC break

    INT    shift, and go to state 154
    FLOAT  shift, and go to state 155


State 142

   80 case: CASE INT . COL body break
   81     | CASE INT . COL LC body RC break

    COL  shift, and go to state 156


State 143

   84 case: CASE FLOAT . COL body break
   85     | CASE FLOAT . COL LC body RC break

    COL  shift, and go to state 157


State 144

   76 switch_case: SWITCH ID COL LC cases RC .

    $default  reduce using rule 76 (switch_case)


State 145

   89 default: DEFAULT . COL body break
   90        | DEFAULT . COL LC body RC break

    COL  shift, and go to state 158


State 146

   79 cases: case cases .

    $default  reduce using rule 79 (cases)


State 147

   78 cases: case default .

    $default  reduce using rule 78 (cases)


State 148

   69 body: stmt_wo_func .
   70     | stmt_wo_func . body

    LP      shift, and go to state 1
    ID      shift, and go to state 5
    INT     shift, and go to state 6
    FLOAT   shift, and go to state 7
    SWITCH  shift, and go to state 8
    FOR     shift, and go to state 9
    WHILE   shift, and go to state 10

    $default  reduce using rule 69 (body)

    stmt_wo_func    go to state 148
    id_assign_list  go to state 17
    non_decl_assgn  go to state 18
    arith           go to state 19
    arith_expr      go to state 20
    arith_arg       go to state 21
    func_call       go to state 22
    body            go to state 159
    switch_case     go to state 25
    for_loop        go to state 26
    while_loop      go to state 27


State 149

   68 func_def_aux: LC body . RC

    RC  shift, and go to state 160


State 150

   15 var_or_func: type ID LP def_arg_temp RP SEMI .

    $default  reduce using rule 15 (var_or_func)


State 151

   16 var_or_func: type ID LP def_arg_temp RP func_def_aux .

    $default  reduce using rule 16 (var_or_func)


State 152

   64 def_arg_list: def_arg COMMA def_arg_list .

    $default  reduce using rule 64 (def_arg_list)


State 153

   77 switch_case: SWITCH LP ID RP LC cases RC .

    $default  reduce using rule 77 (switch_case)


State 154

   82 case: CASE LP INT . RP COL body break
   83     | CASE LP INT . RP COL LC body RC break

    RP  shift, and go to state 161


State 155

   86 case: CASE LP FLOAT . RP COL body break
   87     | CASE LP FLOAT . RP COL LC body RC break

    RP  shift, and go to state 162


State 156

   80 case: CASE INT COL . body break
   81     | CASE INT COL . LC body RC break

    LC      shift, and go to state 163
    LP      shift, and go to state 1
    ID      shift, and go to state 5
    INT     shift, and go to state 6
    FLOAT   shift, and go to state 7
    SWITCH  shift, and go to state 8
    FOR     shift, and go to state 9
    WHILE   shift, and go to state 10

    stmt_wo_func    go to state 148
    id_assign_list  go to state 17
    non_decl_assgn  go to state 18
    arith           go to state 19
    arith_expr      go to state 20
    arith_arg       go to state 21
    func_call       go to state 22
    body            go to state 164
    switch_case     go to state 25
    for_loop        go to state 26
    while_loop      go to state 27


State 157

   84 case: CASE FLOAT COL . body break
   85     | CASE FLOAT COL . LC body RC break

    LC      shift, and go to state 165
    LP      shift, and go to state 1
    ID      shift, and go to state 5
    INT     shift, and go to state 6
    FLOAT   shift, and go to state 7
    SWITCH  shift, and go to state 8
    FOR     shift, and go to state 9
    WHILE   shift, and go to state 10

    stmt_wo_func    go to state 148
    id_assign_list  go to state 17
    non_decl_assgn  go to state 18
    arith           go to state 19
    arith_expr      go to state 20
    arith_arg       go to state 21
    func_call       go to state 22
    body            go to state 166
    switch_case     go to state 25
    for_loop        go to state 26
    while_loop      go to state 27


State 158

   89 default: DEFAULT COL . body break
   90        | DEFAULT COL . LC body RC break

    LC      shift, and go to state 167
    LP      shift, and go to state 1
    ID      shift, and go to state 5
    INT     shift, and go to state 6
    FLOAT   shift, and go to state 7
    SWITCH  shift, and go to state 8
    FOR     shift, and go to state 9
    WHILE   shift, and go to state 10

    stmt_wo_func    go to state 148
    id_assign_list  go to state 17
    non_decl_assgn  go to state 18
    arith           go to state 19
    arith_expr      go to state 20
    arith_arg       go to state 21
    func_call       go to state 22
    body            go to state 168
    switch_case     go to state 25
    for_loop        go to state 26
    while_loop      go to state 27


State 159

   70 body: stmt_wo_func body .

    $default  reduce using rule 70 (body)


State 160

   68 func_def_aux: LC body RC .

    $default  reduce using rule 68 (func_def_aux)


State 161

   82 case: CASE LP INT RP . COL body break
   83     | CASE LP INT RP . COL LC body RC break

    COL  shift, and go to state 169


State 162

   86 case: CASE LP FLOAT RP . COL body break
   87     | CASE LP FLOAT RP . COL LC body RC break

    COL  shift, and go to state 170


State 163

   81 case: CASE INT COL LC . body RC break

    LP      shift, and go to state 1
    ID      shift, and go to state 5
    INT     shift, and go to state 6
    FLOAT   shift, and go to state 7
    SWITCH  shift, and go to state 8
    FOR     shift, and go to state 9
    WHILE   shift, and go to state 10

    stmt_wo_func    go to state 148
    id_assign_list  go to state 17
    non_decl_assgn  go to state 18
    arith           go to state 19
    arith_expr      go to state 20
    arith_arg       go to state 21
    func_call       go to state 22
    body            go to state 171
    switch_case     go to state 25
    for_loop        go to state 26
    while_loop      go to state 27


State 164

   80 case: CASE INT COL body . break

    BREAK  shift, and go to state 172

    $default  reduce using rule 91 (break)

    break  go to state 173


State 165

   85 case: CASE FLOAT COL LC . body RC break

    LP      shift, and go to state 1
    ID      shift, and go to state 5
    INT     shift, and go to state 6
    FLOAT   shift, and go to state 7
    SWITCH  shift, and go to state 8
    FOR     shift, and go to state 9
    WHILE   shift, and go to state 10

    stmt_wo_func    go to state 148
    id_assign_list  go to state 17
    non_decl_assgn  go to state 18
    arith           go to state 19
    arith_expr      go to state 20
    arith_arg       go to state 21
    func_call       go to state 22
    body            go to state 174
    switch_case     go to state 25
    for_loop        go to state 26
    while_loop      go to state 27


State 166

   84 case: CASE FLOAT COL body . break

    BREAK  shift, and go to state 172

    $default  reduce using rule 91 (break)

    break  go to state 175


State 167

   90 default: DEFAULT COL LC . body RC break

    LP      shift, and go to state 1
    ID      shift, and go to state 5
    INT     shift, and go to state 6
    FLOAT   shift, and go to state 7
    SWITCH  shift, and go to state 8
    FOR     shift, and go to state 9
    WHILE   shift, and go to state 10

    stmt_wo_func    go to state 148
    id_assign_list  go to state 17
    non_decl_assgn  go to state 18
    arith           go to state 19
    arith_expr      go to state 20
    arith_arg       go to state 21
    func_call       go to state 22
    body            go to state 176
    switch_case     go to state 25
    for_loop        go to state 26
    while_loop      go to state 27


State 168

   89 default: DEFAULT COL body . break

    BREAK  shift, and go to state 172

    $default  reduce using rule 91 (break)

    break  go to state 177


State 169

   82 case: CASE LP INT RP COL . body break
   83     | CASE LP INT RP COL . LC body RC break

    LC      shift, and go to state 178
    LP      shift, and go to state 1
    ID      shift, and go to state 5
    INT     shift, and go to state 6
    FLOAT   shift, and go to state 7
    SWITCH  shift, and go to state 8
    FOR     shift, and go to state 9
    WHILE   shift, and go to state 10

    stmt_wo_func    go to state 148
    id_assign_list  go to state 17
    non_decl_assgn  go to state 18
    arith           go to state 19
    arith_expr      go to state 20
    arith_arg       go to state 21
    func_call       go to state 22
    body            go to state 179
    switch_case     go to state 25
    for_loop        go to state 26
    while_loop      go to state 27


State 170

   86 case: CASE LP FLOAT RP COL . body break
   87     | CASE LP FLOAT RP COL . LC body RC break

    LC      shift, and go to state 180
    LP      shift, and go to state 1
    ID      shift, and go to state 5
    INT     shift, and go to state 6
    FLOAT   shift, and go to state 7
    SWITCH  shift, and go to state 8
    FOR     shift, and go to state 9
    WHILE   shift, and go to state 10

    stmt_wo_func    go to state 148
    id_assign_list  go to state 17
    non_decl_assgn  go to state 18
    arith           go to state 19
    arith_expr      go to state 20
    arith_arg       go to state 21
    func_call       go to state 22
    body            go to state 181
    switch_case     go to state 25
    for_loop        go to state 26
    while_loop      go to state 27


State 171

   81 case: CASE INT COL LC body . RC break

    RC  shift, and go to state 182


State 172

   92 break: BREAK . SEMI

    SEMI  shift, and go to state 183


State 173

   80 case: CASE INT COL body break .

    $default  reduce using rule 80 (case)


State 174

   85 case: CASE FLOAT COL LC body . RC break

    RC  shift, and go to state 184


State 175

   84 case: CASE FLOAT COL body break .

    $default  reduce using rule 84 (case)


State 176

   90 default: DEFAULT COL LC body . RC break

    RC  shift, and go to state 185


State 177

   89 default: DEFAULT COL body break .

    $default  reduce using rule 89 (default)


State 178

   83 case: CASE LP INT RP COL LC . body RC break

    LP      shift, and go to state 1
    ID      shift, and go to state 5
    INT     shift, and go to state 6
    FLOAT   shift, and go to state 7
    SWITCH  shift, and go to state 8
    FOR     shift, and go to state 9
    WHILE   shift, and go to state 10

    stmt_wo_func    go to state 148
    id_assign_list  go to state 17
    non_decl_assgn  go to state 18
    arith           go to state 19
    arith_expr      go to state 20
    arith_arg       go to state 21
    func_call       go to state 22
    body            go to state 186
    switch_case     go to state 25
    for_loop        go to state 26
    while_loop      go to state 27


State 179

   82 case: CASE LP INT RP COL body . break

    BREAK  shift, and go to state 172

    $default  reduce using rule 91 (break)

    break  go to state 187


State 180

   87 case: CASE LP FLOAT RP COL LC . body RC break

    LP      shift, and go to state 1
    ID      shift, and go to state 5
    INT     shift, and go to state 6
    FLOAT   shift, and go to state 7
    SWITCH  shift, and go to state 8
    FOR     shift, and go to state 9
    WHILE   shift, and go to state 10

    stmt_wo_func    go to state 148
    id_assign_list  go to state 17
    non_decl_assgn  go to state 18
    arith           go to state 19
    arith_expr      go to state 20
    arith_arg       go to state 21
    func_call       go to state 22
    body            go to state 188
    switch_case     go to state 25
    for_loop        go to state 26
    while_loop      go to state 27


State 181

   86 case: CASE LP FLOAT RP COL body . break

    BREAK  shift, and go to state 172

    $default  reduce using rule 91 (break)

    break  go to state 189


State 182

   81 case: CASE INT COL LC body RC . break

    BREAK  shift, and go to state 172

    $default  reduce using rule 91 (break)

    break  go to state 190


State 183

   92 break: BREAK SEMI .

    $default  reduce using rule 92 (break)


State 184

   85 case: CASE FLOAT COL LC body RC . break

    BREAK  shift, and go to state 172

    $default  reduce using rule 91 (break)

    break  go to state 191


State 185

   90 default: DEFAULT COL LC body RC . break

    BREAK  shift, and go to state 172

    $default  reduce using rule 91 (break)

    break  go to state 192


State 186

   83 case: CASE LP INT RP COL LC body . RC break

    RC  shift, and go to state 193


State 187

   82 case: CASE LP INT RP COL body break .

    $default  reduce using rule 82 (case)


State 188

   87 case: CASE LP FLOAT RP COL LC body . RC break

    RC  shift, and go to state 194


State 189

   86 case: CASE LP FLOAT RP COL body break .

    $default  reduce using rule 86 (case)


State 190

   81 case: CASE INT COL LC body RC break .

    $default  reduce using rule 81 (case)


State 191

   85 case: CASE FLOAT COL LC body RC break .

    $default  reduce using rule 85 (case)


State 192

   90 default: DEFAULT COL LC body RC break .

    $default  reduce using rule 90 (default)


State 193

   83 case: CASE LP INT RP COL LC body RC . break

    BREAK  shift, and go to state 172

    $default  reduce using rule 91 (break)

    break  go to state 195


State 194

   87 case: CASE LP FLOAT RP COL LC body RC . break

    BREAK  shift, and go to state 172

    $default  reduce using rule 91 (break)

    break  go to state 196


State 195

   83 case: CASE LP INT RP COL LC body RC break .

    $default  reduce using rule 83 (case)


State 196

   87 case: CASE LP FLOAT RP COL LC body RC break .

    $default  reduce using rule 87 (case)
