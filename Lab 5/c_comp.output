Terminals unused in grammar

   IF
   ELSE


Rules useless in parser due to conflicts

   59 @7: %empty

   61 @8: %empty

   63 @9: %empty

   65 @10: %empty

   67 @11: %empty

   69 @12: %empty


State 3 conflicts: 1 shift/reduce
State 4 conflicts: 1 shift/reduce
State 27 conflicts: 1 reduce/reduce
State 28 conflicts: 1 reduce/reduce
State 30 conflicts: 1 reduce/reduce
State 35 conflicts: 1 shift/reduce
State 67 conflicts: 1 shift/reduce
State 71 conflicts: 1 shift/reduce
State 72 conflicts: 1 shift/reduce
State 74 conflicts: 4 shift/reduce
State 75 conflicts: 4 shift/reduce
State 76 conflicts: 4 shift/reduce
State 77 conflicts: 4 shift/reduce


Grammar

    0 $accept: stmts $end

    1 stmts: stmt
    2      | stmt stmts

    3 stmt: stmt_wo_func
    4     | stmt_with_func

    5 stmt_wo_func: var_decl
    6             | arith
    7             | func_call SEMI
    8             | switch_case
    9             | for_loop
   10             | while_loop

   11 stmt_with_func: func_decl
   12               | func_def

   13 $@1: %empty

   14 var_decl: INT_DECL $@1 id_list

   15 $@2: %empty

   16 var_decl: FLOAT_DECL $@2 id_list

   17 id_list: assign SEMI
   18        | assign COMMA id_list

   19 assign: ID
   20       | ID EQ id_assign_list

   21 id_assign_list: ID
   22               | ID EQ INT
   23               | ID EQ FLOAT
   24               | ID EQ arith_expr
   25               | ID EQ func_call
   26               | ID EQ id_assign_list

   27 arith: arith_expr SEMI

   28 arith_expr: arith_arg PLUS arith_arg
   29           | arith_arg MINUS arith_arg
   30           | arith_arg MULT arith_arg
   31           | arith_arg DIV arith_arg

   32 arith_arg: ID
   33          | INT
   34          | FLOAT
   35          | arith_expr
   36          | func_call
   37          | LP arith_expr RP

   38 @3: %empty

   39 func_call: ID @3 LP call_arg_list RP

   40 call_arg_list: %empty
   41              | call_arg
   42              | call_arg COMMA call_arg_list

   43 call_arg: ID
   44         | INT
   45         | FLOAT

   46 @4: %empty

   47 func_decl: VOID ID @4 LP decl_arg_list RP SEMI

   48 @5: %empty

   49 func_decl: INT_DECL ID @5 LP decl_arg_list RP SEMI

   50 @6: %empty

   51 func_decl: FLOAT_DECL ID @6 LP decl_arg_list RP SEMI

   52 decl_arg_list: %empty
   53              | decl_arg
   54              | decl_arg COMMA decl_arg_list

   55 decl_arg: INT_DECL
   56         | FLOAT_DECL
   57         | INT_DECL ID
   58         | FLOAT_DECL ID

   59 @7: %empty

   60 func_def: VOID ID @7 LP def_arg_list RP stmt_wo_func

   61 @8: %empty

   62 func_def: VOID ID @8 LP def_arg_list RP LC body RC

   63 @9: %empty

   64 func_def: INT_DECL ID @9 LP def_arg_list RP stmt_wo_func

   65 @10: %empty

   66 func_def: INT_DECL ID @10 LP def_arg_list RP LC body RC

   67 @11: %empty

   68 func_def: FLOAT_DECL ID @11 LP def_arg_list RP stmt_wo_func

   69 @12: %empty

   70 func_def: FLOAT_DECL ID @12 LP def_arg_list RP LC body RC

   71 def_arg_list: %empty
   72             | def_arg
   73             | def_arg COMMA def_arg_list

   74 def_arg: INT_DECL ID
   75        | FLOAT_DECL ID

   76 body: stmt_wo_func
   77     | stmt_wo_func body

   78 cond: and_expr
   79     | and_expr OR cond

   80 and_expr: expr
   81         | expr AND and_expr

   82 expr: arith_expr LT arith_expr
   83     | arith_expr GT arith_expr
   84     | arith_expr LE arith_expr
   85     | arith_expr GE arith_expr
   86     | arith_expr EQ EQ arith_expr
   87     | arith_expr NEQ arith_expr
   88     | EXCL cond

   89 switch_case: SWITCH ID COL LC cases RC
   90            | SWITCH LP ID RP LC cases RC

   91 cases: case default
   92      | case cases

   93 case: CASE INT COL body break
   94     | CASE INT COL LC body RC break
   95     | CASE LP INT RP COL body break
   96     | CASE LP INT RP COL LC body RC break
   97     | CASE FLOAT COL body break
   98     | CASE FLOAT COL LC body RC break
   99     | CASE LP FLOAT RP COL body break
  100     | CASE LP FLOAT RP COL LC body RC break

  101 default: %empty
  102        | DEFAULT COL body break
  103        | DEFAULT COL LC body RC break

  104 break: %empty
  105      | BREAK SEMI

  106 for_loop: FOR LP for_expr RP stmt_wo_func
  107         | FOR LP for_expr RP LC body RC

  108 for_expr: for_first for_second for_third

  109 for_first: %empty
  110          | var_decl
  111          | id_list

  112 for_second: %empty
  113           | cond SEMI

  114 for_third: %empty
  115          | ID EQ id_assign_list

  116 while_loop: WHILE LP cond RP stmt_wo_func
  117           | WHILE LP cond RP LC body RC


Terminals, with rules where they appear

$end (0) 0
error (256)
PLUS (258) 28
MINUS (259) 29
MULT (260) 30
DIV (261) 31
LE (262) 84
GE (263) 85
EQ (264) 20 22 23 24 25 26 86 115
NEQ (265) 87
LT (266) 82
GT (267) 83
AND (268) 81
OR (269) 79
EXCL (270) 88
COMMA (271) 18 42 54 73
COL (272) 89 93 94 95 96 97 98 99 100 102 103
SEMI (273) 7 17 27 47 49 51 105 113
LC (274) 62 66 70 89 90 94 96 98 100 103 107 117
RC (275) 62 66 70 89 90 94 96 98 100 103 107 117
LP (276) 37 39 47 49 51 60 62 64 66 68 70 90 95 96 99 100 106 107 116
    117
RP (277) 37 39 47 49 51 60 62 64 66 68 70 90 95 96 99 100 106 107 116
    117
VOID (278) 47 60 62
INT_DECL (279) 14 49 55 57 64 66 74
FLOAT_DECL (280) 16 51 56 58 68 70 75
ID (281) 19 20 21 22 23 24 25 26 32 39 43 47 49 51 57 58 60 62 64 66
    68 70 74 75 89 90 115
INT (282) 22 33 44 93 94 95 96
FLOAT (283) 23 34 45 97 98 99 100
IF (284)
ELSE (285)
SWITCH (286) 89 90
CASE (287) 93 94 95 96 97 98 99 100
FOR (288) 106 107
WHILE (289) 116 117
BREAK (290) 105
DEFAULT (291) 102 103


Nonterminals, with rules where they appear

$accept (37)
    on left: 0
stmts (38)
    on left: 1 2, on right: 0 2
stmt (39)
    on left: 3 4, on right: 1 2
stmt_wo_func (40)
    on left: 5 6 7 8 9 10, on right: 3 60 64 68 76 77 106 116
stmt_with_func (41)
    on left: 11 12, on right: 4
var_decl (42)
    on left: 14 16, on right: 5 110
$@1 (43)
    on left: 13, on right: 14
$@2 (44)
    on left: 15, on right: 16
id_list (45)
    on left: 17 18, on right: 14 16 18 111
assign (46)
    on left: 19 20, on right: 17 18
id_assign_list (47)
    on left: 21 22 23 24 25 26, on right: 20 26 115
arith (48)
    on left: 27, on right: 6
arith_expr (49)
    on left: 28 29 30 31, on right: 24 27 35 37 82 83 84 85 86 87
arith_arg (50)
    on left: 32 33 34 35 36 37, on right: 28 29 30 31
func_call (51)
    on left: 39, on right: 7 25 36
@3 (52)
    on left: 38, on right: 39
call_arg_list (53)
    on left: 40 41 42, on right: 39 42
call_arg (54)
    on left: 43 44 45, on right: 41 42
func_decl (55)
    on left: 47 49 51, on right: 11
@4 (56)
    on left: 46, on right: 47
@5 (57)
    on left: 48, on right: 49
@6 (58)
    on left: 50, on right: 51
decl_arg_list (59)
    on left: 52 53 54, on right: 47 49 51 54
decl_arg (60)
    on left: 55 56 57 58, on right: 53 54
func_def (61)
    on left: 60 62 64 66 68 70, on right: 12
@7 (62)
    on left: 59, on right: 60
@8 (63)
    on left: 61, on right: 62
@9 (64)
    on left: 63, on right: 64
@10 (65)
    on left: 65, on right: 66
@11 (66)
    on left: 67, on right: 68
@12 (67)
    on left: 69, on right: 70
def_arg_list (68)
    on left: 71 72 73, on right: 60 62 64 66 68 70 73
def_arg (69)
    on left: 74 75, on right: 72 73
body (70)
    on left: 76 77, on right: 62 66 70 77 93 94 95 96 97 98 99 100
    102 103 107 117
cond (71)
    on left: 78 79, on right: 79 88 113 116 117
and_expr (72)
    on left: 80 81, on right: 78 79 81
expr (73)
    on left: 82 83 84 85 86 87 88, on right: 80 81
switch_case (74)
    on left: 89 90, on right: 8
cases (75)
    on left: 91 92, on right: 89 90 92
case (76)
    on left: 93 94 95 96 97 98 99 100, on right: 91 92
default (77)
    on left: 101 102 103, on right: 91
break (78)
    on left: 104 105, on right: 93 94 95 96 97 98 99 100 102 103
for_loop (79)
    on left: 106 107, on right: 9
for_expr (80)
    on left: 108, on right: 106 107
for_first (81)
    on left: 109 110 111, on right: 108
for_second (82)
    on left: 112 113, on right: 108
for_third (83)
    on left: 114 115, on right: 108
while_loop (84)
    on left: 116 117, on right: 10


State 0

    0 $accept: . stmts $end

    LP          shift, and go to state 1
    VOID        shift, and go to state 2
    INT_DECL    shift, and go to state 3
    FLOAT_DECL  shift, and go to state 4
    ID          shift, and go to state 5
    INT         shift, and go to state 6
    FLOAT       shift, and go to state 7
    SWITCH      shift, and go to state 8
    FOR         shift, and go to state 9
    WHILE       shift, and go to state 10

    stmts           go to state 11
    stmt            go to state 12
    stmt_wo_func    go to state 13
    stmt_with_func  go to state 14
    var_decl        go to state 15
    arith           go to state 16
    arith_expr      go to state 17
    arith_arg       go to state 18
    func_call       go to state 19
    func_decl       go to state 20
    func_def        go to state 21
    switch_case     go to state 22
    for_loop        go to state 23
    while_loop      go to state 24


State 1

   37 arith_arg: LP . arith_expr RP

    LP     shift, and go to state 1
    ID     shift, and go to state 5
    INT    shift, and go to state 6
    FLOAT  shift, and go to state 7

    arith_expr  go to state 25
    arith_arg   go to state 18
    func_call   go to state 26


State 2

   47 func_decl: VOID . ID @4 LP decl_arg_list RP SEMI
   60 func_def: VOID . ID @7 LP def_arg_list RP stmt_wo_func
   62         | VOID . ID @8 LP def_arg_list RP LC body RC

    ID  shift, and go to state 27


State 3

   14 var_decl: INT_DECL . $@1 id_list
   49 func_decl: INT_DECL . ID @5 LP decl_arg_list RP SEMI
   64 func_def: INT_DECL . ID @9 LP def_arg_list RP stmt_wo_func
   66         | INT_DECL . ID @10 LP def_arg_list RP LC body RC

    ID  shift, and go to state 28

    ID  [reduce using rule 13 ($@1)]

    $@1  go to state 29


State 4

   16 var_decl: FLOAT_DECL . $@2 id_list
   51 func_decl: FLOAT_DECL . ID @6 LP decl_arg_list RP SEMI
   68 func_def: FLOAT_DECL . ID @11 LP def_arg_list RP stmt_wo_func
   70         | FLOAT_DECL . ID @12 LP def_arg_list RP LC body RC

    ID  shift, and go to state 30

    ID  [reduce using rule 15 ($@2)]

    $@2  go to state 31


State 5

   32 arith_arg: ID .
   39 func_call: ID . @3 LP call_arg_list RP

    LP        reduce using rule 38 (@3)
    $default  reduce using rule 32 (arith_arg)

    @3  go to state 32


State 6

   33 arith_arg: INT .

    $default  reduce using rule 33 (arith_arg)


State 7

   34 arith_arg: FLOAT .

    $default  reduce using rule 34 (arith_arg)


State 8

   89 switch_case: SWITCH . ID COL LC cases RC
   90            | SWITCH . LP ID RP LC cases RC

    LP  shift, and go to state 33
    ID  shift, and go to state 34


State 9

  106 for_loop: FOR . LP for_expr RP stmt_wo_func
  107         | FOR . LP for_expr RP LC body RC

    LP  shift, and go to state 35


State 10

  116 while_loop: WHILE . LP cond RP stmt_wo_func
  117           | WHILE . LP cond RP LC body RC

    LP  shift, and go to state 36


State 11

    0 $accept: stmts . $end

    $end  shift, and go to state 37


State 12

    1 stmts: stmt .
    2      | stmt . stmts

    LP          shift, and go to state 1
    VOID        shift, and go to state 2
    INT_DECL    shift, and go to state 3
    FLOAT_DECL  shift, and go to state 4
    ID          shift, and go to state 5
    INT         shift, and go to state 6
    FLOAT       shift, and go to state 7
    SWITCH      shift, and go to state 8
    FOR         shift, and go to state 9
    WHILE       shift, and go to state 10

    $default  reduce using rule 1 (stmts)

    stmts           go to state 38
    stmt            go to state 12
    stmt_wo_func    go to state 13
    stmt_with_func  go to state 14
    var_decl        go to state 15
    arith           go to state 16
    arith_expr      go to state 17
    arith_arg       go to state 18
    func_call       go to state 19
    func_decl       go to state 20
    func_def        go to state 21
    switch_case     go to state 22
    for_loop        go to state 23
    while_loop      go to state 24


State 13

    3 stmt: stmt_wo_func .

    $default  reduce using rule 3 (stmt)


State 14

    4 stmt: stmt_with_func .

    $default  reduce using rule 4 (stmt)


State 15

    5 stmt_wo_func: var_decl .

    $default  reduce using rule 5 (stmt_wo_func)


State 16

    6 stmt_wo_func: arith .

    $default  reduce using rule 6 (stmt_wo_func)


State 17

   27 arith: arith_expr . SEMI
   35 arith_arg: arith_expr .

    SEMI  shift, and go to state 39

    $default  reduce using rule 35 (arith_arg)


State 18

   28 arith_expr: arith_arg . PLUS arith_arg
   29           | arith_arg . MINUS arith_arg
   30           | arith_arg . MULT arith_arg
   31           | arith_arg . DIV arith_arg

    PLUS   shift, and go to state 40
    MINUS  shift, and go to state 41
    MULT   shift, and go to state 42
    DIV    shift, and go to state 43


State 19

    7 stmt_wo_func: func_call . SEMI
   36 arith_arg: func_call .

    SEMI  shift, and go to state 44

    $default  reduce using rule 36 (arith_arg)


State 20

   11 stmt_with_func: func_decl .

    $default  reduce using rule 11 (stmt_with_func)


State 21

   12 stmt_with_func: func_def .

    $default  reduce using rule 12 (stmt_with_func)


State 22

    8 stmt_wo_func: switch_case .

    $default  reduce using rule 8 (stmt_wo_func)


State 23

    9 stmt_wo_func: for_loop .

    $default  reduce using rule 9 (stmt_wo_func)


State 24

   10 stmt_wo_func: while_loop .

    $default  reduce using rule 10 (stmt_wo_func)


State 25

   35 arith_arg: arith_expr .
   37          | LP arith_expr . RP

    RP  shift, and go to state 45

    $default  reduce using rule 35 (arith_arg)


State 26

   36 arith_arg: func_call .

    $default  reduce using rule 36 (arith_arg)


State 27

   47 func_decl: VOID ID . @4 LP decl_arg_list RP SEMI
   60 func_def: VOID ID . @7 LP def_arg_list RP stmt_wo_func
   62         | VOID ID . @8 LP def_arg_list RP LC body RC

    LP        reduce using rule 46 (@4)
    LP        [reduce using rule 59 (@7)]
    LP        [reduce using rule 61 (@8)]
    $default  reduce using rule 46 (@4)

    @4  go to state 46
    @7  go to state 47
    @8  go to state 48


State 28

   49 func_decl: INT_DECL ID . @5 LP decl_arg_list RP SEMI
   64 func_def: INT_DECL ID . @9 LP def_arg_list RP stmt_wo_func
   66         | INT_DECL ID . @10 LP def_arg_list RP LC body RC

    LP        reduce using rule 48 (@5)
    LP        [reduce using rule 63 (@9)]
    LP        [reduce using rule 65 (@10)]
    $default  reduce using rule 48 (@5)

    @5   go to state 49
    @9   go to state 50
    @10  go to state 51


State 29

   14 var_decl: INT_DECL $@1 . id_list

    ID  shift, and go to state 52

    id_list  go to state 53
    assign   go to state 54


State 30

   51 func_decl: FLOAT_DECL ID . @6 LP decl_arg_list RP SEMI
   68 func_def: FLOAT_DECL ID . @11 LP def_arg_list RP stmt_wo_func
   70         | FLOAT_DECL ID . @12 LP def_arg_list RP LC body RC

    LP        reduce using rule 50 (@6)
    LP        [reduce using rule 67 (@11)]
    LP        [reduce using rule 69 (@12)]
    $default  reduce using rule 50 (@6)

    @6   go to state 55
    @11  go to state 56
    @12  go to state 57


State 31

   16 var_decl: FLOAT_DECL $@2 . id_list

    ID  shift, and go to state 52

    id_list  go to state 58
    assign   go to state 54


State 32

   39 func_call: ID @3 . LP call_arg_list RP

    LP  shift, and go to state 59


State 33

   90 switch_case: SWITCH LP . ID RP LC cases RC

    ID  shift, and go to state 60


State 34

   89 switch_case: SWITCH ID . COL LC cases RC

    COL  shift, and go to state 61


State 35

  106 for_loop: FOR LP . for_expr RP stmt_wo_func
  107         | FOR LP . for_expr RP LC body RC

    INT_DECL    shift, and go to state 62
    FLOAT_DECL  shift, and go to state 63
    ID          shift, and go to state 52

    ID        [reduce using rule 109 (for_first)]
    $default  reduce using rule 109 (for_first)

    var_decl   go to state 64
    id_list    go to state 65
    assign     go to state 54
    for_expr   go to state 66
    for_first  go to state 67


State 36

  116 while_loop: WHILE LP . cond RP stmt_wo_func
  117           | WHILE LP . cond RP LC body RC

    EXCL   shift, and go to state 68
    LP     shift, and go to state 1
    ID     shift, and go to state 5
    INT    shift, and go to state 6
    FLOAT  shift, and go to state 7

    arith_expr  go to state 69
    arith_arg   go to state 18
    func_call   go to state 26
    cond        go to state 70
    and_expr    go to state 71
    expr        go to state 72


State 37

    0 $accept: stmts $end .

    $default  accept


State 38

    2 stmts: stmt stmts .

    $default  reduce using rule 2 (stmts)


State 39

   27 arith: arith_expr SEMI .

    $default  reduce using rule 27 (arith)


State 40

   28 arith_expr: arith_arg PLUS . arith_arg

    LP     shift, and go to state 1
    ID     shift, and go to state 5
    INT    shift, and go to state 6
    FLOAT  shift, and go to state 7

    arith_expr  go to state 73
    arith_arg   go to state 74
    func_call   go to state 26


State 41

   29 arith_expr: arith_arg MINUS . arith_arg

    LP     shift, and go to state 1
    ID     shift, and go to state 5
    INT    shift, and go to state 6
    FLOAT  shift, and go to state 7

    arith_expr  go to state 73
    arith_arg   go to state 75
    func_call   go to state 26


State 42

   30 arith_expr: arith_arg MULT . arith_arg

    LP     shift, and go to state 1
    ID     shift, and go to state 5
    INT    shift, and go to state 6
    FLOAT  shift, and go to state 7

    arith_expr  go to state 73
    arith_arg   go to state 76
    func_call   go to state 26


State 43

   31 arith_expr: arith_arg DIV . arith_arg

    LP     shift, and go to state 1
    ID     shift, and go to state 5
    INT    shift, and go to state 6
    FLOAT  shift, and go to state 7

    arith_expr  go to state 73
    arith_arg   go to state 77
    func_call   go to state 26


State 44

    7 stmt_wo_func: func_call SEMI .

    $default  reduce using rule 7 (stmt_wo_func)


State 45

   37 arith_arg: LP arith_expr RP .

    $default  reduce using rule 37 (arith_arg)


State 46

   47 func_decl: VOID ID @4 . LP decl_arg_list RP SEMI

    LP  shift, and go to state 78


State 47

   60 func_def: VOID ID @7 . LP def_arg_list RP stmt_wo_func

    LP  shift, and go to state 79


State 48

   62 func_def: VOID ID @8 . LP def_arg_list RP LC body RC

    LP  shift, and go to state 80


State 49

   49 func_decl: INT_DECL ID @5 . LP decl_arg_list RP SEMI

    LP  shift, and go to state 81


State 50

   64 func_def: INT_DECL ID @9 . LP def_arg_list RP stmt_wo_func

    LP  shift, and go to state 82


State 51

   66 func_def: INT_DECL ID @10 . LP def_arg_list RP LC body RC

    LP  shift, and go to state 83


State 52

   19 assign: ID .
   20       | ID . EQ id_assign_list

    EQ  shift, and go to state 84

    $default  reduce using rule 19 (assign)


State 53

   14 var_decl: INT_DECL $@1 id_list .

    $default  reduce using rule 14 (var_decl)


State 54

   17 id_list: assign . SEMI
   18        | assign . COMMA id_list

    COMMA  shift, and go to state 85
    SEMI   shift, and go to state 86


State 55

   51 func_decl: FLOAT_DECL ID @6 . LP decl_arg_list RP SEMI

    LP  shift, and go to state 87


State 56

   68 func_def: FLOAT_DECL ID @11 . LP def_arg_list RP stmt_wo_func

    LP  shift, and go to state 88


State 57

   70 func_def: FLOAT_DECL ID @12 . LP def_arg_list RP LC body RC

    LP  shift, and go to state 89


State 58

   16 var_decl: FLOAT_DECL $@2 id_list .

    $default  reduce using rule 16 (var_decl)


State 59

   39 func_call: ID @3 LP . call_arg_list RP

    ID     shift, and go to state 90
    INT    shift, and go to state 91
    FLOAT  shift, and go to state 92

    $default  reduce using rule 40 (call_arg_list)

    call_arg_list  go to state 93
    call_arg       go to state 94


State 60

   90 switch_case: SWITCH LP ID . RP LC cases RC

    RP  shift, and go to state 95


State 61

   89 switch_case: SWITCH ID COL . LC cases RC

    LC  shift, and go to state 96


State 62

   14 var_decl: INT_DECL . $@1 id_list

    $default  reduce using rule 13 ($@1)

    $@1  go to state 29


State 63

   16 var_decl: FLOAT_DECL . $@2 id_list

    $default  reduce using rule 15 ($@2)

    $@2  go to state 31


State 64

  110 for_first: var_decl .

    $default  reduce using rule 110 (for_first)


State 65

  111 for_first: id_list .

    $default  reduce using rule 111 (for_first)


State 66

  106 for_loop: FOR LP for_expr . RP stmt_wo_func
  107         | FOR LP for_expr . RP LC body RC

    RP  shift, and go to state 97


State 67

  108 for_expr: for_first . for_second for_third

    EXCL   shift, and go to state 68
    LP     shift, and go to state 1
    ID     shift, and go to state 5
    INT    shift, and go to state 6
    FLOAT  shift, and go to state 7

    ID        [reduce using rule 112 (for_second)]
    $default  reduce using rule 112 (for_second)

    arith_expr  go to state 69
    arith_arg   go to state 18
    func_call   go to state 26
    cond        go to state 98
    and_expr    go to state 71
    expr        go to state 72
    for_second  go to state 99


State 68

   88 expr: EXCL . cond

    EXCL   shift, and go to state 68
    LP     shift, and go to state 1
    ID     shift, and go to state 5
    INT    shift, and go to state 6
    FLOAT  shift, and go to state 7

    arith_expr  go to state 69
    arith_arg   go to state 18
    func_call   go to state 26
    cond        go to state 100
    and_expr    go to state 71
    expr        go to state 72


State 69

   35 arith_arg: arith_expr .
   82 expr: arith_expr . LT arith_expr
   83     | arith_expr . GT arith_expr
   84     | arith_expr . LE arith_expr
   85     | arith_expr . GE arith_expr
   86     | arith_expr . EQ EQ arith_expr
   87     | arith_expr . NEQ arith_expr

    LE   shift, and go to state 101
    GE   shift, and go to state 102
    EQ   shift, and go to state 103
    NEQ  shift, and go to state 104
    LT   shift, and go to state 105
    GT   shift, and go to state 106

    $default  reduce using rule 35 (arith_arg)


State 70

  116 while_loop: WHILE LP cond . RP stmt_wo_func
  117           | WHILE LP cond . RP LC body RC

    RP  shift, and go to state 107


State 71

   78 cond: and_expr .
   79     | and_expr . OR cond

    OR  shift, and go to state 108

    OR        [reduce using rule 78 (cond)]
    $default  reduce using rule 78 (cond)


State 72

   80 and_expr: expr .
   81         | expr . AND and_expr

    AND  shift, and go to state 109

    AND       [reduce using rule 80 (and_expr)]
    $default  reduce using rule 80 (and_expr)


State 73

   35 arith_arg: arith_expr .

    $default  reduce using rule 35 (arith_arg)


State 74

   28 arith_expr: arith_arg . PLUS arith_arg
   28           | arith_arg PLUS arith_arg .
   29           | arith_arg . MINUS arith_arg
   30           | arith_arg . MULT arith_arg
   31           | arith_arg . DIV arith_arg

    PLUS   shift, and go to state 40
    MINUS  shift, and go to state 41
    MULT   shift, and go to state 42
    DIV    shift, and go to state 43

    PLUS      [reduce using rule 28 (arith_expr)]
    MINUS     [reduce using rule 28 (arith_expr)]
    MULT      [reduce using rule 28 (arith_expr)]
    DIV       [reduce using rule 28 (arith_expr)]
    $default  reduce using rule 28 (arith_expr)


State 75

   28 arith_expr: arith_arg . PLUS arith_arg
   29           | arith_arg . MINUS arith_arg
   29           | arith_arg MINUS arith_arg .
   30           | arith_arg . MULT arith_arg
   31           | arith_arg . DIV arith_arg

    PLUS   shift, and go to state 40
    MINUS  shift, and go to state 41
    MULT   shift, and go to state 42
    DIV    shift, and go to state 43

    PLUS      [reduce using rule 29 (arith_expr)]
    MINUS     [reduce using rule 29 (arith_expr)]
    MULT      [reduce using rule 29 (arith_expr)]
    DIV       [reduce using rule 29 (arith_expr)]
    $default  reduce using rule 29 (arith_expr)


State 76

   28 arith_expr: arith_arg . PLUS arith_arg
   29           | arith_arg . MINUS arith_arg
   30           | arith_arg . MULT arith_arg
   30           | arith_arg MULT arith_arg .
   31           | arith_arg . DIV arith_arg

    PLUS   shift, and go to state 40
    MINUS  shift, and go to state 41
    MULT   shift, and go to state 42
    DIV    shift, and go to state 43

    PLUS      [reduce using rule 30 (arith_expr)]
    MINUS     [reduce using rule 30 (arith_expr)]
    MULT      [reduce using rule 30 (arith_expr)]
    DIV       [reduce using rule 30 (arith_expr)]
    $default  reduce using rule 30 (arith_expr)


State 77

   28 arith_expr: arith_arg . PLUS arith_arg
   29           | arith_arg . MINUS arith_arg
   30           | arith_arg . MULT arith_arg
   31           | arith_arg . DIV arith_arg
   31           | arith_arg DIV arith_arg .

    PLUS   shift, and go to state 40
    MINUS  shift, and go to state 41
    MULT   shift, and go to state 42
    DIV    shift, and go to state 43

    PLUS      [reduce using rule 31 (arith_expr)]
    MINUS     [reduce using rule 31 (arith_expr)]
    MULT      [reduce using rule 31 (arith_expr)]
    DIV       [reduce using rule 31 (arith_expr)]
    $default  reduce using rule 31 (arith_expr)


State 78

   47 func_decl: VOID ID @4 LP . decl_arg_list RP SEMI

    INT_DECL    shift, and go to state 110
    FLOAT_DECL  shift, and go to state 111

    $default  reduce using rule 52 (decl_arg_list)

    decl_arg_list  go to state 112
    decl_arg       go to state 113


State 79

   60 func_def: VOID ID @7 LP . def_arg_list RP stmt_wo_func

    INT_DECL    shift, and go to state 114
    FLOAT_DECL  shift, and go to state 115

    $default  reduce using rule 71 (def_arg_list)

    def_arg_list  go to state 116
    def_arg       go to state 117


State 80

   62 func_def: VOID ID @8 LP . def_arg_list RP LC body RC

    INT_DECL    shift, and go to state 114
    FLOAT_DECL  shift, and go to state 115

    $default  reduce using rule 71 (def_arg_list)

    def_arg_list  go to state 118
    def_arg       go to state 117


State 81

   49 func_decl: INT_DECL ID @5 LP . decl_arg_list RP SEMI

    INT_DECL    shift, and go to state 110
    FLOAT_DECL  shift, and go to state 111

    $default  reduce using rule 52 (decl_arg_list)

    decl_arg_list  go to state 119
    decl_arg       go to state 113


State 82

   64 func_def: INT_DECL ID @9 LP . def_arg_list RP stmt_wo_func

    INT_DECL    shift, and go to state 114
    FLOAT_DECL  shift, and go to state 115

    $default  reduce using rule 71 (def_arg_list)

    def_arg_list  go to state 120
    def_arg       go to state 117


State 83

   66 func_def: INT_DECL ID @10 LP . def_arg_list RP LC body RC

    INT_DECL    shift, and go to state 114
    FLOAT_DECL  shift, and go to state 115

    $default  reduce using rule 71 (def_arg_list)

    def_arg_list  go to state 121
    def_arg       go to state 117


State 84

   20 assign: ID EQ . id_assign_list

    ID  shift, and go to state 122

    id_assign_list  go to state 123


State 85

   18 id_list: assign COMMA . id_list

    ID  shift, and go to state 52

    id_list  go to state 124
    assign   go to state 54


State 86

   17 id_list: assign SEMI .

    $default  reduce using rule 17 (id_list)


State 87

   51 func_decl: FLOAT_DECL ID @6 LP . decl_arg_list RP SEMI

    INT_DECL    shift, and go to state 110
    FLOAT_DECL  shift, and go to state 111

    $default  reduce using rule 52 (decl_arg_list)

    decl_arg_list  go to state 125
    decl_arg       go to state 113


State 88

   68 func_def: FLOAT_DECL ID @11 LP . def_arg_list RP stmt_wo_func

    INT_DECL    shift, and go to state 114
    FLOAT_DECL  shift, and go to state 115

    $default  reduce using rule 71 (def_arg_list)

    def_arg_list  go to state 126
    def_arg       go to state 117


State 89

   70 func_def: FLOAT_DECL ID @12 LP . def_arg_list RP LC body RC

    INT_DECL    shift, and go to state 114
    FLOAT_DECL  shift, and go to state 115

    $default  reduce using rule 71 (def_arg_list)

    def_arg_list  go to state 127
    def_arg       go to state 117


State 90

   43 call_arg: ID .

    $default  reduce using rule 43 (call_arg)


State 91

   44 call_arg: INT .

    $default  reduce using rule 44 (call_arg)


State 92

   45 call_arg: FLOAT .

    $default  reduce using rule 45 (call_arg)


State 93

   39 func_call: ID @3 LP call_arg_list . RP

    RP  shift, and go to state 128


State 94

   41 call_arg_list: call_arg .
   42              | call_arg . COMMA call_arg_list

    COMMA  shift, and go to state 129

    $default  reduce using rule 41 (call_arg_list)


State 95

   90 switch_case: SWITCH LP ID RP . LC cases RC

    LC  shift, and go to state 130


State 96

   89 switch_case: SWITCH ID COL LC . cases RC

    CASE  shift, and go to state 131

    cases  go to state 132
    case   go to state 133


State 97

  106 for_loop: FOR LP for_expr RP . stmt_wo_func
  107         | FOR LP for_expr RP . LC body RC

    LC          shift, and go to state 134
    LP          shift, and go to state 1
    INT_DECL    shift, and go to state 62
    FLOAT_DECL  shift, and go to state 63
    ID          shift, and go to state 5
    INT         shift, and go to state 6
    FLOAT       shift, and go to state 7
    SWITCH      shift, and go to state 8
    FOR         shift, and go to state 9
    WHILE       shift, and go to state 10

    stmt_wo_func  go to state 135
    var_decl      go to state 15
    arith         go to state 16
    arith_expr    go to state 17
    arith_arg     go to state 18
    func_call     go to state 19
    switch_case   go to state 22
    for_loop      go to state 23
    while_loop    go to state 24


State 98

  113 for_second: cond . SEMI

    SEMI  shift, and go to state 136


State 99

  108 for_expr: for_first for_second . for_third

    ID  shift, and go to state 137

    $default  reduce using rule 114 (for_third)

    for_third  go to state 138


State 100

   88 expr: EXCL cond .

    $default  reduce using rule 88 (expr)


State 101

   84 expr: arith_expr LE . arith_expr

    LP     shift, and go to state 1
    ID     shift, and go to state 5
    INT    shift, and go to state 6
    FLOAT  shift, and go to state 7

    arith_expr  go to state 139
    arith_arg   go to state 18
    func_call   go to state 26


State 102

   85 expr: arith_expr GE . arith_expr

    LP     shift, and go to state 1
    ID     shift, and go to state 5
    INT    shift, and go to state 6
    FLOAT  shift, and go to state 7

    arith_expr  go to state 140
    arith_arg   go to state 18
    func_call   go to state 26


State 103

   86 expr: arith_expr EQ . EQ arith_expr

    EQ  shift, and go to state 141


State 104

   87 expr: arith_expr NEQ . arith_expr

    LP     shift, and go to state 1
    ID     shift, and go to state 5
    INT    shift, and go to state 6
    FLOAT  shift, and go to state 7

    arith_expr  go to state 142
    arith_arg   go to state 18
    func_call   go to state 26


State 105

   82 expr: arith_expr LT . arith_expr

    LP     shift, and go to state 1
    ID     shift, and go to state 5
    INT    shift, and go to state 6
    FLOAT  shift, and go to state 7

    arith_expr  go to state 143
    arith_arg   go to state 18
    func_call   go to state 26


State 106

   83 expr: arith_expr GT . arith_expr

    LP     shift, and go to state 1
    ID     shift, and go to state 5
    INT    shift, and go to state 6
    FLOAT  shift, and go to state 7

    arith_expr  go to state 144
    arith_arg   go to state 18
    func_call   go to state 26


State 107

  116 while_loop: WHILE LP cond RP . stmt_wo_func
  117           | WHILE LP cond RP . LC body RC

    LC          shift, and go to state 145
    LP          shift, and go to state 1
    INT_DECL    shift, and go to state 62
    FLOAT_DECL  shift, and go to state 63
    ID          shift, and go to state 5
    INT         shift, and go to state 6
    FLOAT       shift, and go to state 7
    SWITCH      shift, and go to state 8
    FOR         shift, and go to state 9
    WHILE       shift, and go to state 10

    stmt_wo_func  go to state 146
    var_decl      go to state 15
    arith         go to state 16
    arith_expr    go to state 17
    arith_arg     go to state 18
    func_call     go to state 19
    switch_case   go to state 22
    for_loop      go to state 23
    while_loop    go to state 24


State 108

   79 cond: and_expr OR . cond

    EXCL   shift, and go to state 68
    LP     shift, and go to state 1
    ID     shift, and go to state 5
    INT    shift, and go to state 6
    FLOAT  shift, and go to state 7

    arith_expr  go to state 69
    arith_arg   go to state 18
    func_call   go to state 26
    cond        go to state 147
    and_expr    go to state 71
    expr        go to state 72


State 109

   81 and_expr: expr AND . and_expr

    EXCL   shift, and go to state 68
    LP     shift, and go to state 1
    ID     shift, and go to state 5
    INT    shift, and go to state 6
    FLOAT  shift, and go to state 7

    arith_expr  go to state 69
    arith_arg   go to state 18
    func_call   go to state 26
    and_expr    go to state 148
    expr        go to state 72


State 110

   55 decl_arg: INT_DECL .
   57         | INT_DECL . ID

    ID  shift, and go to state 149

    $default  reduce using rule 55 (decl_arg)


State 111

   56 decl_arg: FLOAT_DECL .
   58         | FLOAT_DECL . ID

    ID  shift, and go to state 150

    $default  reduce using rule 56 (decl_arg)


State 112

   47 func_decl: VOID ID @4 LP decl_arg_list . RP SEMI

    RP  shift, and go to state 151


State 113

   53 decl_arg_list: decl_arg .
   54              | decl_arg . COMMA decl_arg_list

    COMMA  shift, and go to state 152

    $default  reduce using rule 53 (decl_arg_list)


State 114

   74 def_arg: INT_DECL . ID

    ID  shift, and go to state 153


State 115

   75 def_arg: FLOAT_DECL . ID

    ID  shift, and go to state 154


State 116

   60 func_def: VOID ID @7 LP def_arg_list . RP stmt_wo_func

    RP  shift, and go to state 155


State 117

   72 def_arg_list: def_arg .
   73             | def_arg . COMMA def_arg_list

    COMMA  shift, and go to state 156

    $default  reduce using rule 72 (def_arg_list)


State 118

   62 func_def: VOID ID @8 LP def_arg_list . RP LC body RC

    RP  shift, and go to state 157


State 119

   49 func_decl: INT_DECL ID @5 LP decl_arg_list . RP SEMI

    RP  shift, and go to state 158


State 120

   64 func_def: INT_DECL ID @9 LP def_arg_list . RP stmt_wo_func

    RP  shift, and go to state 159


State 121

   66 func_def: INT_DECL ID @10 LP def_arg_list . RP LC body RC

    RP  shift, and go to state 160


State 122

   21 id_assign_list: ID .
   22               | ID . EQ INT
   23               | ID . EQ FLOAT
   24               | ID . EQ arith_expr
   25               | ID . EQ func_call
   26               | ID . EQ id_assign_list

    EQ  shift, and go to state 161

    $default  reduce using rule 21 (id_assign_list)


State 123

   20 assign: ID EQ id_assign_list .

    $default  reduce using rule 20 (assign)


State 124

   18 id_list: assign COMMA id_list .

    $default  reduce using rule 18 (id_list)


State 125

   51 func_decl: FLOAT_DECL ID @6 LP decl_arg_list . RP SEMI

    RP  shift, and go to state 162


State 126

   68 func_def: FLOAT_DECL ID @11 LP def_arg_list . RP stmt_wo_func

    RP  shift, and go to state 163


State 127

   70 func_def: FLOAT_DECL ID @12 LP def_arg_list . RP LC body RC

    RP  shift, and go to state 164


State 128

   39 func_call: ID @3 LP call_arg_list RP .

    $default  reduce using rule 39 (func_call)


State 129

   42 call_arg_list: call_arg COMMA . call_arg_list

    ID     shift, and go to state 90
    INT    shift, and go to state 91
    FLOAT  shift, and go to state 92

    $default  reduce using rule 40 (call_arg_list)

    call_arg_list  go to state 165
    call_arg       go to state 94


State 130

   90 switch_case: SWITCH LP ID RP LC . cases RC

    CASE  shift, and go to state 131

    cases  go to state 166
    case   go to state 133


State 131

   93 case: CASE . INT COL body break
   94     | CASE . INT COL LC body RC break
   95     | CASE . LP INT RP COL body break
   96     | CASE . LP INT RP COL LC body RC break
   97     | CASE . FLOAT COL body break
   98     | CASE . FLOAT COL LC body RC break
   99     | CASE . LP FLOAT RP COL body break
  100     | CASE . LP FLOAT RP COL LC body RC break

    LP     shift, and go to state 167
    INT    shift, and go to state 168
    FLOAT  shift, and go to state 169


State 132

   89 switch_case: SWITCH ID COL LC cases . RC

    RC  shift, and go to state 170


State 133

   91 cases: case . default
   92      | case . cases

    CASE     shift, and go to state 131
    DEFAULT  shift, and go to state 171

    $default  reduce using rule 101 (default)

    cases    go to state 172
    case     go to state 133
    default  go to state 173


State 134

  107 for_loop: FOR LP for_expr RP LC . body RC

    LP          shift, and go to state 1
    INT_DECL    shift, and go to state 62
    FLOAT_DECL  shift, and go to state 63
    ID          shift, and go to state 5
    INT         shift, and go to state 6
    FLOAT       shift, and go to state 7
    SWITCH      shift, and go to state 8
    FOR         shift, and go to state 9
    WHILE       shift, and go to state 10

    stmt_wo_func  go to state 174
    var_decl      go to state 15
    arith         go to state 16
    arith_expr    go to state 17
    arith_arg     go to state 18
    func_call     go to state 19
    body          go to state 175
    switch_case   go to state 22
    for_loop      go to state 23
    while_loop    go to state 24


State 135

  106 for_loop: FOR LP for_expr RP stmt_wo_func .

    $default  reduce using rule 106 (for_loop)


State 136

  113 for_second: cond SEMI .

    $default  reduce using rule 113 (for_second)


State 137

  115 for_third: ID . EQ id_assign_list

    EQ  shift, and go to state 176


State 138

  108 for_expr: for_first for_second for_third .

    $default  reduce using rule 108 (for_expr)


State 139

   35 arith_arg: arith_expr .
   84 expr: arith_expr LE arith_expr .

    AND       reduce using rule 84 (expr)
    OR        reduce using rule 84 (expr)
    SEMI      reduce using rule 84 (expr)
    RP        reduce using rule 84 (expr)
    $default  reduce using rule 35 (arith_arg)


State 140

   35 arith_arg: arith_expr .
   85 expr: arith_expr GE arith_expr .

    AND       reduce using rule 85 (expr)
    OR        reduce using rule 85 (expr)
    SEMI      reduce using rule 85 (expr)
    RP        reduce using rule 85 (expr)
    $default  reduce using rule 35 (arith_arg)


State 141

   86 expr: arith_expr EQ EQ . arith_expr

    LP     shift, and go to state 1
    ID     shift, and go to state 5
    INT    shift, and go to state 6
    FLOAT  shift, and go to state 7

    arith_expr  go to state 177
    arith_arg   go to state 18
    func_call   go to state 26


State 142

   35 arith_arg: arith_expr .
   87 expr: arith_expr NEQ arith_expr .

    AND       reduce using rule 87 (expr)
    OR        reduce using rule 87 (expr)
    SEMI      reduce using rule 87 (expr)
    RP        reduce using rule 87 (expr)
    $default  reduce using rule 35 (arith_arg)


State 143

   35 arith_arg: arith_expr .
   82 expr: arith_expr LT arith_expr .

    AND       reduce using rule 82 (expr)
    OR        reduce using rule 82 (expr)
    SEMI      reduce using rule 82 (expr)
    RP        reduce using rule 82 (expr)
    $default  reduce using rule 35 (arith_arg)


State 144

   35 arith_arg: arith_expr .
   83 expr: arith_expr GT arith_expr .

    AND       reduce using rule 83 (expr)
    OR        reduce using rule 83 (expr)
    SEMI      reduce using rule 83 (expr)
    RP        reduce using rule 83 (expr)
    $default  reduce using rule 35 (arith_arg)


State 145

  117 while_loop: WHILE LP cond RP LC . body RC

    LP          shift, and go to state 1
    INT_DECL    shift, and go to state 62
    FLOAT_DECL  shift, and go to state 63
    ID          shift, and go to state 5
    INT         shift, and go to state 6
    FLOAT       shift, and go to state 7
    SWITCH      shift, and go to state 8
    FOR         shift, and go to state 9
    WHILE       shift, and go to state 10

    stmt_wo_func  go to state 174
    var_decl      go to state 15
    arith         go to state 16
    arith_expr    go to state 17
    arith_arg     go to state 18
    func_call     go to state 19
    body          go to state 178
    switch_case   go to state 22
    for_loop      go to state 23
    while_loop    go to state 24


State 146

  116 while_loop: WHILE LP cond RP stmt_wo_func .

    $default  reduce using rule 116 (while_loop)


State 147

   79 cond: and_expr OR cond .

    $default  reduce using rule 79 (cond)


State 148

   81 and_expr: expr AND and_expr .

    $default  reduce using rule 81 (and_expr)


State 149

   57 decl_arg: INT_DECL ID .

    $default  reduce using rule 57 (decl_arg)


State 150

   58 decl_arg: FLOAT_DECL ID .

    $default  reduce using rule 58 (decl_arg)


State 151

   47 func_decl: VOID ID @4 LP decl_arg_list RP . SEMI

    SEMI  shift, and go to state 179


State 152

   54 decl_arg_list: decl_arg COMMA . decl_arg_list

    INT_DECL    shift, and go to state 110
    FLOAT_DECL  shift, and go to state 111

    $default  reduce using rule 52 (decl_arg_list)

    decl_arg_list  go to state 180
    decl_arg       go to state 113


State 153

   74 def_arg: INT_DECL ID .

    $default  reduce using rule 74 (def_arg)


State 154

   75 def_arg: FLOAT_DECL ID .

    $default  reduce using rule 75 (def_arg)


State 155

   60 func_def: VOID ID @7 LP def_arg_list RP . stmt_wo_func

    LP          shift, and go to state 1
    INT_DECL    shift, and go to state 62
    FLOAT_DECL  shift, and go to state 63
    ID          shift, and go to state 5
    INT         shift, and go to state 6
    FLOAT       shift, and go to state 7
    SWITCH      shift, and go to state 8
    FOR         shift, and go to state 9
    WHILE       shift, and go to state 10

    stmt_wo_func  go to state 181
    var_decl      go to state 15
    arith         go to state 16
    arith_expr    go to state 17
    arith_arg     go to state 18
    func_call     go to state 19
    switch_case   go to state 22
    for_loop      go to state 23
    while_loop    go to state 24


State 156

   73 def_arg_list: def_arg COMMA . def_arg_list

    INT_DECL    shift, and go to state 114
    FLOAT_DECL  shift, and go to state 115

    $default  reduce using rule 71 (def_arg_list)

    def_arg_list  go to state 182
    def_arg       go to state 117


State 157

   62 func_def: VOID ID @8 LP def_arg_list RP . LC body RC

    LC  shift, and go to state 183


State 158

   49 func_decl: INT_DECL ID @5 LP decl_arg_list RP . SEMI

    SEMI  shift, and go to state 184


State 159

   64 func_def: INT_DECL ID @9 LP def_arg_list RP . stmt_wo_func

    LP          shift, and go to state 1
    INT_DECL    shift, and go to state 62
    FLOAT_DECL  shift, and go to state 63
    ID          shift, and go to state 5
    INT         shift, and go to state 6
    FLOAT       shift, and go to state 7
    SWITCH      shift, and go to state 8
    FOR         shift, and go to state 9
    WHILE       shift, and go to state 10

    stmt_wo_func  go to state 185
    var_decl      go to state 15
    arith         go to state 16
    arith_expr    go to state 17
    arith_arg     go to state 18
    func_call     go to state 19
    switch_case   go to state 22
    for_loop      go to state 23
    while_loop    go to state 24


State 160

   66 func_def: INT_DECL ID @10 LP def_arg_list RP . LC body RC

    LC  shift, and go to state 186


State 161

   22 id_assign_list: ID EQ . INT
   23               | ID EQ . FLOAT
   24               | ID EQ . arith_expr
   25               | ID EQ . func_call
   26               | ID EQ . id_assign_list

    LP     shift, and go to state 1
    ID     shift, and go to state 187
    INT    shift, and go to state 188
    FLOAT  shift, and go to state 189

    id_assign_list  go to state 190
    arith_expr      go to state 191
    arith_arg       go to state 18
    func_call       go to state 192


State 162

   51 func_decl: FLOAT_DECL ID @6 LP decl_arg_list RP . SEMI

    SEMI  shift, and go to state 193


State 163

   68 func_def: FLOAT_DECL ID @11 LP def_arg_list RP . stmt_wo_func

    LP          shift, and go to state 1
    INT_DECL    shift, and go to state 62
    FLOAT_DECL  shift, and go to state 63
    ID          shift, and go to state 5
    INT         shift, and go to state 6
    FLOAT       shift, and go to state 7
    SWITCH      shift, and go to state 8
    FOR         shift, and go to state 9
    WHILE       shift, and go to state 10

    stmt_wo_func  go to state 194
    var_decl      go to state 15
    arith         go to state 16
    arith_expr    go to state 17
    arith_arg     go to state 18
    func_call     go to state 19
    switch_case   go to state 22
    for_loop      go to state 23
    while_loop    go to state 24


State 164

   70 func_def: FLOAT_DECL ID @12 LP def_arg_list RP . LC body RC

    LC  shift, and go to state 195


State 165

   42 call_arg_list: call_arg COMMA call_arg_list .

    $default  reduce using rule 42 (call_arg_list)


State 166

   90 switch_case: SWITCH LP ID RP LC cases . RC

    RC  shift, and go to state 196


State 167

   95 case: CASE LP . INT RP COL body break
   96     | CASE LP . INT RP COL LC body RC break
   99     | CASE LP . FLOAT RP COL body break
  100     | CASE LP . FLOAT RP COL LC body RC break

    INT    shift, and go to state 197
    FLOAT  shift, and go to state 198


State 168

   93 case: CASE INT . COL body break
   94     | CASE INT . COL LC body RC break

    COL  shift, and go to state 199


State 169

   97 case: CASE FLOAT . COL body break
   98     | CASE FLOAT . COL LC body RC break

    COL  shift, and go to state 200


State 170

   89 switch_case: SWITCH ID COL LC cases RC .

    $default  reduce using rule 89 (switch_case)


State 171

  102 default: DEFAULT . COL body break
  103        | DEFAULT . COL LC body RC break

    COL  shift, and go to state 201


State 172

   92 cases: case cases .

    $default  reduce using rule 92 (cases)


State 173

   91 cases: case default .

    $default  reduce using rule 91 (cases)


State 174

   76 body: stmt_wo_func .
   77     | stmt_wo_func . body

    LP          shift, and go to state 1
    INT_DECL    shift, and go to state 62
    FLOAT_DECL  shift, and go to state 63
    ID          shift, and go to state 5
    INT         shift, and go to state 6
    FLOAT       shift, and go to state 7
    SWITCH      shift, and go to state 8
    FOR         shift, and go to state 9
    WHILE       shift, and go to state 10

    $default  reduce using rule 76 (body)

    stmt_wo_func  go to state 174
    var_decl      go to state 15
    arith         go to state 16
    arith_expr    go to state 17
    arith_arg     go to state 18
    func_call     go to state 19
    body          go to state 202
    switch_case   go to state 22
    for_loop      go to state 23
    while_loop    go to state 24


State 175

  107 for_loop: FOR LP for_expr RP LC body . RC

    RC  shift, and go to state 203


State 176

  115 for_third: ID EQ . id_assign_list

    ID  shift, and go to state 122

    id_assign_list  go to state 204


State 177

   35 arith_arg: arith_expr .
   86 expr: arith_expr EQ EQ arith_expr .

    AND       reduce using rule 86 (expr)
    OR        reduce using rule 86 (expr)
    SEMI      reduce using rule 86 (expr)
    RP        reduce using rule 86 (expr)
    $default  reduce using rule 35 (arith_arg)


State 178

  117 while_loop: WHILE LP cond RP LC body . RC

    RC  shift, and go to state 205


State 179

   47 func_decl: VOID ID @4 LP decl_arg_list RP SEMI .

    $default  reduce using rule 47 (func_decl)


State 180

   54 decl_arg_list: decl_arg COMMA decl_arg_list .

    $default  reduce using rule 54 (decl_arg_list)


State 181

   60 func_def: VOID ID @7 LP def_arg_list RP stmt_wo_func .

    $default  reduce using rule 60 (func_def)


State 182

   73 def_arg_list: def_arg COMMA def_arg_list .

    $default  reduce using rule 73 (def_arg_list)


State 183

   62 func_def: VOID ID @8 LP def_arg_list RP LC . body RC

    LP          shift, and go to state 1
    INT_DECL    shift, and go to state 62
    FLOAT_DECL  shift, and go to state 63
    ID          shift, and go to state 5
    INT         shift, and go to state 6
    FLOAT       shift, and go to state 7
    SWITCH      shift, and go to state 8
    FOR         shift, and go to state 9
    WHILE       shift, and go to state 10

    stmt_wo_func  go to state 174
    var_decl      go to state 15
    arith         go to state 16
    arith_expr    go to state 17
    arith_arg     go to state 18
    func_call     go to state 19
    body          go to state 206
    switch_case   go to state 22
    for_loop      go to state 23
    while_loop    go to state 24


State 184

   49 func_decl: INT_DECL ID @5 LP decl_arg_list RP SEMI .

    $default  reduce using rule 49 (func_decl)


State 185

   64 func_def: INT_DECL ID @9 LP def_arg_list RP stmt_wo_func .

    $default  reduce using rule 64 (func_def)


State 186

   66 func_def: INT_DECL ID @10 LP def_arg_list RP LC . body RC

    LP          shift, and go to state 1
    INT_DECL    shift, and go to state 62
    FLOAT_DECL  shift, and go to state 63
    ID          shift, and go to state 5
    INT         shift, and go to state 6
    FLOAT       shift, and go to state 7
    SWITCH      shift, and go to state 8
    FOR         shift, and go to state 9
    WHILE       shift, and go to state 10

    stmt_wo_func  go to state 174
    var_decl      go to state 15
    arith         go to state 16
    arith_expr    go to state 17
    arith_arg     go to state 18
    func_call     go to state 19
    body          go to state 207
    switch_case   go to state 22
    for_loop      go to state 23
    while_loop    go to state 24


State 187

   21 id_assign_list: ID .
   22               | ID . EQ INT
   23               | ID . EQ FLOAT
   24               | ID . EQ arith_expr
   25               | ID . EQ func_call
   26               | ID . EQ id_assign_list
   32 arith_arg: ID .
   39 func_call: ID . @3 LP call_arg_list RP

    EQ  shift, and go to state 161

    COMMA     reduce using rule 21 (id_assign_list)
    SEMI      reduce using rule 21 (id_assign_list)
    LP        reduce using rule 38 (@3)
    RP        reduce using rule 21 (id_assign_list)
    $default  reduce using rule 32 (arith_arg)

    @3  go to state 32


State 188

   22 id_assign_list: ID EQ INT .
   33 arith_arg: INT .

    COMMA     reduce using rule 22 (id_assign_list)
    SEMI      reduce using rule 22 (id_assign_list)
    RP        reduce using rule 22 (id_assign_list)
    $default  reduce using rule 33 (arith_arg)


State 189

   23 id_assign_list: ID EQ FLOAT .
   34 arith_arg: FLOAT .

    COMMA     reduce using rule 23 (id_assign_list)
    SEMI      reduce using rule 23 (id_assign_list)
    RP        reduce using rule 23 (id_assign_list)
    $default  reduce using rule 34 (arith_arg)


State 190

   26 id_assign_list: ID EQ id_assign_list .

    $default  reduce using rule 26 (id_assign_list)


State 191

   24 id_assign_list: ID EQ arith_expr .
   35 arith_arg: arith_expr .

    COMMA     reduce using rule 24 (id_assign_list)
    SEMI      reduce using rule 24 (id_assign_list)
    RP        reduce using rule 24 (id_assign_list)
    $default  reduce using rule 35 (arith_arg)


State 192

   25 id_assign_list: ID EQ func_call .
   36 arith_arg: func_call .

    COMMA     reduce using rule 25 (id_assign_list)
    SEMI      reduce using rule 25 (id_assign_list)
    RP        reduce using rule 25 (id_assign_list)
    $default  reduce using rule 36 (arith_arg)


State 193

   51 func_decl: FLOAT_DECL ID @6 LP decl_arg_list RP SEMI .

    $default  reduce using rule 51 (func_decl)


State 194

   68 func_def: FLOAT_DECL ID @11 LP def_arg_list RP stmt_wo_func .

    $default  reduce using rule 68 (func_def)


State 195

   70 func_def: FLOAT_DECL ID @12 LP def_arg_list RP LC . body RC

    LP          shift, and go to state 1
    INT_DECL    shift, and go to state 62
    FLOAT_DECL  shift, and go to state 63
    ID          shift, and go to state 5
    INT         shift, and go to state 6
    FLOAT       shift, and go to state 7
    SWITCH      shift, and go to state 8
    FOR         shift, and go to state 9
    WHILE       shift, and go to state 10

    stmt_wo_func  go to state 174
    var_decl      go to state 15
    arith         go to state 16
    arith_expr    go to state 17
    arith_arg     go to state 18
    func_call     go to state 19
    body          go to state 208
    switch_case   go to state 22
    for_loop      go to state 23
    while_loop    go to state 24


State 196

   90 switch_case: SWITCH LP ID RP LC cases RC .

    $default  reduce using rule 90 (switch_case)


State 197

   95 case: CASE LP INT . RP COL body break
   96     | CASE LP INT . RP COL LC body RC break

    RP  shift, and go to state 209


State 198

   99 case: CASE LP FLOAT . RP COL body break
  100     | CASE LP FLOAT . RP COL LC body RC break

    RP  shift, and go to state 210


State 199

   93 case: CASE INT COL . body break
   94     | CASE INT COL . LC body RC break

    LC          shift, and go to state 211
    LP          shift, and go to state 1
    INT_DECL    shift, and go to state 62
    FLOAT_DECL  shift, and go to state 63
    ID          shift, and go to state 5
    INT         shift, and go to state 6
    FLOAT       shift, and go to state 7
    SWITCH      shift, and go to state 8
    FOR         shift, and go to state 9
    WHILE       shift, and go to state 10

    stmt_wo_func  go to state 174
    var_decl      go to state 15
    arith         go to state 16
    arith_expr    go to state 17
    arith_arg     go to state 18
    func_call     go to state 19
    body          go to state 212
    switch_case   go to state 22
    for_loop      go to state 23
    while_loop    go to state 24


State 200

   97 case: CASE FLOAT COL . body break
   98     | CASE FLOAT COL . LC body RC break

    LC          shift, and go to state 213
    LP          shift, and go to state 1
    INT_DECL    shift, and go to state 62
    FLOAT_DECL  shift, and go to state 63
    ID          shift, and go to state 5
    INT         shift, and go to state 6
    FLOAT       shift, and go to state 7
    SWITCH      shift, and go to state 8
    FOR         shift, and go to state 9
    WHILE       shift, and go to state 10

    stmt_wo_func  go to state 174
    var_decl      go to state 15
    arith         go to state 16
    arith_expr    go to state 17
    arith_arg     go to state 18
    func_call     go to state 19
    body          go to state 214
    switch_case   go to state 22
    for_loop      go to state 23
    while_loop    go to state 24


State 201

  102 default: DEFAULT COL . body break
  103        | DEFAULT COL . LC body RC break

    LC          shift, and go to state 215
    LP          shift, and go to state 1
    INT_DECL    shift, and go to state 62
    FLOAT_DECL  shift, and go to state 63
    ID          shift, and go to state 5
    INT         shift, and go to state 6
    FLOAT       shift, and go to state 7
    SWITCH      shift, and go to state 8
    FOR         shift, and go to state 9
    WHILE       shift, and go to state 10

    stmt_wo_func  go to state 174
    var_decl      go to state 15
    arith         go to state 16
    arith_expr    go to state 17
    arith_arg     go to state 18
    func_call     go to state 19
    body          go to state 216
    switch_case   go to state 22
    for_loop      go to state 23
    while_loop    go to state 24


State 202

   77 body: stmt_wo_func body .

    $default  reduce using rule 77 (body)


State 203

  107 for_loop: FOR LP for_expr RP LC body RC .

    $default  reduce using rule 107 (for_loop)


State 204

  115 for_third: ID EQ id_assign_list .

    $default  reduce using rule 115 (for_third)


State 205

  117 while_loop: WHILE LP cond RP LC body RC .

    $default  reduce using rule 117 (while_loop)


State 206

   62 func_def: VOID ID @8 LP def_arg_list RP LC body . RC

    RC  shift, and go to state 217


State 207

   66 func_def: INT_DECL ID @10 LP def_arg_list RP LC body . RC

    RC  shift, and go to state 218


State 208

   70 func_def: FLOAT_DECL ID @12 LP def_arg_list RP LC body . RC

    RC  shift, and go to state 219


State 209

   95 case: CASE LP INT RP . COL body break
   96     | CASE LP INT RP . COL LC body RC break

    COL  shift, and go to state 220


State 210

   99 case: CASE LP FLOAT RP . COL body break
  100     | CASE LP FLOAT RP . COL LC body RC break

    COL  shift, and go to state 221


State 211

   94 case: CASE INT COL LC . body RC break

    LP          shift, and go to state 1
    INT_DECL    shift, and go to state 62
    FLOAT_DECL  shift, and go to state 63
    ID          shift, and go to state 5
    INT         shift, and go to state 6
    FLOAT       shift, and go to state 7
    SWITCH      shift, and go to state 8
    FOR         shift, and go to state 9
    WHILE       shift, and go to state 10

    stmt_wo_func  go to state 174
    var_decl      go to state 15
    arith         go to state 16
    arith_expr    go to state 17
    arith_arg     go to state 18
    func_call     go to state 19
    body          go to state 222
    switch_case   go to state 22
    for_loop      go to state 23
    while_loop    go to state 24


State 212

   93 case: CASE INT COL body . break

    BREAK  shift, and go to state 223

    $default  reduce using rule 104 (break)

    break  go to state 224


State 213

   98 case: CASE FLOAT COL LC . body RC break

    LP          shift, and go to state 1
    INT_DECL    shift, and go to state 62
    FLOAT_DECL  shift, and go to state 63
    ID          shift, and go to state 5
    INT         shift, and go to state 6
    FLOAT       shift, and go to state 7
    SWITCH      shift, and go to state 8
    FOR         shift, and go to state 9
    WHILE       shift, and go to state 10

    stmt_wo_func  go to state 174
    var_decl      go to state 15
    arith         go to state 16
    arith_expr    go to state 17
    arith_arg     go to state 18
    func_call     go to state 19
    body          go to state 225
    switch_case   go to state 22
    for_loop      go to state 23
    while_loop    go to state 24


State 214

   97 case: CASE FLOAT COL body . break

    BREAK  shift, and go to state 223

    $default  reduce using rule 104 (break)

    break  go to state 226


State 215

  103 default: DEFAULT COL LC . body RC break

    LP          shift, and go to state 1
    INT_DECL    shift, and go to state 62
    FLOAT_DECL  shift, and go to state 63
    ID          shift, and go to state 5
    INT         shift, and go to state 6
    FLOAT       shift, and go to state 7
    SWITCH      shift, and go to state 8
    FOR         shift, and go to state 9
    WHILE       shift, and go to state 10

    stmt_wo_func  go to state 174
    var_decl      go to state 15
    arith         go to state 16
    arith_expr    go to state 17
    arith_arg     go to state 18
    func_call     go to state 19
    body          go to state 227
    switch_case   go to state 22
    for_loop      go to state 23
    while_loop    go to state 24


State 216

  102 default: DEFAULT COL body . break

    BREAK  shift, and go to state 223

    $default  reduce using rule 104 (break)

    break  go to state 228


State 217

   62 func_def: VOID ID @8 LP def_arg_list RP LC body RC .

    $default  reduce using rule 62 (func_def)


State 218

   66 func_def: INT_DECL ID @10 LP def_arg_list RP LC body RC .

    $default  reduce using rule 66 (func_def)


State 219

   70 func_def: FLOAT_DECL ID @12 LP def_arg_list RP LC body RC .

    $default  reduce using rule 70 (func_def)


State 220

   95 case: CASE LP INT RP COL . body break
   96     | CASE LP INT RP COL . LC body RC break

    LC          shift, and go to state 229
    LP          shift, and go to state 1
    INT_DECL    shift, and go to state 62
    FLOAT_DECL  shift, and go to state 63
    ID          shift, and go to state 5
    INT         shift, and go to state 6
    FLOAT       shift, and go to state 7
    SWITCH      shift, and go to state 8
    FOR         shift, and go to state 9
    WHILE       shift, and go to state 10

    stmt_wo_func  go to state 174
    var_decl      go to state 15
    arith         go to state 16
    arith_expr    go to state 17
    arith_arg     go to state 18
    func_call     go to state 19
    body          go to state 230
    switch_case   go to state 22
    for_loop      go to state 23
    while_loop    go to state 24


State 221

   99 case: CASE LP FLOAT RP COL . body break
  100     | CASE LP FLOAT RP COL . LC body RC break

    LC          shift, and go to state 231
    LP          shift, and go to state 1
    INT_DECL    shift, and go to state 62
    FLOAT_DECL  shift, and go to state 63
    ID          shift, and go to state 5
    INT         shift, and go to state 6
    FLOAT       shift, and go to state 7
    SWITCH      shift, and go to state 8
    FOR         shift, and go to state 9
    WHILE       shift, and go to state 10

    stmt_wo_func  go to state 174
    var_decl      go to state 15
    arith         go to state 16
    arith_expr    go to state 17
    arith_arg     go to state 18
    func_call     go to state 19
    body          go to state 232
    switch_case   go to state 22
    for_loop      go to state 23
    while_loop    go to state 24


State 222

   94 case: CASE INT COL LC body . RC break

    RC  shift, and go to state 233


State 223

  105 break: BREAK . SEMI

    SEMI  shift, and go to state 234


State 224

   93 case: CASE INT COL body break .

    $default  reduce using rule 93 (case)


State 225

   98 case: CASE FLOAT COL LC body . RC break

    RC  shift, and go to state 235


State 226

   97 case: CASE FLOAT COL body break .

    $default  reduce using rule 97 (case)


State 227

  103 default: DEFAULT COL LC body . RC break

    RC  shift, and go to state 236


State 228

  102 default: DEFAULT COL body break .

    $default  reduce using rule 102 (default)


State 229

   96 case: CASE LP INT RP COL LC . body RC break

    LP          shift, and go to state 1
    INT_DECL    shift, and go to state 62
    FLOAT_DECL  shift, and go to state 63
    ID          shift, and go to state 5
    INT         shift, and go to state 6
    FLOAT       shift, and go to state 7
    SWITCH      shift, and go to state 8
    FOR         shift, and go to state 9
    WHILE       shift, and go to state 10

    stmt_wo_func  go to state 174
    var_decl      go to state 15
    arith         go to state 16
    arith_expr    go to state 17
    arith_arg     go to state 18
    func_call     go to state 19
    body          go to state 237
    switch_case   go to state 22
    for_loop      go to state 23
    while_loop    go to state 24


State 230

   95 case: CASE LP INT RP COL body . break

    BREAK  shift, and go to state 223

    $default  reduce using rule 104 (break)

    break  go to state 238


State 231

  100 case: CASE LP FLOAT RP COL LC . body RC break

    LP          shift, and go to state 1
    INT_DECL    shift, and go to state 62
    FLOAT_DECL  shift, and go to state 63
    ID          shift, and go to state 5
    INT         shift, and go to state 6
    FLOAT       shift, and go to state 7
    SWITCH      shift, and go to state 8
    FOR         shift, and go to state 9
    WHILE       shift, and go to state 10

    stmt_wo_func  go to state 174
    var_decl      go to state 15
    arith         go to state 16
    arith_expr    go to state 17
    arith_arg     go to state 18
    func_call     go to state 19
    body          go to state 239
    switch_case   go to state 22
    for_loop      go to state 23
    while_loop    go to state 24


State 232

   99 case: CASE LP FLOAT RP COL body . break

    BREAK  shift, and go to state 223

    $default  reduce using rule 104 (break)

    break  go to state 240


State 233

   94 case: CASE INT COL LC body RC . break

    BREAK  shift, and go to state 223

    $default  reduce using rule 104 (break)

    break  go to state 241


State 234

  105 break: BREAK SEMI .

    $default  reduce using rule 105 (break)


State 235

   98 case: CASE FLOAT COL LC body RC . break

    BREAK  shift, and go to state 223

    $default  reduce using rule 104 (break)

    break  go to state 242


State 236

  103 default: DEFAULT COL LC body RC . break

    BREAK  shift, and go to state 223

    $default  reduce using rule 104 (break)

    break  go to state 243


State 237

   96 case: CASE LP INT RP COL LC body . RC break

    RC  shift, and go to state 244


State 238

   95 case: CASE LP INT RP COL body break .

    $default  reduce using rule 95 (case)


State 239

  100 case: CASE LP FLOAT RP COL LC body . RC break

    RC  shift, and go to state 245


State 240

   99 case: CASE LP FLOAT RP COL body break .

    $default  reduce using rule 99 (case)


State 241

   94 case: CASE INT COL LC body RC break .

    $default  reduce using rule 94 (case)


State 242

   98 case: CASE FLOAT COL LC body RC break .

    $default  reduce using rule 98 (case)


State 243

  103 default: DEFAULT COL LC body RC break .

    $default  reduce using rule 103 (default)


State 244

   96 case: CASE LP INT RP COL LC body RC . break

    BREAK  shift, and go to state 223

    $default  reduce using rule 104 (break)

    break  go to state 246


State 245

  100 case: CASE LP FLOAT RP COL LC body RC . break

    BREAK  shift, and go to state 223

    $default  reduce using rule 104 (break)

    break  go to state 247


State 246

   96 case: CASE LP INT RP COL LC body RC break .

    $default  reduce using rule 96 (case)


State 247

  100 case: CASE LP FLOAT RP COL LC body RC break .

    $default  reduce using rule 100 (case)
