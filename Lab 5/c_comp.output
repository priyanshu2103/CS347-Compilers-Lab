State 6 conflicts: 10 reduce/reduce
State 17 conflicts: 17 reduce/reduce
State 18 conflicts: 17 reduce/reduce
State 23 conflicts: 21 reduce/reduce
State 30 conflicts: 17 reduce/reduce
State 39 conflicts: 4 reduce/reduce
State 45 conflicts: 10 reduce/reduce
State 59 conflicts: 1 shift/reduce
State 98 conflicts: 1 shift/reduce
State 99 conflicts: 1 shift/reduce
State 102 conflicts: 2 reduce/reduce
State 107 conflicts: 1 shift/reduce
State 111 conflicts: 4 shift/reduce
State 113 conflicts: 4 shift/reduce
State 114 conflicts: 4 shift/reduce
State 115 conflicts: 4 shift/reduce
State 118 conflicts: 4 shift/reduce
State 120 conflicts: 4 shift/reduce
State 121 conflicts: 4 shift/reduce
State 122 conflicts: 4 shift/reduce
State 168 conflicts: 2 reduce/reduce
State 169 conflicts: 2 reduce/reduce
State 205 conflicts: 3 reduce/reduce
State 248 conflicts: 7 shift/reduce, 1 reduce/reduce
State 262 conflicts: 7 reduce/reduce
State 263 conflicts: 7 reduce/reduce


Grammar

    0 $accept: stmts $end

    1 stmts: stmt
    2      | stmt stmts

    3 stmt: stmt_wo_func
    4     | stmt_with_func

    5 stmt_wo_func: var_decl
    6             | arith
    7             | func_call
    8             | if_else
    9             | switch_case
   10             | for_loop
   11             | while_loop

   12 stmt_with_func: func_decl
   13               | func_def

   14 var_decl: INT_DECL int_id_list
   15         | FLOAT_DECL float_id_list

   16 int_id_list: int_assign SEMI
   17            | int_assign COMMA int_id_list

   18 int_assign: ID
   19           | ID EQ int_id_assign_list

   20 int_id_assign_list: ID
   21                   | ID EQ INT
   22                   | ID EQ int_arith
   23                   | ID EQ func_call
   24                   | ID EQ int_id_assign_list

   25 float_id_list: float_assign SEMI
   26              | float_assign COMMA float_id_list

   27 float_assign: ID
   28             | ID EQ float_id_assign_list

   29 float_id_assign_list: ID
   30                     | ID EQ FLOAT
   31                     | ID EQ float_arith
   32                     | ID EQ func_call
   33                     | ID EQ float_id_assign_list

   34 arith: int_arith SEMI
   35      | float_arith SEMI

   36 int_arith: int_arith_arg PLUS int_arith_arg
   37          | int_arith_arg MINUS int_arith_arg
   38          | int_arith_arg MULT int_arith_arg
   39          | int_arith_arg DIV int_arith_arg

   40 int_arith_arg: ID
   41              | INT
   42              | int_arith
   43              | func_call
   44              | LP int_arith RP

   45 float_arith: float_arith_arg PLUS float_arith_arg
   46            | float_arith_arg MINUS float_arith_arg
   47            | float_arith_arg MULT float_arith_arg
   48            | float_arith_arg DIV float_arith_arg

   49 float_arith_arg: ID
   50                | FLOAT
   51                | float_arith
   52                | func_call
   53                | LP float_arith RP

   54 func_call: ID LP call_arg_list RP

   55 call_arg_list: ID
   56              | ID COMMA call_arg_list

   57 func_decl: VOID ID LP decl_arg_list RP SEMI
   58          | INT ID LP decl_arg_list RP SEMI
   59          | FLOAT ID LP decl_arg_list RP SEMI

   60 decl_arg_list: decl_arg
   61              | decl_arg COMMA decl_arg_list

   62 decl_arg: INT_DECL
   63         | FLOAT_DECL
   64         | INT_DECL ID
   65         | FLOAT_DECL ID

   66 func_def: VOID ID LP def_arg_list RP stmt_wo_func
   67         | VOID ID LP def_arg_list RP LC body RC
   68         | INT_DECL ID LP def_arg_list RP stmt_wo_func
   69         | INT_DECL ID LP def_arg_list RP LC body RC
   70         | FLOAT_DECL ID LP def_arg_list RP stmt_wo_func
   71         | FLOAT_DECL ID LP def_arg_list RP LC body RC

   72 def_arg_list: def_arg
   73             | def_arg COMMA def_arg_list

   74 def_arg: INT_DECL ID
   75        | FLOAT_DECL ID

   76 body: stmt_wo_func
   77     | stmt_wo_func body

   78 if_else: mif
   79        | uif

   80 mif: IF LP cond RP mif ELSE mif
   81    | simple_stmt
   82    | LC simple_stmts RC

   83 uif: IF LP cond RP if_else
   84    | IF LP cond RP mif ELSE uif

   85 simple_stmts: simple_stmt
   86             | simple_stmt simple_stmts

   87 simple_stmt: var_decl
   88            | arith
   89            | func_call
   90            | switch_case

   91 cond: and_expr
   92     | and_expr OR cond

   93 and_expr: expr
   94         | expr AND and_expr

   95 expr: int_arith_arg LT int_arith_arg
   96     | int_arith_arg GT int_arith_arg
   97     | int_arith_arg LE int_arith_arg
   98     | int_arith_arg GE int_arith_arg
   99     | int_arith_arg EQ EQ int_arith_arg
  100     | int_arith_arg NEQ int_arith_arg
  101     | float_arith_arg LT float_arith_arg
  102     | float_arith_arg GT float_arith_arg
  103     | float_arith_arg LE float_arith_arg
  104     | float_arith_arg GE float_arith_arg
  105     | float_arith_arg EQ EQ float_arith_arg
  106     | float_arith_arg NEQ float_arith_arg
  107     | EXCL cond

  108 switch_case: SWITCH ID COL LC cases RC
  109            | SWITCH LP ID RP LC cases RC

  110 cases: case default
  111      | case cases

  112 case: CASE INT COL body break
  113     | CASE INT COL LC body RC break
  114     | CASE LP INT RP COL body break
  115     | CASE LP INT RP COL LC body RC break
  116     | CASE FLOAT COL body break
  117     | CASE FLOAT COL LC body RC break
  118     | CASE LP FLOAT RP COL body break
  119     | CASE LP FLOAT RP COL LC body RC break

  120 default: %empty
  121        | DEFAULT COL body break
  122        | DEFAULT COL LC body RC break

  123 break: %empty
  124      | BREAK SEMI

  125 for_loop: FOR LP for_expr RP stmt_wo_func
  126         | FOR LP for_expr RP LC body RC

  127 for_expr: for_first for_second for_third

  128 for_first: %empty
  129          | var_decl
  130          | int_id_list
  131          | float_id_list

  132 for_second: %empty
  133           | cond SEMI

  134 for_third: %empty
  135          | ID EQ int_id_assign_list
  136          | ID EQ float_id_assign_list

  137 while_loop: WHILE LP cond RP stmt_wo_func
  138           | WHILE LP cond RP LC body RC


Terminals, with rules where they appear

$end (0) 0
error (256)
PLUS (258) 36 45
MINUS (259) 37 46
MULT (260) 38 47
DIV (261) 39 48
LE (262) 97 103
GE (263) 98 104
EQ (264) 19 21 22 23 24 28 30 31 32 33 99 105 135 136
NEQ (265) 100 106
LT (266) 95 101
GT (267) 96 102
AND (268) 94
OR (269) 92
EXCL (270) 107
COMMA (271) 17 26 56 61 73
COL (272) 108 112 113 114 115 116 117 118 119 121 122
SEMI (273) 16 25 34 35 57 58 59 124 133
LC (274) 67 69 71 82 108 109 113 115 117 119 122 126 138
RC (275) 67 69 71 82 108 109 113 115 117 119 122 126 138
LP (276) 44 53 54 57 58 59 66 67 68 69 70 71 80 83 84 109 114 115 118
    119 125 126 137 138
RP (277) 44 53 54 57 58 59 66 67 68 69 70 71 80 83 84 109 114 115 118
    119 125 126 137 138
VOID (278) 57 66 67
INT_DECL (279) 14 62 64 68 69 74
FLOAT_DECL (280) 15 63 65 70 71 75
ID (281) 18 19 20 21 22 23 24 27 28 29 30 31 32 33 40 49 54 55 56 57
    58 59 64 65 66 67 68 69 70 71 74 75 108 109 135 136
INT (282) 21 41 58 112 113 114 115
FLOAT (283) 30 50 59 116 117 118 119
IF (284) 80 83 84
ELSE (285) 80 84
SWITCH (286) 108 109
CASE (287) 112 113 114 115 116 117 118 119
FOR (288) 125 126
WHILE (289) 137 138
BREAK (290) 124
DEFAULT (291) 121 122


Nonterminals, with rules where they appear

$accept (37)
    on left: 0
stmts (38)
    on left: 1 2, on right: 0 2
stmt (39)
    on left: 3 4, on right: 1 2
stmt_wo_func (40)
    on left: 5 6 7 8 9 10 11, on right: 3 66 68 70 76 77 125 137
stmt_with_func (41)
    on left: 12 13, on right: 4
var_decl (42)
    on left: 14 15, on right: 5 87 129
int_id_list (43)
    on left: 16 17, on right: 14 17 130
int_assign (44)
    on left: 18 19, on right: 16 17
int_id_assign_list (45)
    on left: 20 21 22 23 24, on right: 19 24 135
float_id_list (46)
    on left: 25 26, on right: 15 26 131
float_assign (47)
    on left: 27 28, on right: 25 26
float_id_assign_list (48)
    on left: 29 30 31 32 33, on right: 28 33 136
arith (49)
    on left: 34 35, on right: 6 88
int_arith (50)
    on left: 36 37 38 39, on right: 22 34 42 44
int_arith_arg (51)
    on left: 40 41 42 43 44, on right: 36 37 38 39 95 96 97 98 99 100
float_arith (52)
    on left: 45 46 47 48, on right: 31 35 51 53
float_arith_arg (53)
    on left: 49 50 51 52 53, on right: 45 46 47 48 101 102 103 104
    105 106
func_call (54)
    on left: 54, on right: 7 23 32 43 52 89
call_arg_list (55)
    on left: 55 56, on right: 54 56
func_decl (56)
    on left: 57 58 59, on right: 12
decl_arg_list (57)
    on left: 60 61, on right: 57 58 59 61
decl_arg (58)
    on left: 62 63 64 65, on right: 60 61
func_def (59)
    on left: 66 67 68 69 70 71, on right: 13
def_arg_list (60)
    on left: 72 73, on right: 66 67 68 69 70 71 73
def_arg (61)
    on left: 74 75, on right: 72 73
body (62)
    on left: 76 77, on right: 67 69 71 77 112 113 114 115 116 117 118
    119 121 122 126 138
if_else (63)
    on left: 78 79, on right: 8 83
mif (64)
    on left: 80 81 82, on right: 78 80 84
uif (65)
    on left: 83 84, on right: 79 84
simple_stmts (66)
    on left: 85 86, on right: 82 86
simple_stmt (67)
    on left: 87 88 89 90, on right: 81 85 86
cond (68)
    on left: 91 92, on right: 80 83 84 92 107 133 137 138
and_expr (69)
    on left: 93 94, on right: 91 92 94
expr (70)
    on left: 95 96 97 98 99 100 101 102 103 104 105 106 107, on right:
    93 94
switch_case (71)
    on left: 108 109, on right: 9 90
cases (72)
    on left: 110 111, on right: 108 109 111
case (73)
    on left: 112 113 114 115 116 117 118 119, on right: 110 111
default (74)
    on left: 120 121 122, on right: 110
break (75)
    on left: 123 124, on right: 112 113 114 115 116 117 118 119 121
    122
for_loop (76)
    on left: 125 126, on right: 10
for_expr (77)
    on left: 127, on right: 125 126
for_first (78)
    on left: 128 129 130 131, on right: 127
for_second (79)
    on left: 132 133, on right: 127
for_third (80)
    on left: 134 135 136, on right: 127
while_loop (81)
    on left: 137 138, on right: 11


State 0

    0 $accept: . stmts $end

    LC          shift, and go to state 1
    LP          shift, and go to state 2
    VOID        shift, and go to state 3
    INT_DECL    shift, and go to state 4
    FLOAT_DECL  shift, and go to state 5
    ID          shift, and go to state 6
    INT         shift, and go to state 7
    FLOAT       shift, and go to state 8
    IF          shift, and go to state 9
    SWITCH      shift, and go to state 10
    FOR         shift, and go to state 11
    WHILE       shift, and go to state 12

    stmts            go to state 13
    stmt             go to state 14
    stmt_wo_func     go to state 15
    stmt_with_func   go to state 16
    var_decl         go to state 17
    arith            go to state 18
    int_arith        go to state 19
    int_arith_arg    go to state 20
    float_arith      go to state 21
    float_arith_arg  go to state 22
    func_call        go to state 23
    func_decl        go to state 24
    func_def         go to state 25
    if_else          go to state 26
    mif              go to state 27
    uif              go to state 28
    simple_stmt      go to state 29
    switch_case      go to state 30
    for_loop         go to state 31
    while_loop       go to state 32


State 1

   82 mif: LC . simple_stmts RC

    LP          shift, and go to state 2
    INT_DECL    shift, and go to state 33
    FLOAT_DECL  shift, and go to state 34
    ID          shift, and go to state 6
    INT         shift, and go to state 35
    FLOAT       shift, and go to state 36
    SWITCH      shift, and go to state 10

    var_decl         go to state 37
    arith            go to state 38
    int_arith        go to state 19
    int_arith_arg    go to state 20
    float_arith      go to state 21
    float_arith_arg  go to state 22
    func_call        go to state 39
    simple_stmts     go to state 40
    simple_stmt      go to state 41
    switch_case      go to state 42


State 2

   44 int_arith_arg: LP . int_arith RP
   53 float_arith_arg: LP . float_arith RP

    LP     shift, and go to state 2
    ID     shift, and go to state 6
    INT    shift, and go to state 35
    FLOAT  shift, and go to state 36

    int_arith        go to state 43
    int_arith_arg    go to state 20
    float_arith      go to state 44
    float_arith_arg  go to state 22
    func_call        go to state 45


State 3

   57 func_decl: VOID . ID LP decl_arg_list RP SEMI
   66 func_def: VOID . ID LP def_arg_list RP stmt_wo_func
   67         | VOID . ID LP def_arg_list RP LC body RC

    ID  shift, and go to state 46


State 4

   14 var_decl: INT_DECL . int_id_list
   68 func_def: INT_DECL . ID LP def_arg_list RP stmt_wo_func
   69         | INT_DECL . ID LP def_arg_list RP LC body RC

    ID  shift, and go to state 47

    int_id_list  go to state 48
    int_assign   go to state 49


State 5

   15 var_decl: FLOAT_DECL . float_id_list
   70 func_def: FLOAT_DECL . ID LP def_arg_list RP stmt_wo_func
   71         | FLOAT_DECL . ID LP def_arg_list RP LC body RC

    ID  shift, and go to state 50

    float_id_list  go to state 51
    float_assign   go to state 52


State 6

   40 int_arith_arg: ID .
   49 float_arith_arg: ID .
   54 func_call: ID . LP call_arg_list RP

    LP  shift, and go to state 53

    PLUS      reduce using rule 40 (int_arith_arg)
    PLUS      [reduce using rule 49 (float_arith_arg)]
    MINUS     reduce using rule 40 (int_arith_arg)
    MINUS     [reduce using rule 49 (float_arith_arg)]
    MULT      reduce using rule 40 (int_arith_arg)
    MULT      [reduce using rule 49 (float_arith_arg)]
    DIV       reduce using rule 40 (int_arith_arg)
    DIV       [reduce using rule 49 (float_arith_arg)]
    LE        reduce using rule 40 (int_arith_arg)
    LE        [reduce using rule 49 (float_arith_arg)]
    GE        reduce using rule 40 (int_arith_arg)
    GE        [reduce using rule 49 (float_arith_arg)]
    EQ        reduce using rule 40 (int_arith_arg)
    EQ        [reduce using rule 49 (float_arith_arg)]
    NEQ       reduce using rule 40 (int_arith_arg)
    NEQ       [reduce using rule 49 (float_arith_arg)]
    LT        reduce using rule 40 (int_arith_arg)
    LT        [reduce using rule 49 (float_arith_arg)]
    GT        reduce using rule 40 (int_arith_arg)
    GT        [reduce using rule 49 (float_arith_arg)]
    $default  reduce using rule 40 (int_arith_arg)


State 7

   41 int_arith_arg: INT .
   58 func_decl: INT . ID LP decl_arg_list RP SEMI

    ID  shift, and go to state 54

    $default  reduce using rule 41 (int_arith_arg)


State 8

   50 float_arith_arg: FLOAT .
   59 func_decl: FLOAT . ID LP decl_arg_list RP SEMI

    ID  shift, and go to state 55

    $default  reduce using rule 50 (float_arith_arg)


State 9

   80 mif: IF . LP cond RP mif ELSE mif
   83 uif: IF . LP cond RP if_else
   84    | IF . LP cond RP mif ELSE uif

    LP  shift, and go to state 56


State 10

  108 switch_case: SWITCH . ID COL LC cases RC
  109            | SWITCH . LP ID RP LC cases RC

    LP  shift, and go to state 57
    ID  shift, and go to state 58


State 11

  125 for_loop: FOR . LP for_expr RP stmt_wo_func
  126         | FOR . LP for_expr RP LC body RC

    LP  shift, and go to state 59


State 12

  137 while_loop: WHILE . LP cond RP stmt_wo_func
  138           | WHILE . LP cond RP LC body RC

    LP  shift, and go to state 60


State 13

    0 $accept: stmts . $end

    $end  shift, and go to state 61


State 14

    1 stmts: stmt .
    2      | stmt . stmts

    LC          shift, and go to state 1
    LP          shift, and go to state 2
    VOID        shift, and go to state 3
    INT_DECL    shift, and go to state 4
    FLOAT_DECL  shift, and go to state 5
    ID          shift, and go to state 6
    INT         shift, and go to state 7
    FLOAT       shift, and go to state 8
    IF          shift, and go to state 9
    SWITCH      shift, and go to state 10
    FOR         shift, and go to state 11
    WHILE       shift, and go to state 12

    $default  reduce using rule 1 (stmts)

    stmts            go to state 62
    stmt             go to state 14
    stmt_wo_func     go to state 15
    stmt_with_func   go to state 16
    var_decl         go to state 17
    arith            go to state 18
    int_arith        go to state 19
    int_arith_arg    go to state 20
    float_arith      go to state 21
    float_arith_arg  go to state 22
    func_call        go to state 23
    func_decl        go to state 24
    func_def         go to state 25
    if_else          go to state 26
    mif              go to state 27
    uif              go to state 28
    simple_stmt      go to state 29
    switch_case      go to state 30
    for_loop         go to state 31
    while_loop       go to state 32


State 15

    3 stmt: stmt_wo_func .

    $default  reduce using rule 3 (stmt)


State 16

    4 stmt: stmt_with_func .

    $default  reduce using rule 4 (stmt)


State 17

    5 stmt_wo_func: var_decl .
   87 simple_stmt: var_decl .

    $end        reduce using rule 5 (stmt_wo_func)
    $end        [reduce using rule 87 (simple_stmt)]
    LC          reduce using rule 5 (stmt_wo_func)
    LC          [reduce using rule 87 (simple_stmt)]
    RC          reduce using rule 5 (stmt_wo_func)
    RC          [reduce using rule 87 (simple_stmt)]
    LP          reduce using rule 5 (stmt_wo_func)
    LP          [reduce using rule 87 (simple_stmt)]
    VOID        reduce using rule 5 (stmt_wo_func)
    VOID        [reduce using rule 87 (simple_stmt)]
    INT_DECL    reduce using rule 5 (stmt_wo_func)
    INT_DECL    [reduce using rule 87 (simple_stmt)]
    FLOAT_DECL  reduce using rule 5 (stmt_wo_func)
    FLOAT_DECL  [reduce using rule 87 (simple_stmt)]
    ID          reduce using rule 5 (stmt_wo_func)
    ID          [reduce using rule 87 (simple_stmt)]
    INT         reduce using rule 5 (stmt_wo_func)
    INT         [reduce using rule 87 (simple_stmt)]
    FLOAT       reduce using rule 5 (stmt_wo_func)
    FLOAT       [reduce using rule 87 (simple_stmt)]
    IF          reduce using rule 5 (stmt_wo_func)
    IF          [reduce using rule 87 (simple_stmt)]
    SWITCH      reduce using rule 5 (stmt_wo_func)
    SWITCH      [reduce using rule 87 (simple_stmt)]
    CASE        reduce using rule 5 (stmt_wo_func)
    CASE        [reduce using rule 87 (simple_stmt)]
    FOR         reduce using rule 5 (stmt_wo_func)
    FOR         [reduce using rule 87 (simple_stmt)]
    WHILE       reduce using rule 5 (stmt_wo_func)
    WHILE       [reduce using rule 87 (simple_stmt)]
    BREAK       reduce using rule 5 (stmt_wo_func)
    BREAK       [reduce using rule 87 (simple_stmt)]
    DEFAULT     reduce using rule 5 (stmt_wo_func)
    DEFAULT     [reduce using rule 87 (simple_stmt)]
    $default    reduce using rule 5 (stmt_wo_func)


State 18

    6 stmt_wo_func: arith .
   88 simple_stmt: arith .

    $end        reduce using rule 6 (stmt_wo_func)
    $end        [reduce using rule 88 (simple_stmt)]
    LC          reduce using rule 6 (stmt_wo_func)
    LC          [reduce using rule 88 (simple_stmt)]
    RC          reduce using rule 6 (stmt_wo_func)
    RC          [reduce using rule 88 (simple_stmt)]
    LP          reduce using rule 6 (stmt_wo_func)
    LP          [reduce using rule 88 (simple_stmt)]
    VOID        reduce using rule 6 (stmt_wo_func)
    VOID        [reduce using rule 88 (simple_stmt)]
    INT_DECL    reduce using rule 6 (stmt_wo_func)
    INT_DECL    [reduce using rule 88 (simple_stmt)]
    FLOAT_DECL  reduce using rule 6 (stmt_wo_func)
    FLOAT_DECL  [reduce using rule 88 (simple_stmt)]
    ID          reduce using rule 6 (stmt_wo_func)
    ID          [reduce using rule 88 (simple_stmt)]
    INT         reduce using rule 6 (stmt_wo_func)
    INT         [reduce using rule 88 (simple_stmt)]
    FLOAT       reduce using rule 6 (stmt_wo_func)
    FLOAT       [reduce using rule 88 (simple_stmt)]
    IF          reduce using rule 6 (stmt_wo_func)
    IF          [reduce using rule 88 (simple_stmt)]
    SWITCH      reduce using rule 6 (stmt_wo_func)
    SWITCH      [reduce using rule 88 (simple_stmt)]
    CASE        reduce using rule 6 (stmt_wo_func)
    CASE        [reduce using rule 88 (simple_stmt)]
    FOR         reduce using rule 6 (stmt_wo_func)
    FOR         [reduce using rule 88 (simple_stmt)]
    WHILE       reduce using rule 6 (stmt_wo_func)
    WHILE       [reduce using rule 88 (simple_stmt)]
    BREAK       reduce using rule 6 (stmt_wo_func)
    BREAK       [reduce using rule 88 (simple_stmt)]
    DEFAULT     reduce using rule 6 (stmt_wo_func)
    DEFAULT     [reduce using rule 88 (simple_stmt)]
    $default    reduce using rule 6 (stmt_wo_func)


State 19

   34 arith: int_arith . SEMI
   42 int_arith_arg: int_arith .

    SEMI  shift, and go to state 63

    $default  reduce using rule 42 (int_arith_arg)


State 20

   36 int_arith: int_arith_arg . PLUS int_arith_arg
   37          | int_arith_arg . MINUS int_arith_arg
   38          | int_arith_arg . MULT int_arith_arg
   39          | int_arith_arg . DIV int_arith_arg

    PLUS   shift, and go to state 64
    MINUS  shift, and go to state 65
    MULT   shift, and go to state 66
    DIV    shift, and go to state 67


State 21

   35 arith: float_arith . SEMI
   51 float_arith_arg: float_arith .

    SEMI  shift, and go to state 68

    $default  reduce using rule 51 (float_arith_arg)


State 22

   45 float_arith: float_arith_arg . PLUS float_arith_arg
   46            | float_arith_arg . MINUS float_arith_arg
   47            | float_arith_arg . MULT float_arith_arg
   48            | float_arith_arg . DIV float_arith_arg

    PLUS   shift, and go to state 69
    MINUS  shift, and go to state 70
    MULT   shift, and go to state 71
    DIV    shift, and go to state 72


State 23

    7 stmt_wo_func: func_call .
   43 int_arith_arg: func_call .
   52 float_arith_arg: func_call .
   89 simple_stmt: func_call .

    $end        reduce using rule 7 (stmt_wo_func)
    $end        [reduce using rule 89 (simple_stmt)]
    PLUS        reduce using rule 43 (int_arith_arg)
    PLUS        [reduce using rule 52 (float_arith_arg)]
    MINUS       reduce using rule 43 (int_arith_arg)
    MINUS       [reduce using rule 52 (float_arith_arg)]
    MULT        reduce using rule 43 (int_arith_arg)
    MULT        [reduce using rule 52 (float_arith_arg)]
    DIV         reduce using rule 43 (int_arith_arg)
    DIV         [reduce using rule 52 (float_arith_arg)]
    LC          reduce using rule 7 (stmt_wo_func)
    LC          [reduce using rule 89 (simple_stmt)]
    RC          reduce using rule 7 (stmt_wo_func)
    RC          [reduce using rule 89 (simple_stmt)]
    LP          reduce using rule 7 (stmt_wo_func)
    LP          [reduce using rule 89 (simple_stmt)]
    VOID        reduce using rule 7 (stmt_wo_func)
    VOID        [reduce using rule 89 (simple_stmt)]
    INT_DECL    reduce using rule 7 (stmt_wo_func)
    INT_DECL    [reduce using rule 89 (simple_stmt)]
    FLOAT_DECL  reduce using rule 7 (stmt_wo_func)
    FLOAT_DECL  [reduce using rule 89 (simple_stmt)]
    ID          reduce using rule 7 (stmt_wo_func)
    ID          [reduce using rule 89 (simple_stmt)]
    INT         reduce using rule 7 (stmt_wo_func)
    INT         [reduce using rule 89 (simple_stmt)]
    FLOAT       reduce using rule 7 (stmt_wo_func)
    FLOAT       [reduce using rule 89 (simple_stmt)]
    IF          reduce using rule 7 (stmt_wo_func)
    IF          [reduce using rule 89 (simple_stmt)]
    SWITCH      reduce using rule 7 (stmt_wo_func)
    SWITCH      [reduce using rule 89 (simple_stmt)]
    CASE        reduce using rule 7 (stmt_wo_func)
    CASE        [reduce using rule 89 (simple_stmt)]
    FOR         reduce using rule 7 (stmt_wo_func)
    FOR         [reduce using rule 89 (simple_stmt)]
    WHILE       reduce using rule 7 (stmt_wo_func)
    WHILE       [reduce using rule 89 (simple_stmt)]
    BREAK       reduce using rule 7 (stmt_wo_func)
    BREAK       [reduce using rule 89 (simple_stmt)]
    DEFAULT     reduce using rule 7 (stmt_wo_func)
    DEFAULT     [reduce using rule 89 (simple_stmt)]
    $default    reduce using rule 7 (stmt_wo_func)


State 24

   12 stmt_with_func: func_decl .

    $default  reduce using rule 12 (stmt_with_func)


State 25

   13 stmt_with_func: func_def .

    $default  reduce using rule 13 (stmt_with_func)


State 26

    8 stmt_wo_func: if_else .

    $default  reduce using rule 8 (stmt_wo_func)


State 27

   78 if_else: mif .

    $default  reduce using rule 78 (if_else)


State 28

   79 if_else: uif .

    $default  reduce using rule 79 (if_else)


State 29

   81 mif: simple_stmt .

    $default  reduce using rule 81 (mif)


State 30

    9 stmt_wo_func: switch_case .
   90 simple_stmt: switch_case .

    $end        reduce using rule 9 (stmt_wo_func)
    $end        [reduce using rule 90 (simple_stmt)]
    LC          reduce using rule 9 (stmt_wo_func)
    LC          [reduce using rule 90 (simple_stmt)]
    RC          reduce using rule 9 (stmt_wo_func)
    RC          [reduce using rule 90 (simple_stmt)]
    LP          reduce using rule 9 (stmt_wo_func)
    LP          [reduce using rule 90 (simple_stmt)]
    VOID        reduce using rule 9 (stmt_wo_func)
    VOID        [reduce using rule 90 (simple_stmt)]
    INT_DECL    reduce using rule 9 (stmt_wo_func)
    INT_DECL    [reduce using rule 90 (simple_stmt)]
    FLOAT_DECL  reduce using rule 9 (stmt_wo_func)
    FLOAT_DECL  [reduce using rule 90 (simple_stmt)]
    ID          reduce using rule 9 (stmt_wo_func)
    ID          [reduce using rule 90 (simple_stmt)]
    INT         reduce using rule 9 (stmt_wo_func)
    INT         [reduce using rule 90 (simple_stmt)]
    FLOAT       reduce using rule 9 (stmt_wo_func)
    FLOAT       [reduce using rule 90 (simple_stmt)]
    IF          reduce using rule 9 (stmt_wo_func)
    IF          [reduce using rule 90 (simple_stmt)]
    SWITCH      reduce using rule 9 (stmt_wo_func)
    SWITCH      [reduce using rule 90 (simple_stmt)]
    CASE        reduce using rule 9 (stmt_wo_func)
    CASE        [reduce using rule 90 (simple_stmt)]
    FOR         reduce using rule 9 (stmt_wo_func)
    FOR         [reduce using rule 90 (simple_stmt)]
    WHILE       reduce using rule 9 (stmt_wo_func)
    WHILE       [reduce using rule 90 (simple_stmt)]
    BREAK       reduce using rule 9 (stmt_wo_func)
    BREAK       [reduce using rule 90 (simple_stmt)]
    DEFAULT     reduce using rule 9 (stmt_wo_func)
    DEFAULT     [reduce using rule 90 (simple_stmt)]
    $default    reduce using rule 9 (stmt_wo_func)


State 31

   10 stmt_wo_func: for_loop .

    $default  reduce using rule 10 (stmt_wo_func)


State 32

   11 stmt_wo_func: while_loop .

    $default  reduce using rule 11 (stmt_wo_func)


State 33

   14 var_decl: INT_DECL . int_id_list

    ID  shift, and go to state 73

    int_id_list  go to state 48
    int_assign   go to state 49


State 34

   15 var_decl: FLOAT_DECL . float_id_list

    ID  shift, and go to state 74

    float_id_list  go to state 51
    float_assign   go to state 52


State 35

   41 int_arith_arg: INT .

    $default  reduce using rule 41 (int_arith_arg)


State 36

   50 float_arith_arg: FLOAT .

    $default  reduce using rule 50 (float_arith_arg)


State 37

   87 simple_stmt: var_decl .

    $default  reduce using rule 87 (simple_stmt)


State 38

   88 simple_stmt: arith .

    $default  reduce using rule 88 (simple_stmt)


State 39

   43 int_arith_arg: func_call .
   52 float_arith_arg: func_call .
   89 simple_stmt: func_call .

    PLUS      reduce using rule 43 (int_arith_arg)
    PLUS      [reduce using rule 52 (float_arith_arg)]
    MINUS     reduce using rule 43 (int_arith_arg)
    MINUS     [reduce using rule 52 (float_arith_arg)]
    MULT      reduce using rule 43 (int_arith_arg)
    MULT      [reduce using rule 52 (float_arith_arg)]
    DIV       reduce using rule 43 (int_arith_arg)
    DIV       [reduce using rule 52 (float_arith_arg)]
    $default  reduce using rule 89 (simple_stmt)


State 40

   82 mif: LC simple_stmts . RC

    RC  shift, and go to state 75


State 41

   85 simple_stmts: simple_stmt .
   86             | simple_stmt . simple_stmts

    LP          shift, and go to state 2
    INT_DECL    shift, and go to state 33
    FLOAT_DECL  shift, and go to state 34
    ID          shift, and go to state 6
    INT         shift, and go to state 35
    FLOAT       shift, and go to state 36
    SWITCH      shift, and go to state 10

    $default  reduce using rule 85 (simple_stmts)

    var_decl         go to state 37
    arith            go to state 38
    int_arith        go to state 19
    int_arith_arg    go to state 20
    float_arith      go to state 21
    float_arith_arg  go to state 22
    func_call        go to state 39
    simple_stmts     go to state 76
    simple_stmt      go to state 41
    switch_case      go to state 42


State 42

   90 simple_stmt: switch_case .

    $default  reduce using rule 90 (simple_stmt)


State 43

   42 int_arith_arg: int_arith .
   44              | LP int_arith . RP

    RP  shift, and go to state 77

    $default  reduce using rule 42 (int_arith_arg)


State 44

   51 float_arith_arg: float_arith .
   53                | LP float_arith . RP

    RP  shift, and go to state 78

    $default  reduce using rule 51 (float_arith_arg)


State 45

   43 int_arith_arg: func_call .
   52 float_arith_arg: func_call .

    PLUS      reduce using rule 43 (int_arith_arg)
    PLUS      [reduce using rule 52 (float_arith_arg)]
    MINUS     reduce using rule 43 (int_arith_arg)
    MINUS     [reduce using rule 52 (float_arith_arg)]
    MULT      reduce using rule 43 (int_arith_arg)
    MULT      [reduce using rule 52 (float_arith_arg)]
    DIV       reduce using rule 43 (int_arith_arg)
    DIV       [reduce using rule 52 (float_arith_arg)]
    LE        reduce using rule 43 (int_arith_arg)
    LE        [reduce using rule 52 (float_arith_arg)]
    GE        reduce using rule 43 (int_arith_arg)
    GE        [reduce using rule 52 (float_arith_arg)]
    EQ        reduce using rule 43 (int_arith_arg)
    EQ        [reduce using rule 52 (float_arith_arg)]
    NEQ       reduce using rule 43 (int_arith_arg)
    NEQ       [reduce using rule 52 (float_arith_arg)]
    LT        reduce using rule 43 (int_arith_arg)
    LT        [reduce using rule 52 (float_arith_arg)]
    GT        reduce using rule 43 (int_arith_arg)
    GT        [reduce using rule 52 (float_arith_arg)]
    $default  reduce using rule 43 (int_arith_arg)


State 46

   57 func_decl: VOID ID . LP decl_arg_list RP SEMI
   66 func_def: VOID ID . LP def_arg_list RP stmt_wo_func
   67         | VOID ID . LP def_arg_list RP LC body RC

    LP  shift, and go to state 79


State 47

   18 int_assign: ID .
   19           | ID . EQ int_id_assign_list
   68 func_def: INT_DECL ID . LP def_arg_list RP stmt_wo_func
   69         | INT_DECL ID . LP def_arg_list RP LC body RC

    EQ  shift, and go to state 80
    LP  shift, and go to state 81

    $default  reduce using rule 18 (int_assign)


State 48

   14 var_decl: INT_DECL int_id_list .

    $default  reduce using rule 14 (var_decl)


State 49

   16 int_id_list: int_assign . SEMI
   17            | int_assign . COMMA int_id_list

    COMMA  shift, and go to state 82
    SEMI   shift, and go to state 83


State 50

   27 float_assign: ID .
   28             | ID . EQ float_id_assign_list
   70 func_def: FLOAT_DECL ID . LP def_arg_list RP stmt_wo_func
   71         | FLOAT_DECL ID . LP def_arg_list RP LC body RC

    EQ  shift, and go to state 84
    LP  shift, and go to state 85

    $default  reduce using rule 27 (float_assign)


State 51

   15 var_decl: FLOAT_DECL float_id_list .

    $default  reduce using rule 15 (var_decl)


State 52

   25 float_id_list: float_assign . SEMI
   26              | float_assign . COMMA float_id_list

    COMMA  shift, and go to state 86
    SEMI   shift, and go to state 87


State 53

   54 func_call: ID LP . call_arg_list RP

    ID  shift, and go to state 88

    call_arg_list  go to state 89


State 54

   58 func_decl: INT ID . LP decl_arg_list RP SEMI

    LP  shift, and go to state 90


State 55

   59 func_decl: FLOAT ID . LP decl_arg_list RP SEMI

    LP  shift, and go to state 91


State 56

   80 mif: IF LP . cond RP mif ELSE mif
   83 uif: IF LP . cond RP if_else
   84    | IF LP . cond RP mif ELSE uif

    EXCL   shift, and go to state 92
    LP     shift, and go to state 2
    ID     shift, and go to state 6
    INT    shift, and go to state 35
    FLOAT  shift, and go to state 36

    int_arith        go to state 93
    int_arith_arg    go to state 94
    float_arith      go to state 95
    float_arith_arg  go to state 96
    func_call        go to state 45
    cond             go to state 97
    and_expr         go to state 98
    expr             go to state 99


State 57

  109 switch_case: SWITCH LP . ID RP LC cases RC

    ID  shift, and go to state 100


State 58

  108 switch_case: SWITCH ID . COL LC cases RC

    COL  shift, and go to state 101


State 59

  125 for_loop: FOR LP . for_expr RP stmt_wo_func
  126         | FOR LP . for_expr RP LC body RC

    INT_DECL    shift, and go to state 33
    FLOAT_DECL  shift, and go to state 34
    ID          shift, and go to state 102

    ID        [reduce using rule 128 (for_first)]
    $default  reduce using rule 128 (for_first)

    var_decl       go to state 103
    int_id_list    go to state 104
    int_assign     go to state 49
    float_id_list  go to state 105
    float_assign   go to state 52
    for_expr       go to state 106
    for_first      go to state 107


State 60

  137 while_loop: WHILE LP . cond RP stmt_wo_func
  138           | WHILE LP . cond RP LC body RC

    EXCL   shift, and go to state 92
    LP     shift, and go to state 2
    ID     shift, and go to state 6
    INT    shift, and go to state 35
    FLOAT  shift, and go to state 36

    int_arith        go to state 93
    int_arith_arg    go to state 94
    float_arith      go to state 95
    float_arith_arg  go to state 96
    func_call        go to state 45
    cond             go to state 108
    and_expr         go to state 98
    expr             go to state 99


State 61

    0 $accept: stmts $end .

    $default  accept


State 62

    2 stmts: stmt stmts .

    $default  reduce using rule 2 (stmts)


State 63

   34 arith: int_arith SEMI .

    $default  reduce using rule 34 (arith)


State 64

   36 int_arith: int_arith_arg PLUS . int_arith_arg

    LP   shift, and go to state 109
    ID   shift, and go to state 110
    INT  shift, and go to state 35

    int_arith      go to state 93
    int_arith_arg  go to state 111
    func_call      go to state 112


State 65

   37 int_arith: int_arith_arg MINUS . int_arith_arg

    LP   shift, and go to state 109
    ID   shift, and go to state 110
    INT  shift, and go to state 35

    int_arith      go to state 93
    int_arith_arg  go to state 113
    func_call      go to state 112


State 66

   38 int_arith: int_arith_arg MULT . int_arith_arg

    LP   shift, and go to state 109
    ID   shift, and go to state 110
    INT  shift, and go to state 35

    int_arith      go to state 93
    int_arith_arg  go to state 114
    func_call      go to state 112


State 67

   39 int_arith: int_arith_arg DIV . int_arith_arg

    LP   shift, and go to state 109
    ID   shift, and go to state 110
    INT  shift, and go to state 35

    int_arith      go to state 93
    int_arith_arg  go to state 115
    func_call      go to state 112


State 68

   35 arith: float_arith SEMI .

    $default  reduce using rule 35 (arith)


State 69

   45 float_arith: float_arith_arg PLUS . float_arith_arg

    LP     shift, and go to state 116
    ID     shift, and go to state 117
    FLOAT  shift, and go to state 36

    float_arith      go to state 95
    float_arith_arg  go to state 118
    func_call        go to state 119


State 70

   46 float_arith: float_arith_arg MINUS . float_arith_arg

    LP     shift, and go to state 116
    ID     shift, and go to state 117
    FLOAT  shift, and go to state 36

    float_arith      go to state 95
    float_arith_arg  go to state 120
    func_call        go to state 119


State 71

   47 float_arith: float_arith_arg MULT . float_arith_arg

    LP     shift, and go to state 116
    ID     shift, and go to state 117
    FLOAT  shift, and go to state 36

    float_arith      go to state 95
    float_arith_arg  go to state 121
    func_call        go to state 119


State 72

   48 float_arith: float_arith_arg DIV . float_arith_arg

    LP     shift, and go to state 116
    ID     shift, and go to state 117
    FLOAT  shift, and go to state 36

    float_arith      go to state 95
    float_arith_arg  go to state 122
    func_call        go to state 119


State 73

   18 int_assign: ID .
   19           | ID . EQ int_id_assign_list

    EQ  shift, and go to state 80

    $default  reduce using rule 18 (int_assign)


State 74

   27 float_assign: ID .
   28             | ID . EQ float_id_assign_list

    EQ  shift, and go to state 84

    $default  reduce using rule 27 (float_assign)


State 75

   82 mif: LC simple_stmts RC .

    $default  reduce using rule 82 (mif)


State 76

   86 simple_stmts: simple_stmt simple_stmts .

    $default  reduce using rule 86 (simple_stmts)


State 77

   44 int_arith_arg: LP int_arith RP .

    $default  reduce using rule 44 (int_arith_arg)


State 78

   53 float_arith_arg: LP float_arith RP .

    $default  reduce using rule 53 (float_arith_arg)


State 79

   57 func_decl: VOID ID LP . decl_arg_list RP SEMI
   66 func_def: VOID ID LP . def_arg_list RP stmt_wo_func
   67         | VOID ID LP . def_arg_list RP LC body RC

    INT_DECL    shift, and go to state 123
    FLOAT_DECL  shift, and go to state 124

    decl_arg_list  go to state 125
    decl_arg       go to state 126
    def_arg_list   go to state 127
    def_arg        go to state 128


State 80

   19 int_assign: ID EQ . int_id_assign_list

    ID  shift, and go to state 129

    int_id_assign_list  go to state 130


State 81

   68 func_def: INT_DECL ID LP . def_arg_list RP stmt_wo_func
   69         | INT_DECL ID LP . def_arg_list RP LC body RC

    INT_DECL    shift, and go to state 131
    FLOAT_DECL  shift, and go to state 132

    def_arg_list  go to state 133
    def_arg       go to state 128


State 82

   17 int_id_list: int_assign COMMA . int_id_list

    ID  shift, and go to state 73

    int_id_list  go to state 134
    int_assign   go to state 49


State 83

   16 int_id_list: int_assign SEMI .

    $default  reduce using rule 16 (int_id_list)


State 84

   28 float_assign: ID EQ . float_id_assign_list

    ID  shift, and go to state 135

    float_id_assign_list  go to state 136


State 85

   70 func_def: FLOAT_DECL ID LP . def_arg_list RP stmt_wo_func
   71         | FLOAT_DECL ID LP . def_arg_list RP LC body RC

    INT_DECL    shift, and go to state 131
    FLOAT_DECL  shift, and go to state 132

    def_arg_list  go to state 137
    def_arg       go to state 128


State 86

   26 float_id_list: float_assign COMMA . float_id_list

    ID  shift, and go to state 74

    float_id_list  go to state 138
    float_assign   go to state 52


State 87

   25 float_id_list: float_assign SEMI .

    $default  reduce using rule 25 (float_id_list)


State 88

   55 call_arg_list: ID .
   56              | ID . COMMA call_arg_list

    COMMA  shift, and go to state 139

    $default  reduce using rule 55 (call_arg_list)


State 89

   54 func_call: ID LP call_arg_list . RP

    RP  shift, and go to state 140


State 90

   58 func_decl: INT ID LP . decl_arg_list RP SEMI

    INT_DECL    shift, and go to state 141
    FLOAT_DECL  shift, and go to state 142

    decl_arg_list  go to state 143
    decl_arg       go to state 126


State 91

   59 func_decl: FLOAT ID LP . decl_arg_list RP SEMI

    INT_DECL    shift, and go to state 141
    FLOAT_DECL  shift, and go to state 142

    decl_arg_list  go to state 144
    decl_arg       go to state 126


State 92

  107 expr: EXCL . cond

    EXCL   shift, and go to state 92
    LP     shift, and go to state 2
    ID     shift, and go to state 6
    INT    shift, and go to state 35
    FLOAT  shift, and go to state 36

    int_arith        go to state 93
    int_arith_arg    go to state 94
    float_arith      go to state 95
    float_arith_arg  go to state 96
    func_call        go to state 45
    cond             go to state 145
    and_expr         go to state 98
    expr             go to state 99


State 93

   42 int_arith_arg: int_arith .

    $default  reduce using rule 42 (int_arith_arg)


State 94

   36 int_arith: int_arith_arg . PLUS int_arith_arg
   37          | int_arith_arg . MINUS int_arith_arg
   38          | int_arith_arg . MULT int_arith_arg
   39          | int_arith_arg . DIV int_arith_arg
   95 expr: int_arith_arg . LT int_arith_arg
   96     | int_arith_arg . GT int_arith_arg
   97     | int_arith_arg . LE int_arith_arg
   98     | int_arith_arg . GE int_arith_arg
   99     | int_arith_arg . EQ EQ int_arith_arg
  100     | int_arith_arg . NEQ int_arith_arg

    PLUS   shift, and go to state 64
    MINUS  shift, and go to state 65
    MULT   shift, and go to state 66
    DIV    shift, and go to state 67
    LE     shift, and go to state 146
    GE     shift, and go to state 147
    EQ     shift, and go to state 148
    NEQ    shift, and go to state 149
    LT     shift, and go to state 150
    GT     shift, and go to state 151


State 95

   51 float_arith_arg: float_arith .

    $default  reduce using rule 51 (float_arith_arg)


State 96

   45 float_arith: float_arith_arg . PLUS float_arith_arg
   46            | float_arith_arg . MINUS float_arith_arg
   47            | float_arith_arg . MULT float_arith_arg
   48            | float_arith_arg . DIV float_arith_arg
  101 expr: float_arith_arg . LT float_arith_arg
  102     | float_arith_arg . GT float_arith_arg
  103     | float_arith_arg . LE float_arith_arg
  104     | float_arith_arg . GE float_arith_arg
  105     | float_arith_arg . EQ EQ float_arith_arg
  106     | float_arith_arg . NEQ float_arith_arg

    PLUS   shift, and go to state 69
    MINUS  shift, and go to state 70
    MULT   shift, and go to state 71
    DIV    shift, and go to state 72
    LE     shift, and go to state 152
    GE     shift, and go to state 153
    EQ     shift, and go to state 154
    NEQ    shift, and go to state 155
    LT     shift, and go to state 156
    GT     shift, and go to state 157


State 97

   80 mif: IF LP cond . RP mif ELSE mif
   83 uif: IF LP cond . RP if_else
   84    | IF LP cond . RP mif ELSE uif

    RP  shift, and go to state 158


State 98

   91 cond: and_expr .
   92     | and_expr . OR cond

    OR  shift, and go to state 159

    OR        [reduce using rule 91 (cond)]
    $default  reduce using rule 91 (cond)


State 99

   93 and_expr: expr .
   94         | expr . AND and_expr

    AND  shift, and go to state 160

    AND       [reduce using rule 93 (and_expr)]
    $default  reduce using rule 93 (and_expr)


State 100

  109 switch_case: SWITCH LP ID . RP LC cases RC

    RP  shift, and go to state 161


State 101

  108 switch_case: SWITCH ID COL . LC cases RC

    LC  shift, and go to state 162


State 102

   18 int_assign: ID .
   19           | ID . EQ int_id_assign_list
   27 float_assign: ID .
   28             | ID . EQ float_id_assign_list

    EQ  shift, and go to state 163

    COMMA     reduce using rule 18 (int_assign)
    COMMA     [reduce using rule 27 (float_assign)]
    SEMI      reduce using rule 18 (int_assign)
    SEMI      [reduce using rule 27 (float_assign)]
    $default  reduce using rule 18 (int_assign)


State 103

  129 for_first: var_decl .

    $default  reduce using rule 129 (for_first)


State 104

  130 for_first: int_id_list .

    $default  reduce using rule 130 (for_first)


State 105

  131 for_first: float_id_list .

    $default  reduce using rule 131 (for_first)


State 106

  125 for_loop: FOR LP for_expr . RP stmt_wo_func
  126         | FOR LP for_expr . RP LC body RC

    RP  shift, and go to state 164


State 107

  127 for_expr: for_first . for_second for_third

    EXCL   shift, and go to state 92
    LP     shift, and go to state 2
    ID     shift, and go to state 6
    INT    shift, and go to state 35
    FLOAT  shift, and go to state 36

    ID        [reduce using rule 132 (for_second)]
    $default  reduce using rule 132 (for_second)

    int_arith        go to state 93
    int_arith_arg    go to state 94
    float_arith      go to state 95
    float_arith_arg  go to state 96
    func_call        go to state 45
    cond             go to state 165
    and_expr         go to state 98
    expr             go to state 99
    for_second       go to state 166


State 108

  137 while_loop: WHILE LP cond . RP stmt_wo_func
  138           | WHILE LP cond . RP LC body RC

    RP  shift, and go to state 167


State 109

   44 int_arith_arg: LP . int_arith RP

    LP   shift, and go to state 109
    ID   shift, and go to state 110
    INT  shift, and go to state 35

    int_arith      go to state 43
    int_arith_arg  go to state 20
    func_call      go to state 112


State 110

   40 int_arith_arg: ID .
   54 func_call: ID . LP call_arg_list RP

    LP  shift, and go to state 53

    $default  reduce using rule 40 (int_arith_arg)


State 111

   36 int_arith: int_arith_arg . PLUS int_arith_arg
   36          | int_arith_arg PLUS int_arith_arg .
   37          | int_arith_arg . MINUS int_arith_arg
   38          | int_arith_arg . MULT int_arith_arg
   39          | int_arith_arg . DIV int_arith_arg

    PLUS   shift, and go to state 64
    MINUS  shift, and go to state 65
    MULT   shift, and go to state 66
    DIV    shift, and go to state 67

    PLUS      [reduce using rule 36 (int_arith)]
    MINUS     [reduce using rule 36 (int_arith)]
    MULT      [reduce using rule 36 (int_arith)]
    DIV       [reduce using rule 36 (int_arith)]
    $default  reduce using rule 36 (int_arith)


State 112

   43 int_arith_arg: func_call .

    $default  reduce using rule 43 (int_arith_arg)


State 113

   36 int_arith: int_arith_arg . PLUS int_arith_arg
   37          | int_arith_arg . MINUS int_arith_arg
   37          | int_arith_arg MINUS int_arith_arg .
   38          | int_arith_arg . MULT int_arith_arg
   39          | int_arith_arg . DIV int_arith_arg

    PLUS   shift, and go to state 64
    MINUS  shift, and go to state 65
    MULT   shift, and go to state 66
    DIV    shift, and go to state 67

    PLUS      [reduce using rule 37 (int_arith)]
    MINUS     [reduce using rule 37 (int_arith)]
    MULT      [reduce using rule 37 (int_arith)]
    DIV       [reduce using rule 37 (int_arith)]
    $default  reduce using rule 37 (int_arith)


State 114

   36 int_arith: int_arith_arg . PLUS int_arith_arg
   37          | int_arith_arg . MINUS int_arith_arg
   38          | int_arith_arg . MULT int_arith_arg
   38          | int_arith_arg MULT int_arith_arg .
   39          | int_arith_arg . DIV int_arith_arg

    PLUS   shift, and go to state 64
    MINUS  shift, and go to state 65
    MULT   shift, and go to state 66
    DIV    shift, and go to state 67

    PLUS      [reduce using rule 38 (int_arith)]
    MINUS     [reduce using rule 38 (int_arith)]
    MULT      [reduce using rule 38 (int_arith)]
    DIV       [reduce using rule 38 (int_arith)]
    $default  reduce using rule 38 (int_arith)


State 115

   36 int_arith: int_arith_arg . PLUS int_arith_arg
   37          | int_arith_arg . MINUS int_arith_arg
   38          | int_arith_arg . MULT int_arith_arg
   39          | int_arith_arg . DIV int_arith_arg
   39          | int_arith_arg DIV int_arith_arg .

    PLUS   shift, and go to state 64
    MINUS  shift, and go to state 65
    MULT   shift, and go to state 66
    DIV    shift, and go to state 67

    PLUS      [reduce using rule 39 (int_arith)]
    MINUS     [reduce using rule 39 (int_arith)]
    MULT      [reduce using rule 39 (int_arith)]
    DIV       [reduce using rule 39 (int_arith)]
    $default  reduce using rule 39 (int_arith)


State 116

   53 float_arith_arg: LP . float_arith RP

    LP     shift, and go to state 116
    ID     shift, and go to state 117
    FLOAT  shift, and go to state 36

    float_arith      go to state 44
    float_arith_arg  go to state 22
    func_call        go to state 119


State 117

   49 float_arith_arg: ID .
   54 func_call: ID . LP call_arg_list RP

    LP  shift, and go to state 53

    $default  reduce using rule 49 (float_arith_arg)


State 118

   45 float_arith: float_arith_arg . PLUS float_arith_arg
   45            | float_arith_arg PLUS float_arith_arg .
   46            | float_arith_arg . MINUS float_arith_arg
   47            | float_arith_arg . MULT float_arith_arg
   48            | float_arith_arg . DIV float_arith_arg

    PLUS   shift, and go to state 69
    MINUS  shift, and go to state 70
    MULT   shift, and go to state 71
    DIV    shift, and go to state 72

    PLUS      [reduce using rule 45 (float_arith)]
    MINUS     [reduce using rule 45 (float_arith)]
    MULT      [reduce using rule 45 (float_arith)]
    DIV       [reduce using rule 45 (float_arith)]
    $default  reduce using rule 45 (float_arith)


State 119

   52 float_arith_arg: func_call .

    $default  reduce using rule 52 (float_arith_arg)


State 120

   45 float_arith: float_arith_arg . PLUS float_arith_arg
   46            | float_arith_arg . MINUS float_arith_arg
   46            | float_arith_arg MINUS float_arith_arg .
   47            | float_arith_arg . MULT float_arith_arg
   48            | float_arith_arg . DIV float_arith_arg

    PLUS   shift, and go to state 69
    MINUS  shift, and go to state 70
    MULT   shift, and go to state 71
    DIV    shift, and go to state 72

    PLUS      [reduce using rule 46 (float_arith)]
    MINUS     [reduce using rule 46 (float_arith)]
    MULT      [reduce using rule 46 (float_arith)]
    DIV       [reduce using rule 46 (float_arith)]
    $default  reduce using rule 46 (float_arith)


State 121

   45 float_arith: float_arith_arg . PLUS float_arith_arg
   46            | float_arith_arg . MINUS float_arith_arg
   47            | float_arith_arg . MULT float_arith_arg
   47            | float_arith_arg MULT float_arith_arg .
   48            | float_arith_arg . DIV float_arith_arg

    PLUS   shift, and go to state 69
    MINUS  shift, and go to state 70
    MULT   shift, and go to state 71
    DIV    shift, and go to state 72

    PLUS      [reduce using rule 47 (float_arith)]
    MINUS     [reduce using rule 47 (float_arith)]
    MULT      [reduce using rule 47 (float_arith)]
    DIV       [reduce using rule 47 (float_arith)]
    $default  reduce using rule 47 (float_arith)


State 122

   45 float_arith: float_arith_arg . PLUS float_arith_arg
   46            | float_arith_arg . MINUS float_arith_arg
   47            | float_arith_arg . MULT float_arith_arg
   48            | float_arith_arg . DIV float_arith_arg
   48            | float_arith_arg DIV float_arith_arg .

    PLUS   shift, and go to state 69
    MINUS  shift, and go to state 70
    MULT   shift, and go to state 71
    DIV    shift, and go to state 72

    PLUS      [reduce using rule 48 (float_arith)]
    MINUS     [reduce using rule 48 (float_arith)]
    MULT      [reduce using rule 48 (float_arith)]
    DIV       [reduce using rule 48 (float_arith)]
    $default  reduce using rule 48 (float_arith)


State 123

   62 decl_arg: INT_DECL .
   64         | INT_DECL . ID
   74 def_arg: INT_DECL . ID

    ID  shift, and go to state 168

    $default  reduce using rule 62 (decl_arg)


State 124

   63 decl_arg: FLOAT_DECL .
   65         | FLOAT_DECL . ID
   75 def_arg: FLOAT_DECL . ID

    ID  shift, and go to state 169

    $default  reduce using rule 63 (decl_arg)


State 125

   57 func_decl: VOID ID LP decl_arg_list . RP SEMI

    RP  shift, and go to state 170


State 126

   60 decl_arg_list: decl_arg .
   61              | decl_arg . COMMA decl_arg_list

    COMMA  shift, and go to state 171

    $default  reduce using rule 60 (decl_arg_list)


State 127

   66 func_def: VOID ID LP def_arg_list . RP stmt_wo_func
   67         | VOID ID LP def_arg_list . RP LC body RC

    RP  shift, and go to state 172


State 128

   72 def_arg_list: def_arg .
   73             | def_arg . COMMA def_arg_list

    COMMA  shift, and go to state 173

    $default  reduce using rule 72 (def_arg_list)


State 129

   20 int_id_assign_list: ID .
   21                   | ID . EQ INT
   22                   | ID . EQ int_arith
   23                   | ID . EQ func_call
   24                   | ID . EQ int_id_assign_list

    EQ  shift, and go to state 174

    $default  reduce using rule 20 (int_id_assign_list)


State 130

   19 int_assign: ID EQ int_id_assign_list .

    $default  reduce using rule 19 (int_assign)


State 131

   74 def_arg: INT_DECL . ID

    ID  shift, and go to state 175


State 132

   75 def_arg: FLOAT_DECL . ID

    ID  shift, and go to state 176


State 133

   68 func_def: INT_DECL ID LP def_arg_list . RP stmt_wo_func
   69         | INT_DECL ID LP def_arg_list . RP LC body RC

    RP  shift, and go to state 177


State 134

   17 int_id_list: int_assign COMMA int_id_list .

    $default  reduce using rule 17 (int_id_list)


State 135

   29 float_id_assign_list: ID .
   30                     | ID . EQ FLOAT
   31                     | ID . EQ float_arith
   32                     | ID . EQ func_call
   33                     | ID . EQ float_id_assign_list

    EQ  shift, and go to state 178

    $default  reduce using rule 29 (float_id_assign_list)


State 136

   28 float_assign: ID EQ float_id_assign_list .

    $default  reduce using rule 28 (float_assign)


State 137

   70 func_def: FLOAT_DECL ID LP def_arg_list . RP stmt_wo_func
   71         | FLOAT_DECL ID LP def_arg_list . RP LC body RC

    RP  shift, and go to state 179


State 138

   26 float_id_list: float_assign COMMA float_id_list .

    $default  reduce using rule 26 (float_id_list)


State 139

   56 call_arg_list: ID COMMA . call_arg_list

    ID  shift, and go to state 88

    call_arg_list  go to state 180


State 140

   54 func_call: ID LP call_arg_list RP .

    $default  reduce using rule 54 (func_call)


State 141

   62 decl_arg: INT_DECL .
   64         | INT_DECL . ID

    ID  shift, and go to state 181

    $default  reduce using rule 62 (decl_arg)


State 142

   63 decl_arg: FLOAT_DECL .
   65         | FLOAT_DECL . ID

    ID  shift, and go to state 182

    $default  reduce using rule 63 (decl_arg)


State 143

   58 func_decl: INT ID LP decl_arg_list . RP SEMI

    RP  shift, and go to state 183


State 144

   59 func_decl: FLOAT ID LP decl_arg_list . RP SEMI

    RP  shift, and go to state 184


State 145

  107 expr: EXCL cond .

    $default  reduce using rule 107 (expr)


State 146

   97 expr: int_arith_arg LE . int_arith_arg

    LP   shift, and go to state 109
    ID   shift, and go to state 110
    INT  shift, and go to state 35

    int_arith      go to state 93
    int_arith_arg  go to state 185
    func_call      go to state 112


State 147

   98 expr: int_arith_arg GE . int_arith_arg

    LP   shift, and go to state 109
    ID   shift, and go to state 110
    INT  shift, and go to state 35

    int_arith      go to state 93
    int_arith_arg  go to state 186
    func_call      go to state 112


State 148

   99 expr: int_arith_arg EQ . EQ int_arith_arg

    EQ  shift, and go to state 187


State 149

  100 expr: int_arith_arg NEQ . int_arith_arg

    LP   shift, and go to state 109
    ID   shift, and go to state 110
    INT  shift, and go to state 35

    int_arith      go to state 93
    int_arith_arg  go to state 188
    func_call      go to state 112


State 150

   95 expr: int_arith_arg LT . int_arith_arg

    LP   shift, and go to state 109
    ID   shift, and go to state 110
    INT  shift, and go to state 35

    int_arith      go to state 93
    int_arith_arg  go to state 189
    func_call      go to state 112


State 151

   96 expr: int_arith_arg GT . int_arith_arg

    LP   shift, and go to state 109
    ID   shift, and go to state 110
    INT  shift, and go to state 35

    int_arith      go to state 93
    int_arith_arg  go to state 190
    func_call      go to state 112


State 152

  103 expr: float_arith_arg LE . float_arith_arg

    LP     shift, and go to state 116
    ID     shift, and go to state 117
    FLOAT  shift, and go to state 36

    float_arith      go to state 95
    float_arith_arg  go to state 191
    func_call        go to state 119


State 153

  104 expr: float_arith_arg GE . float_arith_arg

    LP     shift, and go to state 116
    ID     shift, and go to state 117
    FLOAT  shift, and go to state 36

    float_arith      go to state 95
    float_arith_arg  go to state 192
    func_call        go to state 119


State 154

  105 expr: float_arith_arg EQ . EQ float_arith_arg

    EQ  shift, and go to state 193


State 155

  106 expr: float_arith_arg NEQ . float_arith_arg

    LP     shift, and go to state 116
    ID     shift, and go to state 117
    FLOAT  shift, and go to state 36

    float_arith      go to state 95
    float_arith_arg  go to state 194
    func_call        go to state 119


State 156

  101 expr: float_arith_arg LT . float_arith_arg

    LP     shift, and go to state 116
    ID     shift, and go to state 117
    FLOAT  shift, and go to state 36

    float_arith      go to state 95
    float_arith_arg  go to state 195
    func_call        go to state 119


State 157

  102 expr: float_arith_arg GT . float_arith_arg

    LP     shift, and go to state 116
    ID     shift, and go to state 117
    FLOAT  shift, and go to state 36

    float_arith      go to state 95
    float_arith_arg  go to state 196
    func_call        go to state 119


State 158

   80 mif: IF LP cond RP . mif ELSE mif
   83 uif: IF LP cond RP . if_else
   84    | IF LP cond RP . mif ELSE uif

    LC          shift, and go to state 1
    LP          shift, and go to state 2
    INT_DECL    shift, and go to state 33
    FLOAT_DECL  shift, and go to state 34
    ID          shift, and go to state 6
    INT         shift, and go to state 35
    FLOAT       shift, and go to state 36
    IF          shift, and go to state 9
    SWITCH      shift, and go to state 10

    var_decl         go to state 37
    arith            go to state 38
    int_arith        go to state 19
    int_arith_arg    go to state 20
    float_arith      go to state 21
    float_arith_arg  go to state 22
    func_call        go to state 39
    if_else          go to state 197
    mif              go to state 198
    uif              go to state 28
    simple_stmt      go to state 29
    switch_case      go to state 42


State 159

   92 cond: and_expr OR . cond

    EXCL   shift, and go to state 92
    LP     shift, and go to state 2
    ID     shift, and go to state 6
    INT    shift, and go to state 35
    FLOAT  shift, and go to state 36

    int_arith        go to state 93
    int_arith_arg    go to state 94
    float_arith      go to state 95
    float_arith_arg  go to state 96
    func_call        go to state 45
    cond             go to state 199
    and_expr         go to state 98
    expr             go to state 99


State 160

   94 and_expr: expr AND . and_expr

    EXCL   shift, and go to state 92
    LP     shift, and go to state 2
    ID     shift, and go to state 6
    INT    shift, and go to state 35
    FLOAT  shift, and go to state 36

    int_arith        go to state 93
    int_arith_arg    go to state 94
    float_arith      go to state 95
    float_arith_arg  go to state 96
    func_call        go to state 45
    and_expr         go to state 200
    expr             go to state 99


State 161

  109 switch_case: SWITCH LP ID RP . LC cases RC

    LC  shift, and go to state 201


State 162

  108 switch_case: SWITCH ID COL LC . cases RC

    CASE  shift, and go to state 202

    cases  go to state 203
    case   go to state 204


State 163

   19 int_assign: ID EQ . int_id_assign_list
   28 float_assign: ID EQ . float_id_assign_list

    ID  shift, and go to state 205

    int_id_assign_list    go to state 130
    float_id_assign_list  go to state 136


State 164

  125 for_loop: FOR LP for_expr RP . stmt_wo_func
  126         | FOR LP for_expr RP . LC body RC

    LC          shift, and go to state 206
    LP          shift, and go to state 2
    INT_DECL    shift, and go to state 33
    FLOAT_DECL  shift, and go to state 34
    ID          shift, and go to state 6
    INT         shift, and go to state 35
    FLOAT       shift, and go to state 36
    IF          shift, and go to state 9
    SWITCH      shift, and go to state 10
    FOR         shift, and go to state 11
    WHILE       shift, and go to state 12

    stmt_wo_func     go to state 207
    var_decl         go to state 17
    arith            go to state 18
    int_arith        go to state 19
    int_arith_arg    go to state 20
    float_arith      go to state 21
    float_arith_arg  go to state 22
    func_call        go to state 23
    if_else          go to state 26
    mif              go to state 27
    uif              go to state 28
    simple_stmt      go to state 29
    switch_case      go to state 30
    for_loop         go to state 31
    while_loop       go to state 32


State 165

  133 for_second: cond . SEMI

    SEMI  shift, and go to state 208


State 166

  127 for_expr: for_first for_second . for_third

    ID  shift, and go to state 209

    $default  reduce using rule 134 (for_third)

    for_third  go to state 210


State 167

  137 while_loop: WHILE LP cond RP . stmt_wo_func
  138           | WHILE LP cond RP . LC body RC

    LC          shift, and go to state 211
    LP          shift, and go to state 2
    INT_DECL    shift, and go to state 33
    FLOAT_DECL  shift, and go to state 34
    ID          shift, and go to state 6
    INT         shift, and go to state 35
    FLOAT       shift, and go to state 36
    IF          shift, and go to state 9
    SWITCH      shift, and go to state 10
    FOR         shift, and go to state 11
    WHILE       shift, and go to state 12

    stmt_wo_func     go to state 212
    var_decl         go to state 17
    arith            go to state 18
    int_arith        go to state 19
    int_arith_arg    go to state 20
    float_arith      go to state 21
    float_arith_arg  go to state 22
    func_call        go to state 23
    if_else          go to state 26
    mif              go to state 27
    uif              go to state 28
    simple_stmt      go to state 29
    switch_case      go to state 30
    for_loop         go to state 31
    while_loop       go to state 32


State 168

   64 decl_arg: INT_DECL ID .
   74 def_arg: INT_DECL ID .

    COMMA     reduce using rule 64 (decl_arg)
    COMMA     [reduce using rule 74 (def_arg)]
    RP        reduce using rule 64 (decl_arg)
    RP        [reduce using rule 74 (def_arg)]
    $default  reduce using rule 64 (decl_arg)


State 169

   65 decl_arg: FLOAT_DECL ID .
   75 def_arg: FLOAT_DECL ID .

    COMMA     reduce using rule 65 (decl_arg)
    COMMA     [reduce using rule 75 (def_arg)]
    RP        reduce using rule 65 (decl_arg)
    RP        [reduce using rule 75 (def_arg)]
    $default  reduce using rule 65 (decl_arg)


State 170

   57 func_decl: VOID ID LP decl_arg_list RP . SEMI

    SEMI  shift, and go to state 213


State 171

   61 decl_arg_list: decl_arg COMMA . decl_arg_list

    INT_DECL    shift, and go to state 141
    FLOAT_DECL  shift, and go to state 142

    decl_arg_list  go to state 214
    decl_arg       go to state 126


State 172

   66 func_def: VOID ID LP def_arg_list RP . stmt_wo_func
   67         | VOID ID LP def_arg_list RP . LC body RC

    LC          shift, and go to state 215
    LP          shift, and go to state 2
    INT_DECL    shift, and go to state 33
    FLOAT_DECL  shift, and go to state 34
    ID          shift, and go to state 6
    INT         shift, and go to state 35
    FLOAT       shift, and go to state 36
    IF          shift, and go to state 9
    SWITCH      shift, and go to state 10
    FOR         shift, and go to state 11
    WHILE       shift, and go to state 12

    stmt_wo_func     go to state 216
    var_decl         go to state 17
    arith            go to state 18
    int_arith        go to state 19
    int_arith_arg    go to state 20
    float_arith      go to state 21
    float_arith_arg  go to state 22
    func_call        go to state 23
    if_else          go to state 26
    mif              go to state 27
    uif              go to state 28
    simple_stmt      go to state 29
    switch_case      go to state 30
    for_loop         go to state 31
    while_loop       go to state 32


State 173

   73 def_arg_list: def_arg COMMA . def_arg_list

    INT_DECL    shift, and go to state 131
    FLOAT_DECL  shift, and go to state 132

    def_arg_list  go to state 217
    def_arg       go to state 128


State 174

   21 int_id_assign_list: ID EQ . INT
   22                   | ID EQ . int_arith
   23                   | ID EQ . func_call
   24                   | ID EQ . int_id_assign_list

    LP   shift, and go to state 109
    ID   shift, and go to state 218
    INT  shift, and go to state 219

    int_id_assign_list  go to state 220
    int_arith           go to state 221
    int_arith_arg       go to state 20
    func_call           go to state 222


State 175

   74 def_arg: INT_DECL ID .

    $default  reduce using rule 74 (def_arg)


State 176

   75 def_arg: FLOAT_DECL ID .

    $default  reduce using rule 75 (def_arg)


State 177

   68 func_def: INT_DECL ID LP def_arg_list RP . stmt_wo_func
   69         | INT_DECL ID LP def_arg_list RP . LC body RC

    LC          shift, and go to state 223
    LP          shift, and go to state 2
    INT_DECL    shift, and go to state 33
    FLOAT_DECL  shift, and go to state 34
    ID          shift, and go to state 6
    INT         shift, and go to state 35
    FLOAT       shift, and go to state 36
    IF          shift, and go to state 9
    SWITCH      shift, and go to state 10
    FOR         shift, and go to state 11
    WHILE       shift, and go to state 12

    stmt_wo_func     go to state 224
    var_decl         go to state 17
    arith            go to state 18
    int_arith        go to state 19
    int_arith_arg    go to state 20
    float_arith      go to state 21
    float_arith_arg  go to state 22
    func_call        go to state 23
    if_else          go to state 26
    mif              go to state 27
    uif              go to state 28
    simple_stmt      go to state 29
    switch_case      go to state 30
    for_loop         go to state 31
    while_loop       go to state 32


State 178

   30 float_id_assign_list: ID EQ . FLOAT
   31                     | ID EQ . float_arith
   32                     | ID EQ . func_call
   33                     | ID EQ . float_id_assign_list

    LP     shift, and go to state 116
    ID     shift, and go to state 225
    FLOAT  shift, and go to state 226

    float_id_assign_list  go to state 227
    float_arith           go to state 228
    float_arith_arg       go to state 22
    func_call             go to state 229


State 179

   70 func_def: FLOAT_DECL ID LP def_arg_list RP . stmt_wo_func
   71         | FLOAT_DECL ID LP def_arg_list RP . LC body RC

    LC          shift, and go to state 230
    LP          shift, and go to state 2
    INT_DECL    shift, and go to state 33
    FLOAT_DECL  shift, and go to state 34
    ID          shift, and go to state 6
    INT         shift, and go to state 35
    FLOAT       shift, and go to state 36
    IF          shift, and go to state 9
    SWITCH      shift, and go to state 10
    FOR         shift, and go to state 11
    WHILE       shift, and go to state 12

    stmt_wo_func     go to state 231
    var_decl         go to state 17
    arith            go to state 18
    int_arith        go to state 19
    int_arith_arg    go to state 20
    float_arith      go to state 21
    float_arith_arg  go to state 22
    func_call        go to state 23
    if_else          go to state 26
    mif              go to state 27
    uif              go to state 28
    simple_stmt      go to state 29
    switch_case      go to state 30
    for_loop         go to state 31
    while_loop       go to state 32


State 180

   56 call_arg_list: ID COMMA call_arg_list .

    $default  reduce using rule 56 (call_arg_list)


State 181

   64 decl_arg: INT_DECL ID .

    $default  reduce using rule 64 (decl_arg)


State 182

   65 decl_arg: FLOAT_DECL ID .

    $default  reduce using rule 65 (decl_arg)


State 183

   58 func_decl: INT ID LP decl_arg_list RP . SEMI

    SEMI  shift, and go to state 232


State 184

   59 func_decl: FLOAT ID LP decl_arg_list RP . SEMI

    SEMI  shift, and go to state 233


State 185

   36 int_arith: int_arith_arg . PLUS int_arith_arg
   37          | int_arith_arg . MINUS int_arith_arg
   38          | int_arith_arg . MULT int_arith_arg
   39          | int_arith_arg . DIV int_arith_arg
   97 expr: int_arith_arg LE int_arith_arg .

    PLUS   shift, and go to state 64
    MINUS  shift, and go to state 65
    MULT   shift, and go to state 66
    DIV    shift, and go to state 67

    $default  reduce using rule 97 (expr)


State 186

   36 int_arith: int_arith_arg . PLUS int_arith_arg
   37          | int_arith_arg . MINUS int_arith_arg
   38          | int_arith_arg . MULT int_arith_arg
   39          | int_arith_arg . DIV int_arith_arg
   98 expr: int_arith_arg GE int_arith_arg .

    PLUS   shift, and go to state 64
    MINUS  shift, and go to state 65
    MULT   shift, and go to state 66
    DIV    shift, and go to state 67

    $default  reduce using rule 98 (expr)


State 187

   99 expr: int_arith_arg EQ EQ . int_arith_arg

    LP   shift, and go to state 109
    ID   shift, and go to state 110
    INT  shift, and go to state 35

    int_arith      go to state 93
    int_arith_arg  go to state 234
    func_call      go to state 112


State 188

   36 int_arith: int_arith_arg . PLUS int_arith_arg
   37          | int_arith_arg . MINUS int_arith_arg
   38          | int_arith_arg . MULT int_arith_arg
   39          | int_arith_arg . DIV int_arith_arg
  100 expr: int_arith_arg NEQ int_arith_arg .

    PLUS   shift, and go to state 64
    MINUS  shift, and go to state 65
    MULT   shift, and go to state 66
    DIV    shift, and go to state 67

    $default  reduce using rule 100 (expr)


State 189

   36 int_arith: int_arith_arg . PLUS int_arith_arg
   37          | int_arith_arg . MINUS int_arith_arg
   38          | int_arith_arg . MULT int_arith_arg
   39          | int_arith_arg . DIV int_arith_arg
   95 expr: int_arith_arg LT int_arith_arg .

    PLUS   shift, and go to state 64
    MINUS  shift, and go to state 65
    MULT   shift, and go to state 66
    DIV    shift, and go to state 67

    $default  reduce using rule 95 (expr)


State 190

   36 int_arith: int_arith_arg . PLUS int_arith_arg
   37          | int_arith_arg . MINUS int_arith_arg
   38          | int_arith_arg . MULT int_arith_arg
   39          | int_arith_arg . DIV int_arith_arg
   96 expr: int_arith_arg GT int_arith_arg .

    PLUS   shift, and go to state 64
    MINUS  shift, and go to state 65
    MULT   shift, and go to state 66
    DIV    shift, and go to state 67

    $default  reduce using rule 96 (expr)


State 191

   45 float_arith: float_arith_arg . PLUS float_arith_arg
   46            | float_arith_arg . MINUS float_arith_arg
   47            | float_arith_arg . MULT float_arith_arg
   48            | float_arith_arg . DIV float_arith_arg
  103 expr: float_arith_arg LE float_arith_arg .

    PLUS   shift, and go to state 69
    MINUS  shift, and go to state 70
    MULT   shift, and go to state 71
    DIV    shift, and go to state 72

    $default  reduce using rule 103 (expr)


State 192

   45 float_arith: float_arith_arg . PLUS float_arith_arg
   46            | float_arith_arg . MINUS float_arith_arg
   47            | float_arith_arg . MULT float_arith_arg
   48            | float_arith_arg . DIV float_arith_arg
  104 expr: float_arith_arg GE float_arith_arg .

    PLUS   shift, and go to state 69
    MINUS  shift, and go to state 70
    MULT   shift, and go to state 71
    DIV    shift, and go to state 72

    $default  reduce using rule 104 (expr)


State 193

  105 expr: float_arith_arg EQ EQ . float_arith_arg

    LP     shift, and go to state 116
    ID     shift, and go to state 117
    FLOAT  shift, and go to state 36

    float_arith      go to state 95
    float_arith_arg  go to state 235
    func_call        go to state 119


State 194

   45 float_arith: float_arith_arg . PLUS float_arith_arg
   46            | float_arith_arg . MINUS float_arith_arg
   47            | float_arith_arg . MULT float_arith_arg
   48            | float_arith_arg . DIV float_arith_arg
  106 expr: float_arith_arg NEQ float_arith_arg .

    PLUS   shift, and go to state 69
    MINUS  shift, and go to state 70
    MULT   shift, and go to state 71
    DIV    shift, and go to state 72

    $default  reduce using rule 106 (expr)


State 195

   45 float_arith: float_arith_arg . PLUS float_arith_arg
   46            | float_arith_arg . MINUS float_arith_arg
   47            | float_arith_arg . MULT float_arith_arg
   48            | float_arith_arg . DIV float_arith_arg
  101 expr: float_arith_arg LT float_arith_arg .

    PLUS   shift, and go to state 69
    MINUS  shift, and go to state 70
    MULT   shift, and go to state 71
    DIV    shift, and go to state 72

    $default  reduce using rule 101 (expr)


State 196

   45 float_arith: float_arith_arg . PLUS float_arith_arg
   46            | float_arith_arg . MINUS float_arith_arg
   47            | float_arith_arg . MULT float_arith_arg
   48            | float_arith_arg . DIV float_arith_arg
  102 expr: float_arith_arg GT float_arith_arg .

    PLUS   shift, and go to state 69
    MINUS  shift, and go to state 70
    MULT   shift, and go to state 71
    DIV    shift, and go to state 72

    $default  reduce using rule 102 (expr)


State 197

   83 uif: IF LP cond RP if_else .

    $default  reduce using rule 83 (uif)


State 198

   78 if_else: mif .
   80 mif: IF LP cond RP mif . ELSE mif
   84 uif: IF LP cond RP mif . ELSE uif

    ELSE  shift, and go to state 236

    $default  reduce using rule 78 (if_else)


State 199

   92 cond: and_expr OR cond .

    $default  reduce using rule 92 (cond)


State 200

   94 and_expr: expr AND and_expr .

    $default  reduce using rule 94 (and_expr)


State 201

  109 switch_case: SWITCH LP ID RP LC . cases RC

    CASE  shift, and go to state 202

    cases  go to state 237
    case   go to state 204


State 202

  112 case: CASE . INT COL body break
  113     | CASE . INT COL LC body RC break
  114     | CASE . LP INT RP COL body break
  115     | CASE . LP INT RP COL LC body RC break
  116     | CASE . FLOAT COL body break
  117     | CASE . FLOAT COL LC body RC break
  118     | CASE . LP FLOAT RP COL body break
  119     | CASE . LP FLOAT RP COL LC body RC break

    LP     shift, and go to state 238
    INT    shift, and go to state 239
    FLOAT  shift, and go to state 240


State 203

  108 switch_case: SWITCH ID COL LC cases . RC

    RC  shift, and go to state 241


State 204

  110 cases: case . default
  111      | case . cases

    CASE     shift, and go to state 202
    DEFAULT  shift, and go to state 242

    $default  reduce using rule 120 (default)

    cases    go to state 243
    case     go to state 204
    default  go to state 244


State 205

   20 int_id_assign_list: ID .
   21                   | ID . EQ INT
   22                   | ID . EQ int_arith
   23                   | ID . EQ func_call
   24                   | ID . EQ int_id_assign_list
   29 float_id_assign_list: ID .
   30                     | ID . EQ FLOAT
   31                     | ID . EQ float_arith
   32                     | ID . EQ func_call
   33                     | ID . EQ float_id_assign_list

    EQ  shift, and go to state 245

    COMMA     reduce using rule 20 (int_id_assign_list)
    COMMA     [reduce using rule 29 (float_id_assign_list)]
    SEMI      reduce using rule 20 (int_id_assign_list)
    SEMI      [reduce using rule 29 (float_id_assign_list)]
    RP        reduce using rule 20 (int_id_assign_list)
    RP        [reduce using rule 29 (float_id_assign_list)]
    $default  reduce using rule 20 (int_id_assign_list)


State 206

   82 mif: LC . simple_stmts RC
  126 for_loop: FOR LP for_expr RP LC . body RC

    LC          shift, and go to state 1
    LP          shift, and go to state 2
    INT_DECL    shift, and go to state 33
    FLOAT_DECL  shift, and go to state 34
    ID          shift, and go to state 6
    INT         shift, and go to state 35
    FLOAT       shift, and go to state 36
    IF          shift, and go to state 9
    SWITCH      shift, and go to state 10
    FOR         shift, and go to state 11
    WHILE       shift, and go to state 12

    stmt_wo_func     go to state 246
    var_decl         go to state 17
    arith            go to state 18
    int_arith        go to state 19
    int_arith_arg    go to state 20
    float_arith      go to state 21
    float_arith_arg  go to state 22
    func_call        go to state 23
    body             go to state 247
    if_else          go to state 26
    mif              go to state 27
    uif              go to state 28
    simple_stmts     go to state 40
    simple_stmt      go to state 248
    switch_case      go to state 30
    for_loop         go to state 31
    while_loop       go to state 32


State 207

  125 for_loop: FOR LP for_expr RP stmt_wo_func .

    $default  reduce using rule 125 (for_loop)


State 208

  133 for_second: cond SEMI .

    $default  reduce using rule 133 (for_second)


State 209

  135 for_third: ID . EQ int_id_assign_list
  136          | ID . EQ float_id_assign_list

    EQ  shift, and go to state 249


State 210

  127 for_expr: for_first for_second for_third .

    $default  reduce using rule 127 (for_expr)


State 211

   82 mif: LC . simple_stmts RC
  138 while_loop: WHILE LP cond RP LC . body RC

    LC          shift, and go to state 1
    LP          shift, and go to state 2
    INT_DECL    shift, and go to state 33
    FLOAT_DECL  shift, and go to state 34
    ID          shift, and go to state 6
    INT         shift, and go to state 35
    FLOAT       shift, and go to state 36
    IF          shift, and go to state 9
    SWITCH      shift, and go to state 10
    FOR         shift, and go to state 11
    WHILE       shift, and go to state 12

    stmt_wo_func     go to state 246
    var_decl         go to state 17
    arith            go to state 18
    int_arith        go to state 19
    int_arith_arg    go to state 20
    float_arith      go to state 21
    float_arith_arg  go to state 22
    func_call        go to state 23
    body             go to state 250
    if_else          go to state 26
    mif              go to state 27
    uif              go to state 28
    simple_stmts     go to state 40
    simple_stmt      go to state 248
    switch_case      go to state 30
    for_loop         go to state 31
    while_loop       go to state 32


State 212

  137 while_loop: WHILE LP cond RP stmt_wo_func .

    $default  reduce using rule 137 (while_loop)


State 213

   57 func_decl: VOID ID LP decl_arg_list RP SEMI .

    $default  reduce using rule 57 (func_decl)


State 214

   61 decl_arg_list: decl_arg COMMA decl_arg_list .

    $default  reduce using rule 61 (decl_arg_list)


State 215

   67 func_def: VOID ID LP def_arg_list RP LC . body RC
   82 mif: LC . simple_stmts RC

    LC          shift, and go to state 1
    LP          shift, and go to state 2
    INT_DECL    shift, and go to state 33
    FLOAT_DECL  shift, and go to state 34
    ID          shift, and go to state 6
    INT         shift, and go to state 35
    FLOAT       shift, and go to state 36
    IF          shift, and go to state 9
    SWITCH      shift, and go to state 10
    FOR         shift, and go to state 11
    WHILE       shift, and go to state 12

    stmt_wo_func     go to state 246
    var_decl         go to state 17
    arith            go to state 18
    int_arith        go to state 19
    int_arith_arg    go to state 20
    float_arith      go to state 21
    float_arith_arg  go to state 22
    func_call        go to state 23
    body             go to state 251
    if_else          go to state 26
    mif              go to state 27
    uif              go to state 28
    simple_stmts     go to state 40
    simple_stmt      go to state 248
    switch_case      go to state 30
    for_loop         go to state 31
    while_loop       go to state 32


State 216

   66 func_def: VOID ID LP def_arg_list RP stmt_wo_func .

    $default  reduce using rule 66 (func_def)


State 217

   73 def_arg_list: def_arg COMMA def_arg_list .

    $default  reduce using rule 73 (def_arg_list)


State 218

   20 int_id_assign_list: ID .
   21                   | ID . EQ INT
   22                   | ID . EQ int_arith
   23                   | ID . EQ func_call
   24                   | ID . EQ int_id_assign_list
   40 int_arith_arg: ID .
   54 func_call: ID . LP call_arg_list RP

    EQ  shift, and go to state 174
    LP  shift, and go to state 53

    COMMA     reduce using rule 20 (int_id_assign_list)
    SEMI      reduce using rule 20 (int_id_assign_list)
    $default  reduce using rule 40 (int_arith_arg)


State 219

   21 int_id_assign_list: ID EQ INT .
   41 int_arith_arg: INT .

    COMMA     reduce using rule 21 (int_id_assign_list)
    SEMI      reduce using rule 21 (int_id_assign_list)
    RP        reduce using rule 21 (int_id_assign_list)
    $default  reduce using rule 41 (int_arith_arg)


State 220

   24 int_id_assign_list: ID EQ int_id_assign_list .

    $default  reduce using rule 24 (int_id_assign_list)


State 221

   22 int_id_assign_list: ID EQ int_arith .
   42 int_arith_arg: int_arith .

    COMMA     reduce using rule 22 (int_id_assign_list)
    SEMI      reduce using rule 22 (int_id_assign_list)
    RP        reduce using rule 22 (int_id_assign_list)
    $default  reduce using rule 42 (int_arith_arg)


State 222

   23 int_id_assign_list: ID EQ func_call .
   43 int_arith_arg: func_call .

    COMMA     reduce using rule 23 (int_id_assign_list)
    SEMI      reduce using rule 23 (int_id_assign_list)
    $default  reduce using rule 43 (int_arith_arg)


State 223

   69 func_def: INT_DECL ID LP def_arg_list RP LC . body RC
   82 mif: LC . simple_stmts RC

    LC          shift, and go to state 1
    LP          shift, and go to state 2
    INT_DECL    shift, and go to state 33
    FLOAT_DECL  shift, and go to state 34
    ID          shift, and go to state 6
    INT         shift, and go to state 35
    FLOAT       shift, and go to state 36
    IF          shift, and go to state 9
    SWITCH      shift, and go to state 10
    FOR         shift, and go to state 11
    WHILE       shift, and go to state 12

    stmt_wo_func     go to state 246
    var_decl         go to state 17
    arith            go to state 18
    int_arith        go to state 19
    int_arith_arg    go to state 20
    float_arith      go to state 21
    float_arith_arg  go to state 22
    func_call        go to state 23
    body             go to state 252
    if_else          go to state 26
    mif              go to state 27
    uif              go to state 28
    simple_stmts     go to state 40
    simple_stmt      go to state 248
    switch_case      go to state 30
    for_loop         go to state 31
    while_loop       go to state 32


State 224

   68 func_def: INT_DECL ID LP def_arg_list RP stmt_wo_func .

    $default  reduce using rule 68 (func_def)


State 225

   29 float_id_assign_list: ID .
   30                     | ID . EQ FLOAT
   31                     | ID . EQ float_arith
   32                     | ID . EQ func_call
   33                     | ID . EQ float_id_assign_list
   49 float_arith_arg: ID .
   54 func_call: ID . LP call_arg_list RP

    EQ  shift, and go to state 178
    LP  shift, and go to state 53

    COMMA     reduce using rule 29 (float_id_assign_list)
    SEMI      reduce using rule 29 (float_id_assign_list)
    $default  reduce using rule 49 (float_arith_arg)


State 226

   30 float_id_assign_list: ID EQ FLOAT .
   50 float_arith_arg: FLOAT .

    COMMA     reduce using rule 30 (float_id_assign_list)
    SEMI      reduce using rule 30 (float_id_assign_list)
    RP        reduce using rule 30 (float_id_assign_list)
    $default  reduce using rule 50 (float_arith_arg)


State 227

   33 float_id_assign_list: ID EQ float_id_assign_list .

    $default  reduce using rule 33 (float_id_assign_list)


State 228

   31 float_id_assign_list: ID EQ float_arith .
   51 float_arith_arg: float_arith .

    COMMA     reduce using rule 31 (float_id_assign_list)
    SEMI      reduce using rule 31 (float_id_assign_list)
    RP        reduce using rule 31 (float_id_assign_list)
    $default  reduce using rule 51 (float_arith_arg)


State 229

   32 float_id_assign_list: ID EQ func_call .
   52 float_arith_arg: func_call .

    COMMA     reduce using rule 32 (float_id_assign_list)
    SEMI      reduce using rule 32 (float_id_assign_list)
    $default  reduce using rule 52 (float_arith_arg)


State 230

   71 func_def: FLOAT_DECL ID LP def_arg_list RP LC . body RC
   82 mif: LC . simple_stmts RC

    LC          shift, and go to state 1
    LP          shift, and go to state 2
    INT_DECL    shift, and go to state 33
    FLOAT_DECL  shift, and go to state 34
    ID          shift, and go to state 6
    INT         shift, and go to state 35
    FLOAT       shift, and go to state 36
    IF          shift, and go to state 9
    SWITCH      shift, and go to state 10
    FOR         shift, and go to state 11
    WHILE       shift, and go to state 12

    stmt_wo_func     go to state 246
    var_decl         go to state 17
    arith            go to state 18
    int_arith        go to state 19
    int_arith_arg    go to state 20
    float_arith      go to state 21
    float_arith_arg  go to state 22
    func_call        go to state 23
    body             go to state 253
    if_else          go to state 26
    mif              go to state 27
    uif              go to state 28
    simple_stmts     go to state 40
    simple_stmt      go to state 248
    switch_case      go to state 30
    for_loop         go to state 31
    while_loop       go to state 32


State 231

   70 func_def: FLOAT_DECL ID LP def_arg_list RP stmt_wo_func .

    $default  reduce using rule 70 (func_def)


State 232

   58 func_decl: INT ID LP decl_arg_list RP SEMI .

    $default  reduce using rule 58 (func_decl)


State 233

   59 func_decl: FLOAT ID LP decl_arg_list RP SEMI .

    $default  reduce using rule 59 (func_decl)


State 234

   36 int_arith: int_arith_arg . PLUS int_arith_arg
   37          | int_arith_arg . MINUS int_arith_arg
   38          | int_arith_arg . MULT int_arith_arg
   39          | int_arith_arg . DIV int_arith_arg
   99 expr: int_arith_arg EQ EQ int_arith_arg .

    PLUS   shift, and go to state 64
    MINUS  shift, and go to state 65
    MULT   shift, and go to state 66
    DIV    shift, and go to state 67

    $default  reduce using rule 99 (expr)


State 235

   45 float_arith: float_arith_arg . PLUS float_arith_arg
   46            | float_arith_arg . MINUS float_arith_arg
   47            | float_arith_arg . MULT float_arith_arg
   48            | float_arith_arg . DIV float_arith_arg
  105 expr: float_arith_arg EQ EQ float_arith_arg .

    PLUS   shift, and go to state 69
    MINUS  shift, and go to state 70
    MULT   shift, and go to state 71
    DIV    shift, and go to state 72

    $default  reduce using rule 105 (expr)


State 236

   80 mif: IF LP cond RP mif ELSE . mif
   84 uif: IF LP cond RP mif ELSE . uif

    LC          shift, and go to state 1
    LP          shift, and go to state 2
    INT_DECL    shift, and go to state 33
    FLOAT_DECL  shift, and go to state 34
    ID          shift, and go to state 6
    INT         shift, and go to state 35
    FLOAT       shift, and go to state 36
    IF          shift, and go to state 9
    SWITCH      shift, and go to state 10

    var_decl         go to state 37
    arith            go to state 38
    int_arith        go to state 19
    int_arith_arg    go to state 20
    float_arith      go to state 21
    float_arith_arg  go to state 22
    func_call        go to state 39
    mif              go to state 254
    uif              go to state 255
    simple_stmt      go to state 29
    switch_case      go to state 42


State 237

  109 switch_case: SWITCH LP ID RP LC cases . RC

    RC  shift, and go to state 256


State 238

  114 case: CASE LP . INT RP COL body break
  115     | CASE LP . INT RP COL LC body RC break
  118     | CASE LP . FLOAT RP COL body break
  119     | CASE LP . FLOAT RP COL LC body RC break

    INT    shift, and go to state 257
    FLOAT  shift, and go to state 258


State 239

  112 case: CASE INT . COL body break
  113     | CASE INT . COL LC body RC break

    COL  shift, and go to state 259


State 240

  116 case: CASE FLOAT . COL body break
  117     | CASE FLOAT . COL LC body RC break

    COL  shift, and go to state 260


State 241

  108 switch_case: SWITCH ID COL LC cases RC .

    $default  reduce using rule 108 (switch_case)


State 242

  121 default: DEFAULT . COL body break
  122        | DEFAULT . COL LC body RC break

    COL  shift, and go to state 261


State 243

  111 cases: case cases .

    $default  reduce using rule 111 (cases)


State 244

  110 cases: case default .

    $default  reduce using rule 110 (cases)


State 245

   21 int_id_assign_list: ID EQ . INT
   22                   | ID EQ . int_arith
   23                   | ID EQ . func_call
   24                   | ID EQ . int_id_assign_list
   30 float_id_assign_list: ID EQ . FLOAT
   31                     | ID EQ . float_arith
   32                     | ID EQ . func_call
   33                     | ID EQ . float_id_assign_list

    LP     shift, and go to state 2
    ID     shift, and go to state 262
    INT    shift, and go to state 219
    FLOAT  shift, and go to state 226

    int_id_assign_list    go to state 220
    float_id_assign_list  go to state 227
    int_arith             go to state 221
    int_arith_arg         go to state 20
    float_arith           go to state 228
    float_arith_arg       go to state 22
    func_call             go to state 263


State 246

   76 body: stmt_wo_func .
   77     | stmt_wo_func . body

    LC          shift, and go to state 1
    LP          shift, and go to state 2
    INT_DECL    shift, and go to state 33
    FLOAT_DECL  shift, and go to state 34
    ID          shift, and go to state 6
    INT         shift, and go to state 35
    FLOAT       shift, and go to state 36
    IF          shift, and go to state 9
    SWITCH      shift, and go to state 10
    FOR         shift, and go to state 11
    WHILE       shift, and go to state 12

    $default  reduce using rule 76 (body)

    stmt_wo_func     go to state 246
    var_decl         go to state 17
    arith            go to state 18
    int_arith        go to state 19
    int_arith_arg    go to state 20
    float_arith      go to state 21
    float_arith_arg  go to state 22
    func_call        go to state 23
    body             go to state 264
    if_else          go to state 26
    mif              go to state 27
    uif              go to state 28
    simple_stmt      go to state 29
    switch_case      go to state 30
    for_loop         go to state 31
    while_loop       go to state 32


State 247

  126 for_loop: FOR LP for_expr RP LC body . RC

    RC  shift, and go to state 265


State 248

   81 mif: simple_stmt .
   85 simple_stmts: simple_stmt .
   86             | simple_stmt . simple_stmts

    LP          shift, and go to state 2
    INT_DECL    shift, and go to state 33
    FLOAT_DECL  shift, and go to state 34
    ID          shift, and go to state 6
    INT         shift, and go to state 35
    FLOAT       shift, and go to state 36
    SWITCH      shift, and go to state 10

    RC          reduce using rule 81 (mif)
    RC          [reduce using rule 85 (simple_stmts)]
    LP          [reduce using rule 81 (mif)]
    INT_DECL    [reduce using rule 81 (mif)]
    FLOAT_DECL  [reduce using rule 81 (mif)]
    ID          [reduce using rule 81 (mif)]
    INT         [reduce using rule 81 (mif)]
    FLOAT       [reduce using rule 81 (mif)]
    SWITCH      [reduce using rule 81 (mif)]
    $default    reduce using rule 81 (mif)

    var_decl         go to state 37
    arith            go to state 38
    int_arith        go to state 19
    int_arith_arg    go to state 20
    float_arith      go to state 21
    float_arith_arg  go to state 22
    func_call        go to state 39
    simple_stmts     go to state 76
    simple_stmt      go to state 41
    switch_case      go to state 42


State 249

  135 for_third: ID EQ . int_id_assign_list
  136          | ID EQ . float_id_assign_list

    ID  shift, and go to state 205

    int_id_assign_list    go to state 266
    float_id_assign_list  go to state 267


State 250

  138 while_loop: WHILE LP cond RP LC body . RC

    RC  shift, and go to state 268


State 251

   67 func_def: VOID ID LP def_arg_list RP LC body . RC

    RC  shift, and go to state 269


State 252

   69 func_def: INT_DECL ID LP def_arg_list RP LC body . RC

    RC  shift, and go to state 270


State 253

   71 func_def: FLOAT_DECL ID LP def_arg_list RP LC body . RC

    RC  shift, and go to state 271


State 254

   80 mif: IF LP cond RP mif ELSE mif .

    $default  reduce using rule 80 (mif)


State 255

   84 uif: IF LP cond RP mif ELSE uif .

    $default  reduce using rule 84 (uif)


State 256

  109 switch_case: SWITCH LP ID RP LC cases RC .

    $default  reduce using rule 109 (switch_case)


State 257

  114 case: CASE LP INT . RP COL body break
  115     | CASE LP INT . RP COL LC body RC break

    RP  shift, and go to state 272


State 258

  118 case: CASE LP FLOAT . RP COL body break
  119     | CASE LP FLOAT . RP COL LC body RC break

    RP  shift, and go to state 273


State 259

  112 case: CASE INT COL . body break
  113     | CASE INT COL . LC body RC break

    LC          shift, and go to state 274
    LP          shift, and go to state 2
    INT_DECL    shift, and go to state 33
    FLOAT_DECL  shift, and go to state 34
    ID          shift, and go to state 6
    INT         shift, and go to state 35
    FLOAT       shift, and go to state 36
    IF          shift, and go to state 9
    SWITCH      shift, and go to state 10
    FOR         shift, and go to state 11
    WHILE       shift, and go to state 12

    stmt_wo_func     go to state 246
    var_decl         go to state 17
    arith            go to state 18
    int_arith        go to state 19
    int_arith_arg    go to state 20
    float_arith      go to state 21
    float_arith_arg  go to state 22
    func_call        go to state 23
    body             go to state 275
    if_else          go to state 26
    mif              go to state 27
    uif              go to state 28
    simple_stmt      go to state 29
    switch_case      go to state 30
    for_loop         go to state 31
    while_loop       go to state 32


State 260

  116 case: CASE FLOAT COL . body break
  117     | CASE FLOAT COL . LC body RC break

    LC          shift, and go to state 276
    LP          shift, and go to state 2
    INT_DECL    shift, and go to state 33
    FLOAT_DECL  shift, and go to state 34
    ID          shift, and go to state 6
    INT         shift, and go to state 35
    FLOAT       shift, and go to state 36
    IF          shift, and go to state 9
    SWITCH      shift, and go to state 10
    FOR         shift, and go to state 11
    WHILE       shift, and go to state 12

    stmt_wo_func     go to state 246
    var_decl         go to state 17
    arith            go to state 18
    int_arith        go to state 19
    int_arith_arg    go to state 20
    float_arith      go to state 21
    float_arith_arg  go to state 22
    func_call        go to state 23
    body             go to state 277
    if_else          go to state 26
    mif              go to state 27
    uif              go to state 28
    simple_stmt      go to state 29
    switch_case      go to state 30
    for_loop         go to state 31
    while_loop       go to state 32


State 261

  121 default: DEFAULT COL . body break
  122        | DEFAULT COL . LC body RC break

    LC          shift, and go to state 278
    LP          shift, and go to state 2
    INT_DECL    shift, and go to state 33
    FLOAT_DECL  shift, and go to state 34
    ID          shift, and go to state 6
    INT         shift, and go to state 35
    FLOAT       shift, and go to state 36
    IF          shift, and go to state 9
    SWITCH      shift, and go to state 10
    FOR         shift, and go to state 11
    WHILE       shift, and go to state 12

    stmt_wo_func     go to state 246
    var_decl         go to state 17
    arith            go to state 18
    int_arith        go to state 19
    int_arith_arg    go to state 20
    float_arith      go to state 21
    float_arith_arg  go to state 22
    func_call        go to state 23
    body             go to state 279
    if_else          go to state 26
    mif              go to state 27
    uif              go to state 28
    simple_stmt      go to state 29
    switch_case      go to state 30
    for_loop         go to state 31
    while_loop       go to state 32


State 262

   20 int_id_assign_list: ID .
   21                   | ID . EQ INT
   22                   | ID . EQ int_arith
   23                   | ID . EQ func_call
   24                   | ID . EQ int_id_assign_list
   29 float_id_assign_list: ID .
   30                     | ID . EQ FLOAT
   31                     | ID . EQ float_arith
   32                     | ID . EQ func_call
   33                     | ID . EQ float_id_assign_list
   40 int_arith_arg: ID .
   49 float_arith_arg: ID .
   54 func_call: ID . LP call_arg_list RP

    EQ  shift, and go to state 245
    LP  shift, and go to state 53

    PLUS      reduce using rule 40 (int_arith_arg)
    PLUS      [reduce using rule 49 (float_arith_arg)]
    MINUS     reduce using rule 40 (int_arith_arg)
    MINUS     [reduce using rule 49 (float_arith_arg)]
    MULT      reduce using rule 40 (int_arith_arg)
    MULT      [reduce using rule 49 (float_arith_arg)]
    DIV       reduce using rule 40 (int_arith_arg)
    DIV       [reduce using rule 49 (float_arith_arg)]
    COMMA     reduce using rule 20 (int_id_assign_list)
    COMMA     [reduce using rule 29 (float_id_assign_list)]
    SEMI      reduce using rule 20 (int_id_assign_list)
    SEMI      [reduce using rule 29 (float_id_assign_list)]
    RP        reduce using rule 20 (int_id_assign_list)
    RP        [reduce using rule 29 (float_id_assign_list)]
    $default  reduce using rule 40 (int_arith_arg)


State 263

   23 int_id_assign_list: ID EQ func_call .
   32 float_id_assign_list: ID EQ func_call .
   43 int_arith_arg: func_call .
   52 float_arith_arg: func_call .

    PLUS      reduce using rule 43 (int_arith_arg)
    PLUS      [reduce using rule 52 (float_arith_arg)]
    MINUS     reduce using rule 43 (int_arith_arg)
    MINUS     [reduce using rule 52 (float_arith_arg)]
    MULT      reduce using rule 43 (int_arith_arg)
    MULT      [reduce using rule 52 (float_arith_arg)]
    DIV       reduce using rule 43 (int_arith_arg)
    DIV       [reduce using rule 52 (float_arith_arg)]
    COMMA     reduce using rule 23 (int_id_assign_list)
    COMMA     [reduce using rule 32 (float_id_assign_list)]
    SEMI      reduce using rule 23 (int_id_assign_list)
    SEMI      [reduce using rule 32 (float_id_assign_list)]
    RP        reduce using rule 23 (int_id_assign_list)
    RP        [reduce using rule 32 (float_id_assign_list)]
    $default  reduce using rule 43 (int_arith_arg)


State 264

   77 body: stmt_wo_func body .

    $default  reduce using rule 77 (body)


State 265

  126 for_loop: FOR LP for_expr RP LC body RC .

    $default  reduce using rule 126 (for_loop)


State 266

  135 for_third: ID EQ int_id_assign_list .

    $default  reduce using rule 135 (for_third)


State 267

  136 for_third: ID EQ float_id_assign_list .

    $default  reduce using rule 136 (for_third)


State 268

  138 while_loop: WHILE LP cond RP LC body RC .

    $default  reduce using rule 138 (while_loop)


State 269

   67 func_def: VOID ID LP def_arg_list RP LC body RC .

    $default  reduce using rule 67 (func_def)


State 270

   69 func_def: INT_DECL ID LP def_arg_list RP LC body RC .

    $default  reduce using rule 69 (func_def)


State 271

   71 func_def: FLOAT_DECL ID LP def_arg_list RP LC body RC .

    $default  reduce using rule 71 (func_def)


State 272

  114 case: CASE LP INT RP . COL body break
  115     | CASE LP INT RP . COL LC body RC break

    COL  shift, and go to state 280


State 273

  118 case: CASE LP FLOAT RP . COL body break
  119     | CASE LP FLOAT RP . COL LC body RC break

    COL  shift, and go to state 281


State 274

   82 mif: LC . simple_stmts RC
  113 case: CASE INT COL LC . body RC break

    LC          shift, and go to state 1
    LP          shift, and go to state 2
    INT_DECL    shift, and go to state 33
    FLOAT_DECL  shift, and go to state 34
    ID          shift, and go to state 6
    INT         shift, and go to state 35
    FLOAT       shift, and go to state 36
    IF          shift, and go to state 9
    SWITCH      shift, and go to state 10
    FOR         shift, and go to state 11
    WHILE       shift, and go to state 12

    stmt_wo_func     go to state 246
    var_decl         go to state 17
    arith            go to state 18
    int_arith        go to state 19
    int_arith_arg    go to state 20
    float_arith      go to state 21
    float_arith_arg  go to state 22
    func_call        go to state 23
    body             go to state 282
    if_else          go to state 26
    mif              go to state 27
    uif              go to state 28
    simple_stmts     go to state 40
    simple_stmt      go to state 248
    switch_case      go to state 30
    for_loop         go to state 31
    while_loop       go to state 32


State 275

  112 case: CASE INT COL body . break

    BREAK  shift, and go to state 283

    $default  reduce using rule 123 (break)

    break  go to state 284


State 276

   82 mif: LC . simple_stmts RC
  117 case: CASE FLOAT COL LC . body RC break

    LC          shift, and go to state 1
    LP          shift, and go to state 2
    INT_DECL    shift, and go to state 33
    FLOAT_DECL  shift, and go to state 34
    ID          shift, and go to state 6
    INT         shift, and go to state 35
    FLOAT       shift, and go to state 36
    IF          shift, and go to state 9
    SWITCH      shift, and go to state 10
    FOR         shift, and go to state 11
    WHILE       shift, and go to state 12

    stmt_wo_func     go to state 246
    var_decl         go to state 17
    arith            go to state 18
    int_arith        go to state 19
    int_arith_arg    go to state 20
    float_arith      go to state 21
    float_arith_arg  go to state 22
    func_call        go to state 23
    body             go to state 285
    if_else          go to state 26
    mif              go to state 27
    uif              go to state 28
    simple_stmts     go to state 40
    simple_stmt      go to state 248
    switch_case      go to state 30
    for_loop         go to state 31
    while_loop       go to state 32


State 277

  116 case: CASE FLOAT COL body . break

    BREAK  shift, and go to state 283

    $default  reduce using rule 123 (break)

    break  go to state 286


State 278

   82 mif: LC . simple_stmts RC
  122 default: DEFAULT COL LC . body RC break

    LC          shift, and go to state 1
    LP          shift, and go to state 2
    INT_DECL    shift, and go to state 33
    FLOAT_DECL  shift, and go to state 34
    ID          shift, and go to state 6
    INT         shift, and go to state 35
    FLOAT       shift, and go to state 36
    IF          shift, and go to state 9
    SWITCH      shift, and go to state 10
    FOR         shift, and go to state 11
    WHILE       shift, and go to state 12

    stmt_wo_func     go to state 246
    var_decl         go to state 17
    arith            go to state 18
    int_arith        go to state 19
    int_arith_arg    go to state 20
    float_arith      go to state 21
    float_arith_arg  go to state 22
    func_call        go to state 23
    body             go to state 287
    if_else          go to state 26
    mif              go to state 27
    uif              go to state 28
    simple_stmts     go to state 40
    simple_stmt      go to state 248
    switch_case      go to state 30
    for_loop         go to state 31
    while_loop       go to state 32


State 279

  121 default: DEFAULT COL body . break

    BREAK  shift, and go to state 283

    $default  reduce using rule 123 (break)

    break  go to state 288


State 280

  114 case: CASE LP INT RP COL . body break
  115     | CASE LP INT RP COL . LC body RC break

    LC          shift, and go to state 289
    LP          shift, and go to state 2
    INT_DECL    shift, and go to state 33
    FLOAT_DECL  shift, and go to state 34
    ID          shift, and go to state 6
    INT         shift, and go to state 35
    FLOAT       shift, and go to state 36
    IF          shift, and go to state 9
    SWITCH      shift, and go to state 10
    FOR         shift, and go to state 11
    WHILE       shift, and go to state 12

    stmt_wo_func     go to state 246
    var_decl         go to state 17
    arith            go to state 18
    int_arith        go to state 19
    int_arith_arg    go to state 20
    float_arith      go to state 21
    float_arith_arg  go to state 22
    func_call        go to state 23
    body             go to state 290
    if_else          go to state 26
    mif              go to state 27
    uif              go to state 28
    simple_stmt      go to state 29
    switch_case      go to state 30
    for_loop         go to state 31
    while_loop       go to state 32


State 281

  118 case: CASE LP FLOAT RP COL . body break
  119     | CASE LP FLOAT RP COL . LC body RC break

    LC          shift, and go to state 291
    LP          shift, and go to state 2
    INT_DECL    shift, and go to state 33
    FLOAT_DECL  shift, and go to state 34
    ID          shift, and go to state 6
    INT         shift, and go to state 35
    FLOAT       shift, and go to state 36
    IF          shift, and go to state 9
    SWITCH      shift, and go to state 10
    FOR         shift, and go to state 11
    WHILE       shift, and go to state 12

    stmt_wo_func     go to state 246
    var_decl         go to state 17
    arith            go to state 18
    int_arith        go to state 19
    int_arith_arg    go to state 20
    float_arith      go to state 21
    float_arith_arg  go to state 22
    func_call        go to state 23
    body             go to state 292
    if_else          go to state 26
    mif              go to state 27
    uif              go to state 28
    simple_stmt      go to state 29
    switch_case      go to state 30
    for_loop         go to state 31
    while_loop       go to state 32


State 282

  113 case: CASE INT COL LC body . RC break

    RC  shift, and go to state 293


State 283

  124 break: BREAK . SEMI

    SEMI  shift, and go to state 294


State 284

  112 case: CASE INT COL body break .

    $default  reduce using rule 112 (case)


State 285

  117 case: CASE FLOAT COL LC body . RC break

    RC  shift, and go to state 295


State 286

  116 case: CASE FLOAT COL body break .

    $default  reduce using rule 116 (case)


State 287

  122 default: DEFAULT COL LC body . RC break

    RC  shift, and go to state 296


State 288

  121 default: DEFAULT COL body break .

    $default  reduce using rule 121 (default)


State 289

   82 mif: LC . simple_stmts RC
  115 case: CASE LP INT RP COL LC . body RC break

    LC          shift, and go to state 1
    LP          shift, and go to state 2
    INT_DECL    shift, and go to state 33
    FLOAT_DECL  shift, and go to state 34
    ID          shift, and go to state 6
    INT         shift, and go to state 35
    FLOAT       shift, and go to state 36
    IF          shift, and go to state 9
    SWITCH      shift, and go to state 10
    FOR         shift, and go to state 11
    WHILE       shift, and go to state 12

    stmt_wo_func     go to state 246
    var_decl         go to state 17
    arith            go to state 18
    int_arith        go to state 19
    int_arith_arg    go to state 20
    float_arith      go to state 21
    float_arith_arg  go to state 22
    func_call        go to state 23
    body             go to state 297
    if_else          go to state 26
    mif              go to state 27
    uif              go to state 28
    simple_stmts     go to state 40
    simple_stmt      go to state 248
    switch_case      go to state 30
    for_loop         go to state 31
    while_loop       go to state 32


State 290

  114 case: CASE LP INT RP COL body . break

    BREAK  shift, and go to state 283

    $default  reduce using rule 123 (break)

    break  go to state 298


State 291

   82 mif: LC . simple_stmts RC
  119 case: CASE LP FLOAT RP COL LC . body RC break

    LC          shift, and go to state 1
    LP          shift, and go to state 2
    INT_DECL    shift, and go to state 33
    FLOAT_DECL  shift, and go to state 34
    ID          shift, and go to state 6
    INT         shift, and go to state 35
    FLOAT       shift, and go to state 36
    IF          shift, and go to state 9
    SWITCH      shift, and go to state 10
    FOR         shift, and go to state 11
    WHILE       shift, and go to state 12

    stmt_wo_func     go to state 246
    var_decl         go to state 17
    arith            go to state 18
    int_arith        go to state 19
    int_arith_arg    go to state 20
    float_arith      go to state 21
    float_arith_arg  go to state 22
    func_call        go to state 23
    body             go to state 299
    if_else          go to state 26
    mif              go to state 27
    uif              go to state 28
    simple_stmts     go to state 40
    simple_stmt      go to state 248
    switch_case      go to state 30
    for_loop         go to state 31
    while_loop       go to state 32


State 292

  118 case: CASE LP FLOAT RP COL body . break

    BREAK  shift, and go to state 283

    $default  reduce using rule 123 (break)

    break  go to state 300


State 293

  113 case: CASE INT COL LC body RC . break

    BREAK  shift, and go to state 283

    $default  reduce using rule 123 (break)

    break  go to state 301


State 294

  124 break: BREAK SEMI .

    $default  reduce using rule 124 (break)


State 295

  117 case: CASE FLOAT COL LC body RC . break

    BREAK  shift, and go to state 283

    $default  reduce using rule 123 (break)

    break  go to state 302


State 296

  122 default: DEFAULT COL LC body RC . break

    BREAK  shift, and go to state 283

    $default  reduce using rule 123 (break)

    break  go to state 303


State 297

  115 case: CASE LP INT RP COL LC body . RC break

    RC  shift, and go to state 304


State 298

  114 case: CASE LP INT RP COL body break .

    $default  reduce using rule 114 (case)


State 299

  119 case: CASE LP FLOAT RP COL LC body . RC break

    RC  shift, and go to state 305


State 300

  118 case: CASE LP FLOAT RP COL body break .

    $default  reduce using rule 118 (case)


State 301

  113 case: CASE INT COL LC body RC break .

    $default  reduce using rule 113 (case)


State 302

  117 case: CASE FLOAT COL LC body RC break .

    $default  reduce using rule 117 (case)


State 303

  122 default: DEFAULT COL LC body RC break .

    $default  reduce using rule 122 (default)


State 304

  115 case: CASE LP INT RP COL LC body RC . break

    BREAK  shift, and go to state 283

    $default  reduce using rule 123 (break)

    break  go to state 306


State 305

  119 case: CASE LP FLOAT RP COL LC body RC . break

    BREAK  shift, and go to state 283

    $default  reduce using rule 123 (break)

    break  go to state 307


State 306

  115 case: CASE LP INT RP COL LC body RC break .

    $default  reduce using rule 115 (case)


State 307

  119 case: CASE LP FLOAT RP COL LC body RC break .

    $default  reduce using rule 119 (case)
