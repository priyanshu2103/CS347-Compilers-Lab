Terminals unused in grammar

   LE
   GE
   NEQ
   GT
   EXCL
   IF
   ELSE


Grammar

    0 $accept: stmts $end

    1 stmts: stmt
    2      | stmt stmts

    3 stmt: stmt_wo_func
    4     | stmt_with_func

    5 stmt_wo_func: arith
    6             | func_call SEMI
    7             | switch_case
    8             | for_loop
    9             | while_loop

   10 stmt_with_func: func_decl
   11               | func_def
   12               | var_or_func

   13 var_or_func: type id_list
   14            | type ID LP def_arg_temp RP SEMI
   15            | type ID LP def_arg_temp RP func_def_aux

   16 type: INT_DECL
   17     | FLOAT_DECL

   18 $@1: %empty

   19 var_decl: INT_DECL $@1 id_list

   20 $@2: %empty

   21 var_decl: FLOAT_DECL $@2 id_list

   22 id_list: assign SEMI
   23        | assign COMMA id_list

   24 assign: ID
   25       | ID EQ id_assign_list

   26 id_assign_list: ID
   27               | ID EQ INT
   28               | ID EQ FLOAT
   29               | ID EQ arith_expr
   30               | ID EQ func_call
   31               | ID EQ id_assign_list

   32 arith: arith_expr SEMI

   33 arith_expr: arith_arg PLUS arith_arg
   34           | arith_arg MINUS arith_arg
   35           | arith_arg MULT arith_arg
   36           | arith_arg DIV arith_arg
   37           | arith_arg MOD arith_arg
   38           | arith_arg PLUS arith_expr
   39           | arith_arg MINUS arith_expr
   40           | arith_arg MULT arith_expr
   41           | arith_arg DIV arith_expr
   42           | arith_arg MOD arith_expr

   43 arith_arg: ID
   44          | INT
   45          | FLOAT
   46          | func_call
   47          | LP arith_expr RP

   48 @3: %empty

   49 func_call: ID @3 LP call_arg_list RP

   50 call_arg_list: %empty
   51              | call_arg
   52              | call_arg COMMA call_arg_list

   53 call_arg: ID
   54         | INT
   55         | FLOAT

   56 func_decl: VOID ID LP def_arg_temp RP SEMI

   57 func_def: VOID ID LP def_arg_temp RP func_def_aux

   58 def_arg_temp: %empty

   59 $@4: %empty

   60 def_arg_temp: $@4 def_arg_list

   61 def_arg_list: def_arg
   62             | def_arg COMMA def_arg_list

   63 def_arg: INT_DECL ID
   64        | FLOAT_DECL ID

   65 func_def_aux: stmt_wo_func
   66             | LC body RC

   67 body: stmt_wo_func
   68     | stmt_wo_func body

   69 cond: and_expr
   70     | and_expr OR cond

   71 and_expr: expr
   72         | expr AND and_expr

   73 expr: ID LT ID

   74 switch_case: SWITCH ID COL LC cases RC
   75            | SWITCH LP ID RP LC cases RC

   76 cases: case default
   77      | case cases

   78 case: CASE INT COL body break
   79     | CASE INT COL LC body RC break
   80     | CASE LP INT RP COL body break
   81     | CASE LP INT RP COL LC body RC break
   82     | CASE FLOAT COL body break
   83     | CASE FLOAT COL LC body RC break
   84     | CASE LP FLOAT RP COL body break
   85     | CASE LP FLOAT RP COL LC body RC break

   86 default: %empty
   87        | DEFAULT COL body break
   88        | DEFAULT COL LC body RC break

   89 break: %empty
   90      | BREAK SEMI

   91 for_loop: FOR LP for_expr RP func_def_aux

   92 for_expr: for_first for_second for_third

   93 for_first: %empty
   94          | var_decl

   95 for_second: SEMI
   96           | cond SEMI

   97 for_third: %empty
   98          | ID EQ id_assign_list

   99 while_loop: WHILE LP cond RP func_def_aux


Terminals, with rules where they appear

$end (0) 0
error (256)
PLUS (258) 33 38
MINUS (259) 34 39
MULT (260) 35 40
DIV (261) 36 41
MOD (262) 37 42
LE (263)
GE (264)
EQ (265) 25 27 28 29 30 31 98
NEQ (266)
LT (267) 73
GT (268)
AND (269) 72
OR (270) 70
EXCL (271)
COMMA (272) 23 52 62
COL (273) 74 78 79 80 81 82 83 84 85 87 88
SEMI (274) 6 14 22 32 56 90 95 96
LC (275) 66 74 75 79 81 83 85 88
RC (276) 66 74 75 79 81 83 85 88
LP (277) 14 15 47 49 56 57 75 80 81 84 85 91 99
RP (278) 14 15 47 49 56 57 75 80 81 84 85 91 99
VOID (279) 56 57
INT_DECL (280) 16 19 63
FLOAT_DECL (281) 17 21 64
ID (282) 14 15 24 25 26 27 28 29 30 31 43 49 53 56 57 63 64 73 74 75
    98
INT (283) 27 44 54 78 79 80 81
FLOAT (284) 28 45 55 82 83 84 85
IF (285)
ELSE (286)
SWITCH (287) 74 75
CASE (288) 78 79 80 81 82 83 84 85
FOR (289) 91
WHILE (290) 99
BREAK (291) 90
DEFAULT (292) 87 88


Nonterminals, with rules where they appear

$accept (38)
    on left: 0
stmts (39)
    on left: 1 2, on right: 0 2
stmt (40)
    on left: 3 4, on right: 1 2
stmt_wo_func (41)
    on left: 5 6 7 8 9, on right: 3 65 67 68
stmt_with_func (42)
    on left: 10 11 12, on right: 4
var_or_func (43)
    on left: 13 14 15, on right: 12
type (44)
    on left: 16 17, on right: 13 14 15
var_decl (45)
    on left: 19 21, on right: 94
$@1 (46)
    on left: 18, on right: 19
$@2 (47)
    on left: 20, on right: 21
id_list (48)
    on left: 22 23, on right: 13 19 21 23
assign (49)
    on left: 24 25, on right: 22 23
id_assign_list (50)
    on left: 26 27 28 29 30 31, on right: 25 31 98
arith (51)
    on left: 32, on right: 5
arith_expr (52)
    on left: 33 34 35 36 37 38 39 40 41 42, on right: 29 32 38 39 40
    41 42 47
arith_arg (53)
    on left: 43 44 45 46 47, on right: 33 34 35 36 37 38 39 40 41 42
func_call (54)
    on left: 49, on right: 6 30 46
@3 (55)
    on left: 48, on right: 49
call_arg_list (56)
    on left: 50 51 52, on right: 49 52
call_arg (57)
    on left: 53 54 55, on right: 51 52
func_decl (58)
    on left: 56, on right: 10
func_def (59)
    on left: 57, on right: 11
def_arg_temp (60)
    on left: 58 60, on right: 14 15 56 57
$@4 (61)
    on left: 59, on right: 60
def_arg_list (62)
    on left: 61 62, on right: 60 62
def_arg (63)
    on left: 63 64, on right: 61 62
func_def_aux (64)
    on left: 65 66, on right: 15 57 91 99
body (65)
    on left: 67 68, on right: 66 68 78 79 80 81 82 83 84 85 87 88
cond (66)
    on left: 69 70, on right: 70 96 99
and_expr (67)
    on left: 71 72, on right: 69 70 72
expr (68)
    on left: 73, on right: 71 72
switch_case (69)
    on left: 74 75, on right: 7
cases (70)
    on left: 76 77, on right: 74 75 77
case (71)
    on left: 78 79 80 81 82 83 84 85, on right: 76 77
default (72)
    on left: 86 87 88, on right: 76
break (73)
    on left: 89 90, on right: 78 79 80 81 82 83 84 85 87 88
for_loop (74)
    on left: 91, on right: 8
for_expr (75)
    on left: 92, on right: 91
for_first (76)
    on left: 93 94, on right: 92
for_second (77)
    on left: 95 96, on right: 92
for_third (78)
    on left: 97 98, on right: 92
while_loop (79)
    on left: 99, on right: 9


State 0

    0 $accept: . stmts $end

    LP          shift, and go to state 1
    VOID        shift, and go to state 2
    INT_DECL    shift, and go to state 3
    FLOAT_DECL  shift, and go to state 4
    ID          shift, and go to state 5
    INT         shift, and go to state 6
    FLOAT       shift, and go to state 7
    SWITCH      shift, and go to state 8
    FOR         shift, and go to state 9
    WHILE       shift, and go to state 10

    stmts           go to state 11
    stmt            go to state 12
    stmt_wo_func    go to state 13
    stmt_with_func  go to state 14
    var_or_func     go to state 15
    type            go to state 16
    arith           go to state 17
    arith_expr      go to state 18
    arith_arg       go to state 19
    func_call       go to state 20
    func_decl       go to state 21
    func_def        go to state 22
    switch_case     go to state 23
    for_loop        go to state 24
    while_loop      go to state 25


State 1

   47 arith_arg: LP . arith_expr RP

    LP     shift, and go to state 1
    ID     shift, and go to state 5
    INT    shift, and go to state 6
    FLOAT  shift, and go to state 7

    arith_expr  go to state 26
    arith_arg   go to state 19
    func_call   go to state 27


State 2

   56 func_decl: VOID . ID LP def_arg_temp RP SEMI
   57 func_def: VOID . ID LP def_arg_temp RP func_def_aux

    ID  shift, and go to state 28


State 3

   16 type: INT_DECL .

    $default  reduce using rule 16 (type)


State 4

   17 type: FLOAT_DECL .

    $default  reduce using rule 17 (type)


State 5

   43 arith_arg: ID .
   49 func_call: ID . @3 LP call_arg_list RP

    LP        reduce using rule 48 (@3)
    $default  reduce using rule 43 (arith_arg)

    @3  go to state 29


State 6

   44 arith_arg: INT .

    $default  reduce using rule 44 (arith_arg)


State 7

   45 arith_arg: FLOAT .

    $default  reduce using rule 45 (arith_arg)


State 8

   74 switch_case: SWITCH . ID COL LC cases RC
   75            | SWITCH . LP ID RP LC cases RC

    LP  shift, and go to state 30
    ID  shift, and go to state 31


State 9

   91 for_loop: FOR . LP for_expr RP func_def_aux

    LP  shift, and go to state 32


State 10

   99 while_loop: WHILE . LP cond RP func_def_aux

    LP  shift, and go to state 33


State 11

    0 $accept: stmts . $end

    $end  shift, and go to state 34


State 12

    1 stmts: stmt .
    2      | stmt . stmts

    LP          shift, and go to state 1
    VOID        shift, and go to state 2
    INT_DECL    shift, and go to state 3
    FLOAT_DECL  shift, and go to state 4
    ID          shift, and go to state 5
    INT         shift, and go to state 6
    FLOAT       shift, and go to state 7
    SWITCH      shift, and go to state 8
    FOR         shift, and go to state 9
    WHILE       shift, and go to state 10

    $default  reduce using rule 1 (stmts)

    stmts           go to state 35
    stmt            go to state 12
    stmt_wo_func    go to state 13
    stmt_with_func  go to state 14
    var_or_func     go to state 15
    type            go to state 16
    arith           go to state 17
    arith_expr      go to state 18
    arith_arg       go to state 19
    func_call       go to state 20
    func_decl       go to state 21
    func_def        go to state 22
    switch_case     go to state 23
    for_loop        go to state 24
    while_loop      go to state 25


State 13

    3 stmt: stmt_wo_func .

    $default  reduce using rule 3 (stmt)


State 14

    4 stmt: stmt_with_func .

    $default  reduce using rule 4 (stmt)


State 15

   12 stmt_with_func: var_or_func .

    $default  reduce using rule 12 (stmt_with_func)


State 16

   13 var_or_func: type . id_list
   14            | type . ID LP def_arg_temp RP SEMI
   15            | type . ID LP def_arg_temp RP func_def_aux

    ID  shift, and go to state 36

    id_list  go to state 37
    assign   go to state 38


State 17

    5 stmt_wo_func: arith .

    $default  reduce using rule 5 (stmt_wo_func)


State 18

   32 arith: arith_expr . SEMI

    SEMI  shift, and go to state 39


State 19

   33 arith_expr: arith_arg . PLUS arith_arg
   34           | arith_arg . MINUS arith_arg
   35           | arith_arg . MULT arith_arg
   36           | arith_arg . DIV arith_arg
   37           | arith_arg . MOD arith_arg
   38           | arith_arg . PLUS arith_expr
   39           | arith_arg . MINUS arith_expr
   40           | arith_arg . MULT arith_expr
   41           | arith_arg . DIV arith_expr
   42           | arith_arg . MOD arith_expr

    PLUS   shift, and go to state 40
    MINUS  shift, and go to state 41
    MULT   shift, and go to state 42
    DIV    shift, and go to state 43
    MOD    shift, and go to state 44


State 20

    6 stmt_wo_func: func_call . SEMI
   46 arith_arg: func_call .

    SEMI  shift, and go to state 45

    $default  reduce using rule 46 (arith_arg)


State 21

   10 stmt_with_func: func_decl .

    $default  reduce using rule 10 (stmt_with_func)


State 22

   11 stmt_with_func: func_def .

    $default  reduce using rule 11 (stmt_with_func)


State 23

    7 stmt_wo_func: switch_case .

    $default  reduce using rule 7 (stmt_wo_func)


State 24

    8 stmt_wo_func: for_loop .

    $default  reduce using rule 8 (stmt_wo_func)


State 25

    9 stmt_wo_func: while_loop .

    $default  reduce using rule 9 (stmt_wo_func)


State 26

   47 arith_arg: LP arith_expr . RP

    RP  shift, and go to state 46


State 27

   46 arith_arg: func_call .

    $default  reduce using rule 46 (arith_arg)


State 28

   56 func_decl: VOID ID . LP def_arg_temp RP SEMI
   57 func_def: VOID ID . LP def_arg_temp RP func_def_aux

    LP  shift, and go to state 47


State 29

   49 func_call: ID @3 . LP call_arg_list RP

    LP  shift, and go to state 48


State 30

   75 switch_case: SWITCH LP . ID RP LC cases RC

    ID  shift, and go to state 49


State 31

   74 switch_case: SWITCH ID . COL LC cases RC

    COL  shift, and go to state 50


State 32

   91 for_loop: FOR LP . for_expr RP func_def_aux

    INT_DECL    shift, and go to state 51
    FLOAT_DECL  shift, and go to state 52

    $default  reduce using rule 93 (for_first)

    var_decl   go to state 53
    for_expr   go to state 54
    for_first  go to state 55


State 33

   99 while_loop: WHILE LP . cond RP func_def_aux

    ID  shift, and go to state 56

    cond      go to state 57
    and_expr  go to state 58
    expr      go to state 59


State 34

    0 $accept: stmts $end .

    $default  accept


State 35

    2 stmts: stmt stmts .

    $default  reduce using rule 2 (stmts)


State 36

   14 var_or_func: type ID . LP def_arg_temp RP SEMI
   15            | type ID . LP def_arg_temp RP func_def_aux
   24 assign: ID .
   25       | ID . EQ id_assign_list

    EQ  shift, and go to state 60
    LP  shift, and go to state 61

    $default  reduce using rule 24 (assign)


State 37

   13 var_or_func: type id_list .

    $default  reduce using rule 13 (var_or_func)


State 38

   22 id_list: assign . SEMI
   23        | assign . COMMA id_list

    COMMA  shift, and go to state 62
    SEMI   shift, and go to state 63


State 39

   32 arith: arith_expr SEMI .

    $default  reduce using rule 32 (arith)


State 40

   33 arith_expr: arith_arg PLUS . arith_arg
   38           | arith_arg PLUS . arith_expr

    LP     shift, and go to state 1
    ID     shift, and go to state 5
    INT    shift, and go to state 6
    FLOAT  shift, and go to state 7

    arith_expr  go to state 64
    arith_arg   go to state 65
    func_call   go to state 27


State 41

   34 arith_expr: arith_arg MINUS . arith_arg
   39           | arith_arg MINUS . arith_expr

    LP     shift, and go to state 1
    ID     shift, and go to state 5
    INT    shift, and go to state 6
    FLOAT  shift, and go to state 7

    arith_expr  go to state 66
    arith_arg   go to state 67
    func_call   go to state 27


State 42

   35 arith_expr: arith_arg MULT . arith_arg
   40           | arith_arg MULT . arith_expr

    LP     shift, and go to state 1
    ID     shift, and go to state 5
    INT    shift, and go to state 6
    FLOAT  shift, and go to state 7

    arith_expr  go to state 68
    arith_arg   go to state 69
    func_call   go to state 27


State 43

   36 arith_expr: arith_arg DIV . arith_arg
   41           | arith_arg DIV . arith_expr

    LP     shift, and go to state 1
    ID     shift, and go to state 5
    INT    shift, and go to state 6
    FLOAT  shift, and go to state 7

    arith_expr  go to state 70
    arith_arg   go to state 71
    func_call   go to state 27


State 44

   37 arith_expr: arith_arg MOD . arith_arg
   42           | arith_arg MOD . arith_expr

    LP     shift, and go to state 1
    ID     shift, and go to state 5
    INT    shift, and go to state 6
    FLOAT  shift, and go to state 7

    arith_expr  go to state 72
    arith_arg   go to state 73
    func_call   go to state 27


State 45

    6 stmt_wo_func: func_call SEMI .

    $default  reduce using rule 6 (stmt_wo_func)


State 46

   47 arith_arg: LP arith_expr RP .

    $default  reduce using rule 47 (arith_arg)


State 47

   56 func_decl: VOID ID LP . def_arg_temp RP SEMI
   57 func_def: VOID ID LP . def_arg_temp RP func_def_aux

    RP        reduce using rule 58 (def_arg_temp)
    $default  reduce using rule 59 ($@4)

    def_arg_temp  go to state 74
    $@4           go to state 75


State 48

   49 func_call: ID @3 LP . call_arg_list RP

    ID     shift, and go to state 76
    INT    shift, and go to state 77
    FLOAT  shift, and go to state 78

    $default  reduce using rule 50 (call_arg_list)

    call_arg_list  go to state 79
    call_arg       go to state 80


State 49

   75 switch_case: SWITCH LP ID . RP LC cases RC

    RP  shift, and go to state 81


State 50

   74 switch_case: SWITCH ID COL . LC cases RC

    LC  shift, and go to state 82


State 51

   19 var_decl: INT_DECL . $@1 id_list

    $default  reduce using rule 18 ($@1)

    $@1  go to state 83


State 52

   21 var_decl: FLOAT_DECL . $@2 id_list

    $default  reduce using rule 20 ($@2)

    $@2  go to state 84


State 53

   94 for_first: var_decl .

    $default  reduce using rule 94 (for_first)


State 54

   91 for_loop: FOR LP for_expr . RP func_def_aux

    RP  shift, and go to state 85


State 55

   92 for_expr: for_first . for_second for_third

    SEMI  shift, and go to state 86
    ID    shift, and go to state 56

    cond        go to state 87
    and_expr    go to state 58
    expr        go to state 59
    for_second  go to state 88


State 56

   73 expr: ID . LT ID

    LT  shift, and go to state 89


State 57

   99 while_loop: WHILE LP cond . RP func_def_aux

    RP  shift, and go to state 90


State 58

   69 cond: and_expr .
   70     | and_expr . OR cond

    OR  shift, and go to state 91

    $default  reduce using rule 69 (cond)


State 59

   71 and_expr: expr .
   72         | expr . AND and_expr

    AND  shift, and go to state 92

    $default  reduce using rule 71 (and_expr)


State 60

   25 assign: ID EQ . id_assign_list

    ID  shift, and go to state 93

    id_assign_list  go to state 94


State 61

   14 var_or_func: type ID LP . def_arg_temp RP SEMI
   15            | type ID LP . def_arg_temp RP func_def_aux

    RP        reduce using rule 58 (def_arg_temp)
    $default  reduce using rule 59 ($@4)

    def_arg_temp  go to state 95
    $@4           go to state 75


State 62

   23 id_list: assign COMMA . id_list

    ID  shift, and go to state 96

    id_list  go to state 97
    assign   go to state 38


State 63

   22 id_list: assign SEMI .

    $default  reduce using rule 22 (id_list)


State 64

   38 arith_expr: arith_arg PLUS arith_expr .

    $default  reduce using rule 38 (arith_expr)


State 65

   33 arith_expr: arith_arg . PLUS arith_arg
   33           | arith_arg PLUS arith_arg .
   34           | arith_arg . MINUS arith_arg
   35           | arith_arg . MULT arith_arg
   36           | arith_arg . DIV arith_arg
   37           | arith_arg . MOD arith_arg
   38           | arith_arg . PLUS arith_expr
   39           | arith_arg . MINUS arith_expr
   40           | arith_arg . MULT arith_expr
   41           | arith_arg . DIV arith_expr
   42           | arith_arg . MOD arith_expr

    PLUS   shift, and go to state 40
    MINUS  shift, and go to state 41
    MULT   shift, and go to state 42
    DIV    shift, and go to state 43
    MOD    shift, and go to state 44

    $default  reduce using rule 33 (arith_expr)


State 66

   39 arith_expr: arith_arg MINUS arith_expr .

    $default  reduce using rule 39 (arith_expr)


State 67

   33 arith_expr: arith_arg . PLUS arith_arg
   34           | arith_arg . MINUS arith_arg
   34           | arith_arg MINUS arith_arg .
   35           | arith_arg . MULT arith_arg
   36           | arith_arg . DIV arith_arg
   37           | arith_arg . MOD arith_arg
   38           | arith_arg . PLUS arith_expr
   39           | arith_arg . MINUS arith_expr
   40           | arith_arg . MULT arith_expr
   41           | arith_arg . DIV arith_expr
   42           | arith_arg . MOD arith_expr

    PLUS   shift, and go to state 40
    MINUS  shift, and go to state 41
    MULT   shift, and go to state 42
    DIV    shift, and go to state 43
    MOD    shift, and go to state 44

    $default  reduce using rule 34 (arith_expr)


State 68

   40 arith_expr: arith_arg MULT arith_expr .

    $default  reduce using rule 40 (arith_expr)


State 69

   33 arith_expr: arith_arg . PLUS arith_arg
   34           | arith_arg . MINUS arith_arg
   35           | arith_arg . MULT arith_arg
   35           | arith_arg MULT arith_arg .
   36           | arith_arg . DIV arith_arg
   37           | arith_arg . MOD arith_arg
   38           | arith_arg . PLUS arith_expr
   39           | arith_arg . MINUS arith_expr
   40           | arith_arg . MULT arith_expr
   41           | arith_arg . DIV arith_expr
   42           | arith_arg . MOD arith_expr

    PLUS   shift, and go to state 40
    MINUS  shift, and go to state 41
    MULT   shift, and go to state 42
    DIV    shift, and go to state 43
    MOD    shift, and go to state 44

    $default  reduce using rule 35 (arith_expr)


State 70

   41 arith_expr: arith_arg DIV arith_expr .

    $default  reduce using rule 41 (arith_expr)


State 71

   33 arith_expr: arith_arg . PLUS arith_arg
   34           | arith_arg . MINUS arith_arg
   35           | arith_arg . MULT arith_arg
   36           | arith_arg . DIV arith_arg
   36           | arith_arg DIV arith_arg .
   37           | arith_arg . MOD arith_arg
   38           | arith_arg . PLUS arith_expr
   39           | arith_arg . MINUS arith_expr
   40           | arith_arg . MULT arith_expr
   41           | arith_arg . DIV arith_expr
   42           | arith_arg . MOD arith_expr

    PLUS   shift, and go to state 40
    MINUS  shift, and go to state 41
    MULT   shift, and go to state 42
    DIV    shift, and go to state 43
    MOD    shift, and go to state 44

    $default  reduce using rule 36 (arith_expr)


State 72

   42 arith_expr: arith_arg MOD arith_expr .

    $default  reduce using rule 42 (arith_expr)


State 73

   33 arith_expr: arith_arg . PLUS arith_arg
   34           | arith_arg . MINUS arith_arg
   35           | arith_arg . MULT arith_arg
   36           | arith_arg . DIV arith_arg
   37           | arith_arg . MOD arith_arg
   37           | arith_arg MOD arith_arg .
   38           | arith_arg . PLUS arith_expr
   39           | arith_arg . MINUS arith_expr
   40           | arith_arg . MULT arith_expr
   41           | arith_arg . DIV arith_expr
   42           | arith_arg . MOD arith_expr

    PLUS   shift, and go to state 40
    MINUS  shift, and go to state 41
    MULT   shift, and go to state 42
    DIV    shift, and go to state 43
    MOD    shift, and go to state 44

    $default  reduce using rule 37 (arith_expr)


State 74

   56 func_decl: VOID ID LP def_arg_temp . RP SEMI
   57 func_def: VOID ID LP def_arg_temp . RP func_def_aux

    RP  shift, and go to state 98


State 75

   60 def_arg_temp: $@4 . def_arg_list

    INT_DECL    shift, and go to state 99
    FLOAT_DECL  shift, and go to state 100

    def_arg_list  go to state 101
    def_arg       go to state 102


State 76

   53 call_arg: ID .

    $default  reduce using rule 53 (call_arg)


State 77

   54 call_arg: INT .

    $default  reduce using rule 54 (call_arg)


State 78

   55 call_arg: FLOAT .

    $default  reduce using rule 55 (call_arg)


State 79

   49 func_call: ID @3 LP call_arg_list . RP

    RP  shift, and go to state 103


State 80

   51 call_arg_list: call_arg .
   52              | call_arg . COMMA call_arg_list

    COMMA  shift, and go to state 104

    $default  reduce using rule 51 (call_arg_list)


State 81

   75 switch_case: SWITCH LP ID RP . LC cases RC

    LC  shift, and go to state 105


State 82

   74 switch_case: SWITCH ID COL LC . cases RC

    CASE  shift, and go to state 106

    cases  go to state 107
    case   go to state 108


State 83

   19 var_decl: INT_DECL $@1 . id_list

    ID  shift, and go to state 96

    id_list  go to state 109
    assign   go to state 38


State 84

   21 var_decl: FLOAT_DECL $@2 . id_list

    ID  shift, and go to state 96

    id_list  go to state 110
    assign   go to state 38


State 85

   91 for_loop: FOR LP for_expr RP . func_def_aux

    LC      shift, and go to state 111
    LP      shift, and go to state 1
    ID      shift, and go to state 5
    INT     shift, and go to state 6
    FLOAT   shift, and go to state 7
    SWITCH  shift, and go to state 8
    FOR     shift, and go to state 9
    WHILE   shift, and go to state 10

    stmt_wo_func  go to state 112
    arith         go to state 17
    arith_expr    go to state 18
    arith_arg     go to state 19
    func_call     go to state 20
    func_def_aux  go to state 113
    switch_case   go to state 23
    for_loop      go to state 24
    while_loop    go to state 25


State 86

   95 for_second: SEMI .

    $default  reduce using rule 95 (for_second)


State 87

   96 for_second: cond . SEMI

    SEMI  shift, and go to state 114


State 88

   92 for_expr: for_first for_second . for_third

    ID  shift, and go to state 115

    $default  reduce using rule 97 (for_third)

    for_third  go to state 116


State 89

   73 expr: ID LT . ID

    ID  shift, and go to state 117


State 90

   99 while_loop: WHILE LP cond RP . func_def_aux

    LC      shift, and go to state 111
    LP      shift, and go to state 1
    ID      shift, and go to state 5
    INT     shift, and go to state 6
    FLOAT   shift, and go to state 7
    SWITCH  shift, and go to state 8
    FOR     shift, and go to state 9
    WHILE   shift, and go to state 10

    stmt_wo_func  go to state 112
    arith         go to state 17
    arith_expr    go to state 18
    arith_arg     go to state 19
    func_call     go to state 20
    func_def_aux  go to state 118
    switch_case   go to state 23
    for_loop      go to state 24
    while_loop    go to state 25


State 91

   70 cond: and_expr OR . cond

    ID  shift, and go to state 56

    cond      go to state 119
    and_expr  go to state 58
    expr      go to state 59


State 92

   72 and_expr: expr AND . and_expr

    ID  shift, and go to state 56

    and_expr  go to state 120
    expr      go to state 59


State 93

   26 id_assign_list: ID .
   27               | ID . EQ INT
   28               | ID . EQ FLOAT
   29               | ID . EQ arith_expr
   30               | ID . EQ func_call
   31               | ID . EQ id_assign_list

    EQ  shift, and go to state 121

    $default  reduce using rule 26 (id_assign_list)


State 94

   25 assign: ID EQ id_assign_list .

    $default  reduce using rule 25 (assign)


State 95

   14 var_or_func: type ID LP def_arg_temp . RP SEMI
   15            | type ID LP def_arg_temp . RP func_def_aux

    RP  shift, and go to state 122


State 96

   24 assign: ID .
   25       | ID . EQ id_assign_list

    EQ  shift, and go to state 60

    $default  reduce using rule 24 (assign)


State 97

   23 id_list: assign COMMA id_list .

    $default  reduce using rule 23 (id_list)


State 98

   56 func_decl: VOID ID LP def_arg_temp RP . SEMI
   57 func_def: VOID ID LP def_arg_temp RP . func_def_aux

    SEMI    shift, and go to state 123
    LC      shift, and go to state 111
    LP      shift, and go to state 1
    ID      shift, and go to state 5
    INT     shift, and go to state 6
    FLOAT   shift, and go to state 7
    SWITCH  shift, and go to state 8
    FOR     shift, and go to state 9
    WHILE   shift, and go to state 10

    stmt_wo_func  go to state 112
    arith         go to state 17
    arith_expr    go to state 18
    arith_arg     go to state 19
    func_call     go to state 20
    func_def_aux  go to state 124
    switch_case   go to state 23
    for_loop      go to state 24
    while_loop    go to state 25


State 99

   63 def_arg: INT_DECL . ID

    ID  shift, and go to state 125


State 100

   64 def_arg: FLOAT_DECL . ID

    ID  shift, and go to state 126


State 101

   60 def_arg_temp: $@4 def_arg_list .

    $default  reduce using rule 60 (def_arg_temp)


State 102

   61 def_arg_list: def_arg .
   62             | def_arg . COMMA def_arg_list

    COMMA  shift, and go to state 127

    $default  reduce using rule 61 (def_arg_list)


State 103

   49 func_call: ID @3 LP call_arg_list RP .

    $default  reduce using rule 49 (func_call)


State 104

   52 call_arg_list: call_arg COMMA . call_arg_list

    ID     shift, and go to state 76
    INT    shift, and go to state 77
    FLOAT  shift, and go to state 78

    $default  reduce using rule 50 (call_arg_list)

    call_arg_list  go to state 128
    call_arg       go to state 80


State 105

   75 switch_case: SWITCH LP ID RP LC . cases RC

    CASE  shift, and go to state 106

    cases  go to state 129
    case   go to state 108


State 106

   78 case: CASE . INT COL body break
   79     | CASE . INT COL LC body RC break
   80     | CASE . LP INT RP COL body break
   81     | CASE . LP INT RP COL LC body RC break
   82     | CASE . FLOAT COL body break
   83     | CASE . FLOAT COL LC body RC break
   84     | CASE . LP FLOAT RP COL body break
   85     | CASE . LP FLOAT RP COL LC body RC break

    LP     shift, and go to state 130
    INT    shift, and go to state 131
    FLOAT  shift, and go to state 132


State 107

   74 switch_case: SWITCH ID COL LC cases . RC

    RC  shift, and go to state 133


State 108

   76 cases: case . default
   77      | case . cases

    CASE     shift, and go to state 106
    DEFAULT  shift, and go to state 134

    $default  reduce using rule 86 (default)

    cases    go to state 135
    case     go to state 108
    default  go to state 136


State 109

   19 var_decl: INT_DECL $@1 id_list .

    $default  reduce using rule 19 (var_decl)


State 110

   21 var_decl: FLOAT_DECL $@2 id_list .

    $default  reduce using rule 21 (var_decl)


State 111

   66 func_def_aux: LC . body RC

    LP      shift, and go to state 1
    ID      shift, and go to state 5
    INT     shift, and go to state 6
    FLOAT   shift, and go to state 7
    SWITCH  shift, and go to state 8
    FOR     shift, and go to state 9
    WHILE   shift, and go to state 10

    stmt_wo_func  go to state 137
    arith         go to state 17
    arith_expr    go to state 18
    arith_arg     go to state 19
    func_call     go to state 20
    body          go to state 138
    switch_case   go to state 23
    for_loop      go to state 24
    while_loop    go to state 25


State 112

   65 func_def_aux: stmt_wo_func .

    $default  reduce using rule 65 (func_def_aux)


State 113

   91 for_loop: FOR LP for_expr RP func_def_aux .

    $default  reduce using rule 91 (for_loop)


State 114

   96 for_second: cond SEMI .

    $default  reduce using rule 96 (for_second)


State 115

   98 for_third: ID . EQ id_assign_list

    EQ  shift, and go to state 139


State 116

   92 for_expr: for_first for_second for_third .

    $default  reduce using rule 92 (for_expr)


State 117

   73 expr: ID LT ID .

    $default  reduce using rule 73 (expr)


State 118

   99 while_loop: WHILE LP cond RP func_def_aux .

    $default  reduce using rule 99 (while_loop)


State 119

   70 cond: and_expr OR cond .

    $default  reduce using rule 70 (cond)


State 120

   72 and_expr: expr AND and_expr .

    $default  reduce using rule 72 (and_expr)


State 121

   27 id_assign_list: ID EQ . INT
   28               | ID EQ . FLOAT
   29               | ID EQ . arith_expr
   30               | ID EQ . func_call
   31               | ID EQ . id_assign_list

    LP     shift, and go to state 1
    ID     shift, and go to state 140
    INT    shift, and go to state 141
    FLOAT  shift, and go to state 142

    id_assign_list  go to state 143
    arith_expr      go to state 144
    arith_arg       go to state 19
    func_call       go to state 145


State 122

   14 var_or_func: type ID LP def_arg_temp RP . SEMI
   15            | type ID LP def_arg_temp RP . func_def_aux

    SEMI    shift, and go to state 146
    LC      shift, and go to state 111
    LP      shift, and go to state 1
    ID      shift, and go to state 5
    INT     shift, and go to state 6
    FLOAT   shift, and go to state 7
    SWITCH  shift, and go to state 8
    FOR     shift, and go to state 9
    WHILE   shift, and go to state 10

    stmt_wo_func  go to state 112
    arith         go to state 17
    arith_expr    go to state 18
    arith_arg     go to state 19
    func_call     go to state 20
    func_def_aux  go to state 147
    switch_case   go to state 23
    for_loop      go to state 24
    while_loop    go to state 25


State 123

   56 func_decl: VOID ID LP def_arg_temp RP SEMI .

    $default  reduce using rule 56 (func_decl)


State 124

   57 func_def: VOID ID LP def_arg_temp RP func_def_aux .

    $default  reduce using rule 57 (func_def)


State 125

   63 def_arg: INT_DECL ID .

    $default  reduce using rule 63 (def_arg)


State 126

   64 def_arg: FLOAT_DECL ID .

    $default  reduce using rule 64 (def_arg)


State 127

   62 def_arg_list: def_arg COMMA . def_arg_list

    INT_DECL    shift, and go to state 99
    FLOAT_DECL  shift, and go to state 100

    def_arg_list  go to state 148
    def_arg       go to state 102


State 128

   52 call_arg_list: call_arg COMMA call_arg_list .

    $default  reduce using rule 52 (call_arg_list)


State 129

   75 switch_case: SWITCH LP ID RP LC cases . RC

    RC  shift, and go to state 149


State 130

   80 case: CASE LP . INT RP COL body break
   81     | CASE LP . INT RP COL LC body RC break
   84     | CASE LP . FLOAT RP COL body break
   85     | CASE LP . FLOAT RP COL LC body RC break

    INT    shift, and go to state 150
    FLOAT  shift, and go to state 151


State 131

   78 case: CASE INT . COL body break
   79     | CASE INT . COL LC body RC break

    COL  shift, and go to state 152


State 132

   82 case: CASE FLOAT . COL body break
   83     | CASE FLOAT . COL LC body RC break

    COL  shift, and go to state 153


State 133

   74 switch_case: SWITCH ID COL LC cases RC .

    $default  reduce using rule 74 (switch_case)


State 134

   87 default: DEFAULT . COL body break
   88        | DEFAULT . COL LC body RC break

    COL  shift, and go to state 154


State 135

   77 cases: case cases .

    $default  reduce using rule 77 (cases)


State 136

   76 cases: case default .

    $default  reduce using rule 76 (cases)


State 137

   67 body: stmt_wo_func .
   68     | stmt_wo_func . body

    LP      shift, and go to state 1
    ID      shift, and go to state 5
    INT     shift, and go to state 6
    FLOAT   shift, and go to state 7
    SWITCH  shift, and go to state 8
    FOR     shift, and go to state 9
    WHILE   shift, and go to state 10

    $default  reduce using rule 67 (body)

    stmt_wo_func  go to state 137
    arith         go to state 17
    arith_expr    go to state 18
    arith_arg     go to state 19
    func_call     go to state 20
    body          go to state 155
    switch_case   go to state 23
    for_loop      go to state 24
    while_loop    go to state 25


State 138

   66 func_def_aux: LC body . RC

    RC  shift, and go to state 156


State 139

   98 for_third: ID EQ . id_assign_list

    ID  shift, and go to state 93

    id_assign_list  go to state 157


State 140

   26 id_assign_list: ID .
   27               | ID . EQ INT
   28               | ID . EQ FLOAT
   29               | ID . EQ arith_expr
   30               | ID . EQ func_call
   31               | ID . EQ id_assign_list
   43 arith_arg: ID .
   49 func_call: ID . @3 LP call_arg_list RP

    EQ  shift, and go to state 121

    COMMA     reduce using rule 26 (id_assign_list)
    SEMI      reduce using rule 26 (id_assign_list)
    LP        reduce using rule 48 (@3)
    RP        reduce using rule 26 (id_assign_list)
    $default  reduce using rule 43 (arith_arg)

    @3  go to state 29


State 141

   27 id_assign_list: ID EQ INT .
   44 arith_arg: INT .

    COMMA     reduce using rule 27 (id_assign_list)
    SEMI      reduce using rule 27 (id_assign_list)
    RP        reduce using rule 27 (id_assign_list)
    $default  reduce using rule 44 (arith_arg)


State 142

   28 id_assign_list: ID EQ FLOAT .
   45 arith_arg: FLOAT .

    COMMA     reduce using rule 28 (id_assign_list)
    SEMI      reduce using rule 28 (id_assign_list)
    RP        reduce using rule 28 (id_assign_list)
    $default  reduce using rule 45 (arith_arg)


State 143

   31 id_assign_list: ID EQ id_assign_list .

    $default  reduce using rule 31 (id_assign_list)


State 144

   29 id_assign_list: ID EQ arith_expr .

    $default  reduce using rule 29 (id_assign_list)


State 145

   30 id_assign_list: ID EQ func_call .
   46 arith_arg: func_call .

    COMMA     reduce using rule 30 (id_assign_list)
    SEMI      reduce using rule 30 (id_assign_list)
    RP        reduce using rule 30 (id_assign_list)
    $default  reduce using rule 46 (arith_arg)


State 146

   14 var_or_func: type ID LP def_arg_temp RP SEMI .

    $default  reduce using rule 14 (var_or_func)


State 147

   15 var_or_func: type ID LP def_arg_temp RP func_def_aux .

    $default  reduce using rule 15 (var_or_func)


State 148

   62 def_arg_list: def_arg COMMA def_arg_list .

    $default  reduce using rule 62 (def_arg_list)


State 149

   75 switch_case: SWITCH LP ID RP LC cases RC .

    $default  reduce using rule 75 (switch_case)


State 150

   80 case: CASE LP INT . RP COL body break
   81     | CASE LP INT . RP COL LC body RC break

    RP  shift, and go to state 158


State 151

   84 case: CASE LP FLOAT . RP COL body break
   85     | CASE LP FLOAT . RP COL LC body RC break

    RP  shift, and go to state 159


State 152

   78 case: CASE INT COL . body break
   79     | CASE INT COL . LC body RC break

    LC      shift, and go to state 160
    LP      shift, and go to state 1
    ID      shift, and go to state 5
    INT     shift, and go to state 6
    FLOAT   shift, and go to state 7
    SWITCH  shift, and go to state 8
    FOR     shift, and go to state 9
    WHILE   shift, and go to state 10

    stmt_wo_func  go to state 137
    arith         go to state 17
    arith_expr    go to state 18
    arith_arg     go to state 19
    func_call     go to state 20
    body          go to state 161
    switch_case   go to state 23
    for_loop      go to state 24
    while_loop    go to state 25


State 153

   82 case: CASE FLOAT COL . body break
   83     | CASE FLOAT COL . LC body RC break

    LC      shift, and go to state 162
    LP      shift, and go to state 1
    ID      shift, and go to state 5
    INT     shift, and go to state 6
    FLOAT   shift, and go to state 7
    SWITCH  shift, and go to state 8
    FOR     shift, and go to state 9
    WHILE   shift, and go to state 10

    stmt_wo_func  go to state 137
    arith         go to state 17
    arith_expr    go to state 18
    arith_arg     go to state 19
    func_call     go to state 20
    body          go to state 163
    switch_case   go to state 23
    for_loop      go to state 24
    while_loop    go to state 25


State 154

   87 default: DEFAULT COL . body break
   88        | DEFAULT COL . LC body RC break

    LC      shift, and go to state 164
    LP      shift, and go to state 1
    ID      shift, and go to state 5
    INT     shift, and go to state 6
    FLOAT   shift, and go to state 7
    SWITCH  shift, and go to state 8
    FOR     shift, and go to state 9
    WHILE   shift, and go to state 10

    stmt_wo_func  go to state 137
    arith         go to state 17
    arith_expr    go to state 18
    arith_arg     go to state 19
    func_call     go to state 20
    body          go to state 165
    switch_case   go to state 23
    for_loop      go to state 24
    while_loop    go to state 25


State 155

   68 body: stmt_wo_func body .

    $default  reduce using rule 68 (body)


State 156

   66 func_def_aux: LC body RC .

    $default  reduce using rule 66 (func_def_aux)


State 157

   98 for_third: ID EQ id_assign_list .

    $default  reduce using rule 98 (for_third)


State 158

   80 case: CASE LP INT RP . COL body break
   81     | CASE LP INT RP . COL LC body RC break

    COL  shift, and go to state 166


State 159

   84 case: CASE LP FLOAT RP . COL body break
   85     | CASE LP FLOAT RP . COL LC body RC break

    COL  shift, and go to state 167


State 160

   79 case: CASE INT COL LC . body RC break

    LP      shift, and go to state 1
    ID      shift, and go to state 5
    INT     shift, and go to state 6
    FLOAT   shift, and go to state 7
    SWITCH  shift, and go to state 8
    FOR     shift, and go to state 9
    WHILE   shift, and go to state 10

    stmt_wo_func  go to state 137
    arith         go to state 17
    arith_expr    go to state 18
    arith_arg     go to state 19
    func_call     go to state 20
    body          go to state 168
    switch_case   go to state 23
    for_loop      go to state 24
    while_loop    go to state 25


State 161

   78 case: CASE INT COL body . break

    BREAK  shift, and go to state 169

    $default  reduce using rule 89 (break)

    break  go to state 170


State 162

   83 case: CASE FLOAT COL LC . body RC break

    LP      shift, and go to state 1
    ID      shift, and go to state 5
    INT     shift, and go to state 6
    FLOAT   shift, and go to state 7
    SWITCH  shift, and go to state 8
    FOR     shift, and go to state 9
    WHILE   shift, and go to state 10

    stmt_wo_func  go to state 137
    arith         go to state 17
    arith_expr    go to state 18
    arith_arg     go to state 19
    func_call     go to state 20
    body          go to state 171
    switch_case   go to state 23
    for_loop      go to state 24
    while_loop    go to state 25


State 163

   82 case: CASE FLOAT COL body . break

    BREAK  shift, and go to state 169

    $default  reduce using rule 89 (break)

    break  go to state 172


State 164

   88 default: DEFAULT COL LC . body RC break

    LP      shift, and go to state 1
    ID      shift, and go to state 5
    INT     shift, and go to state 6
    FLOAT   shift, and go to state 7
    SWITCH  shift, and go to state 8
    FOR     shift, and go to state 9
    WHILE   shift, and go to state 10

    stmt_wo_func  go to state 137
    arith         go to state 17
    arith_expr    go to state 18
    arith_arg     go to state 19
    func_call     go to state 20
    body          go to state 173
    switch_case   go to state 23
    for_loop      go to state 24
    while_loop    go to state 25


State 165

   87 default: DEFAULT COL body . break

    BREAK  shift, and go to state 169

    $default  reduce using rule 89 (break)

    break  go to state 174


State 166

   80 case: CASE LP INT RP COL . body break
   81     | CASE LP INT RP COL . LC body RC break

    LC      shift, and go to state 175
    LP      shift, and go to state 1
    ID      shift, and go to state 5
    INT     shift, and go to state 6
    FLOAT   shift, and go to state 7
    SWITCH  shift, and go to state 8
    FOR     shift, and go to state 9
    WHILE   shift, and go to state 10

    stmt_wo_func  go to state 137
    arith         go to state 17
    arith_expr    go to state 18
    arith_arg     go to state 19
    func_call     go to state 20
    body          go to state 176
    switch_case   go to state 23
    for_loop      go to state 24
    while_loop    go to state 25


State 167

   84 case: CASE LP FLOAT RP COL . body break
   85     | CASE LP FLOAT RP COL . LC body RC break

    LC      shift, and go to state 177
    LP      shift, and go to state 1
    ID      shift, and go to state 5
    INT     shift, and go to state 6
    FLOAT   shift, and go to state 7
    SWITCH  shift, and go to state 8
    FOR     shift, and go to state 9
    WHILE   shift, and go to state 10

    stmt_wo_func  go to state 137
    arith         go to state 17
    arith_expr    go to state 18
    arith_arg     go to state 19
    func_call     go to state 20
    body          go to state 178
    switch_case   go to state 23
    for_loop      go to state 24
    while_loop    go to state 25


State 168

   79 case: CASE INT COL LC body . RC break

    RC  shift, and go to state 179


State 169

   90 break: BREAK . SEMI

    SEMI  shift, and go to state 180


State 170

   78 case: CASE INT COL body break .

    $default  reduce using rule 78 (case)


State 171

   83 case: CASE FLOAT COL LC body . RC break

    RC  shift, and go to state 181


State 172

   82 case: CASE FLOAT COL body break .

    $default  reduce using rule 82 (case)


State 173

   88 default: DEFAULT COL LC body . RC break

    RC  shift, and go to state 182


State 174

   87 default: DEFAULT COL body break .

    $default  reduce using rule 87 (default)


State 175

   81 case: CASE LP INT RP COL LC . body RC break

    LP      shift, and go to state 1
    ID      shift, and go to state 5
    INT     shift, and go to state 6
    FLOAT   shift, and go to state 7
    SWITCH  shift, and go to state 8
    FOR     shift, and go to state 9
    WHILE   shift, and go to state 10

    stmt_wo_func  go to state 137
    arith         go to state 17
    arith_expr    go to state 18
    arith_arg     go to state 19
    func_call     go to state 20
    body          go to state 183
    switch_case   go to state 23
    for_loop      go to state 24
    while_loop    go to state 25


State 176

   80 case: CASE LP INT RP COL body . break

    BREAK  shift, and go to state 169

    $default  reduce using rule 89 (break)

    break  go to state 184


State 177

   85 case: CASE LP FLOAT RP COL LC . body RC break

    LP      shift, and go to state 1
    ID      shift, and go to state 5
    INT     shift, and go to state 6
    FLOAT   shift, and go to state 7
    SWITCH  shift, and go to state 8
    FOR     shift, and go to state 9
    WHILE   shift, and go to state 10

    stmt_wo_func  go to state 137
    arith         go to state 17
    arith_expr    go to state 18
    arith_arg     go to state 19
    func_call     go to state 20
    body          go to state 185
    switch_case   go to state 23
    for_loop      go to state 24
    while_loop    go to state 25


State 178

   84 case: CASE LP FLOAT RP COL body . break

    BREAK  shift, and go to state 169

    $default  reduce using rule 89 (break)

    break  go to state 186


State 179

   79 case: CASE INT COL LC body RC . break

    BREAK  shift, and go to state 169

    $default  reduce using rule 89 (break)

    break  go to state 187


State 180

   90 break: BREAK SEMI .

    $default  reduce using rule 90 (break)


State 181

   83 case: CASE FLOAT COL LC body RC . break

    BREAK  shift, and go to state 169

    $default  reduce using rule 89 (break)

    break  go to state 188


State 182

   88 default: DEFAULT COL LC body RC . break

    BREAK  shift, and go to state 169

    $default  reduce using rule 89 (break)

    break  go to state 189


State 183

   81 case: CASE LP INT RP COL LC body . RC break

    RC  shift, and go to state 190


State 184

   80 case: CASE LP INT RP COL body break .

    $default  reduce using rule 80 (case)


State 185

   85 case: CASE LP FLOAT RP COL LC body . RC break

    RC  shift, and go to state 191


State 186

   84 case: CASE LP FLOAT RP COL body break .

    $default  reduce using rule 84 (case)


State 187

   79 case: CASE INT COL LC body RC break .

    $default  reduce using rule 79 (case)


State 188

   83 case: CASE FLOAT COL LC body RC break .

    $default  reduce using rule 83 (case)


State 189

   88 default: DEFAULT COL LC body RC break .

    $default  reduce using rule 88 (default)


State 190

   81 case: CASE LP INT RP COL LC body RC . break

    BREAK  shift, and go to state 169

    $default  reduce using rule 89 (break)

    break  go to state 192


State 191

   85 case: CASE LP FLOAT RP COL LC body RC . break

    BREAK  shift, and go to state 169

    $default  reduce using rule 89 (break)

    break  go to state 193


State 192

   81 case: CASE LP INT RP COL LC body RC break .

    $default  reduce using rule 81 (case)


State 193

   85 case: CASE LP FLOAT RP COL LC body RC break .

    $default  reduce using rule 85 (case)
